{"version":3,"sources":["game.concat.js"],"names":["GameBoard","[object Object]","game","isVR","span","this","playerColours","rotation","heightOffset","BOX_WIDTH","SPREAD","Math","floor","SPACING","SPHERE_RADIUS","SPHERE_V_COUNT","OPACITY_ON","OPACITY_OFF","explodedMult","isLerpingBoxes","colours","RED","BLUE","GREEN","PURPLE","YELLOW","ORANGE","BLACK","CYAN","PINK","BRIGHTGREY","LIGHTGREY","DARKGREY","WHITE","previewColour","playerIndex","toUpperCase","previewSphereGeometry","THREE","SphereGeometry","previewSphereMaterial","MeshLambertMaterial","color","transparent","opacity","emissive","setHex","previewSphere","Mesh","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","raycaster","Raycaster","mouse","Vector2","renderer","WebGLRenderer","alpha","antialias","setPixelRatio","devicePixelRatio","setSize","domElement","id","boardElement","light","DirectionalLight","position","set","normalize","add","y","initBoards","renderLoop","rotate","addEventListener","event","sizeY","target","height","sizeX","width","x","offsetX","offsetY","highlightedBoxes","boxes","Array","map","spheres","b","r","c","addBox","geometry","BoxGeometry","material","box","z","data","origPos","colour","sphereGeometry","sphereMaterial","sphere","length","push","cube","incr","gravity","modifier","pos","gravityEnabled","axis","start","end","location","isLerping","newPos","abs","someSphereIsLerping","requestAnimationFrame","lerpBoxes","lerpSpheres","lookAt","updateMatrixWorld","render","setFromCamera","intersects","intersectObjects","children","hoveredObject","object","parent","clearHighlightedBoxes","highlightColumn","highlightRowY","highlightRowX","getPreviewPosition","mouseIsDown","isClicked","setTimeout","gameState","ws","sendMove","makeMove","board","row","col","player","nextPlayer","addSphere","setPreviewColour","resetBoard","addPoint","remove","undefined","sin","PI","cos","exports","GamePlayer","type","console","log","lastState","lastMove","fetch","method","body","JSON","stringify","then","json","move","value","GameLogic","gameBoard","players","isTraining","isMultiplayer","aiOpponent","parseInt","numPlayers","resetGame","directions","up","down","left","right","forward","backward","modifiers","random","p","pickMove","boardGameState","rowGameState","clearLastState","reward","applyGravityToMove","isWinningMove","forEach","pi","isFull","sendState","boardIndex","tileY","tileX","match","max","mid","every","ri","bi","counts","i","direction","i2","everyBoard","moveSphere","everyColumn","checkAll"],"mappings":"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","file":"game.min.js","sourcesContent":["\"use strict\"\r\n\r\nclass GameBoard {// eslint-disable-line\r\n\r\n    constructor (game, isVR) {\r\n\r\n        const {span} = game\r\n\r\n        this.playerColours = [\"blue\", \"red\", \"green\", \"purple\", \"yellow\", \"orange\", \"black\", \"cyan\", \"pink\", \"darkgrey\"]\r\n        this.rotation = -45\r\n        this.span = span\r\n        this.game = game // Two way binding\r\n        this.heightOffset = 0\r\n\r\n        // Rendering constants\r\n        this.BOX_WIDTH = 0.5\r\n        this.SPREAD = Math.floor(this.span / 2)\r\n        this.SPACING = 1.5\r\n        this.SPHERE_RADIUS = 0.2\r\n        this.SPHERE_V_COUNT = 50\r\n        this.OPACITY_ON = 0.5\r\n        this.OPACITY_OFF = 0.25\r\n\r\n        this.explodedMult = 1\r\n        this.isLerpingBoxes = false\r\n\r\n        this.colours = {\r\n            RED: 0xff0000,\r\n            BLUE: 0x0000ff,\r\n            GREEN: 0x00ff00,\r\n            PURPLE: 0x880088,\r\n            YELLOW: 0xffff00,\r\n            ORANGE: 0xff6600,\r\n            BLACK: 0x000000,\r\n            CYAN: 0x00ffff,\r\n            PINK: 0xffc0cb,\r\n            BRIGHTGREY: 0xaaaaaa,\r\n            LIGHTGREY: 0x999999,\r\n            DARKGREY: 0x666666,\r\n            WHITE: 0xffffff\r\n        }\r\n\r\n        // Create a render sphere to move around to the correct location\r\n        const previewColour = this.colours[this.playerColours[this.game.playerIndex].toUpperCase()]\r\n        const previewSphereGeometry = new THREE.SphereGeometry(this.SPHERE_RADIUS, this.SPHERE_V_COUNT, this.SPHERE_V_COUNT)\r\n        const previewSphereMaterial = new THREE.MeshLambertMaterial({color: previewColour, transparent: true})\r\n        previewSphereMaterial.opacity = 0\r\n        previewSphereMaterial.emissive.setHex(previewColour)\r\n        this.previewSphere = new THREE.Mesh(previewSphereGeometry, previewSphereMaterial)\r\n\r\n\r\n        if (isVR) return\r\n\r\n        this.scene = new THREE.Scene()\r\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\r\n        this.raycaster = new THREE.Raycaster()\r\n        this.mouse = new THREE.Vector2()\r\n        this.renderer = new THREE.WebGLRenderer({alpha: true, antialias: true})\r\n        this.renderer.setPixelRatio(window.devicePixelRatio)\r\n        this.renderer.setSize(window.innerWidth-100, window.innerHeight-200)\r\n        this.renderer.domElement.id = \"rendererDomElement\"\r\n        this.boardElement = this.renderer.domElement\r\n\r\n        const light = new THREE.DirectionalLight(this.colours.LIGHTGREY, 1)\r\n        light.position.set(1, 1, 1).normalize()\r\n        this.scene.add(light)\r\n\r\n        this.camera.position.y = 2\r\n\r\n        this.scene.add(this.previewSphere)\r\n\r\n        this.initBoards()\r\n        this.renderLoop()\r\n        this.rotate()\r\n\r\n        this.boardElement.addEventListener(\"mousemove\", event => {\r\n            const sizeY = event.target.height\r\n            const sizeX = event.target.width\r\n            this.mouse.x = event.offsetX / sizeX * 2 - 1\r\n            this.mouse.y = -event.offsetY / sizeY * 2 + 1\r\n        }, false)\r\n    }\r\n\r\n    // Create volumes to store the boxes / spheres\r\n    initBoards () {\r\n        this.highlightedBoxes = []\r\n        this.boxes = [...new Array(this.span)].map(() => [...new Array(this.span)].map(() => [...new Array(this.span)]))\r\n        this.spheres = [...new Array(this.span)].map(() => [...new Array(this.span)].map(() => [...new Array(this.span)]))\r\n\r\n        // Populate the canvas with the board cubes\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    this.addBox(b, r, c)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addBox (b, r, c) {\r\n        const geometry = new THREE.BoxGeometry(this.BOX_WIDTH, this.BOX_WIDTH, this.BOX_WIDTH)\r\n        const material = new THREE.MeshLambertMaterial({color: this.colours.DARKGREY})\r\n        material.opacity = this.OPACITY_OFF\r\n        material.transparent = true\r\n\r\n        const box = new THREE.Mesh(geometry, material)\r\n        box.material.emissive.setHex(this.colours.LIGHTGREY)\r\n\r\n        box.position.x = (c - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        box.position.y = (b - this.SPREAD) * this.BOX_WIDTH * this.SPACING + this.heightOffset\r\n        box.position.z = (r - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        box.data = {b, r, c}\r\n        box.origPos = {\r\n            x: box.position.x,\r\n            y: box.position.y,\r\n            z: box.position.z\r\n        }\r\n\r\n        this.scene.add(box)\r\n        this.boxes[b][r][c] = box\r\n    }\r\n\r\n    addSphere (b, r, c, colour) {\r\n        const sphereGeometry = new THREE.SphereGeometry(this.SPHERE_RADIUS, this.SPHERE_V_COUNT, this.SPHERE_V_COUNT)\r\n        const sphereMaterial = new THREE.MeshLambertMaterial({color: this.colours[colour.toUpperCase()]})\r\n        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial)\r\n        sphere.material.emissive.setHex(this.colours[colour.toUpperCase()])\r\n\r\n        sphere.position.x = (c - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        sphere.position.y = (b - this.SPREAD) * this.BOX_WIDTH * this.SPACING + this.heightOffset\r\n        sphere.position.z = (r - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        sphere.origPos = {\r\n            x: sphere.position.x,\r\n            y: sphere.position.y,\r\n            z: sphere.position.z\r\n        }\r\n\r\n        // Set the sphere position to the exploded position\r\n        if (this.explodedMult!=1) {\r\n            sphere.position.x += sphere.origPos.x * this.explodedMult - sphere.position.x\r\n            sphere.position.y += sphere.origPos.y * this.explodedMult - sphere.position.y\r\n            sphere.position.z += sphere.origPos.z * this.explodedMult - sphere.position.z\r\n        }\r\n\r\n        this.spheres[b][r][c] = sphere\r\n        this.scene.add(sphere)\r\n    }\r\n\r\n    clearHighlightedBoxes () {\r\n        for (let b=0; b<this.highlightedBoxes.length; b++) {\r\n            this.highlightedBoxes[b].material.opacity = this.OPACITY_OFF\r\n            this.highlightedBoxes[b].material.emissive.setHex(this.colours.LIGHTGREY)\r\n        }\r\n        this.highlightedBoxes = []\r\n        this.previewSphere.material.opacity = 0\r\n    }\r\n\r\n    highlightColumn ({r, c}) {\r\n        for (let b=0; b<this.span; b++) {\r\n            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\r\n            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY)\r\n            this.highlightedBoxes.push(this.boxes[b][r][c])\r\n        }\r\n    }\r\n\r\n    highlightRowY ({b, r}) {\r\n        for (let c=0; c<this.span; c++) {\r\n            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\r\n            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY)\r\n            this.highlightedBoxes.push(this.boxes[b][r][c])\r\n        }\r\n    }\r\n\r\n    highlightRowX ({b, c}) {\r\n        for (let r=0; r<this.span; r++) {\r\n            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\r\n            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY)\r\n            this.highlightedBoxes.push(this.boxes[b][r][c])\r\n        }\r\n    }\r\n\r\n    getPreviewPosition (cube) {\r\n\r\n        const incr = this.game.gravity.modifier\r\n        const pos = {\r\n            x : cube.origPos.x,\r\n            y : cube.origPos.y,\r\n            z : cube.origPos.z\r\n        }\r\n\r\n        pos.b = cube.data.b\r\n        pos.r = cube.data.r\r\n        pos.c = cube.data.c\r\n\r\n        if (!this.game.gravityEnabled) {\r\n            return pos\r\n        }\r\n\r\n        switch (this.game.gravity.axis) {\r\n            // up/down\r\n            case 0:\r\n                // Column full\r\n                if (this.spheres[incr==-1 ? this.span-1 : 0][cube.data.r][cube.data.c]) {\r\n                    return null\r\n                }\r\n\r\n                pos.b = incr==-1 ? 0 : this.span-1\r\n\r\n                while (this.spheres[pos.b][cube.data.r][cube.data.c]) {\r\n                    pos.b -= incr\r\n                }\r\n\r\n                pos.y = (pos.b - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n                break\r\n\r\n            // left/right\r\n            case 1:\r\n                // Row full\r\n                if (this.spheres[cube.data.b][cube.data.r][incr==-1 ? this.span-1 : 0]) {\r\n                    return null\r\n                }\r\n\r\n                pos.c = incr==-1 ? 0 : this.span-1\r\n\r\n                while (this.spheres[cube.data.b][cube.data.r][pos.c]) {\r\n                    pos.c -= incr\r\n                }\r\n\r\n                pos.x = (pos.c - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n                break\r\n            // forward/backward\r\n            case 2:\r\n                // Row full\r\n                if (this.spheres[cube.data.b][incr==-1 ? this.span-1 : 0][cube.data.c]) {\r\n                    return null\r\n                }\r\n\r\n                pos.r = incr==-1 ? 0 : this.span-1\r\n\r\n                while (this.spheres[cube.data.b][pos.r][cube.data.c]) {\r\n                    pos.r -= incr\r\n                }\r\n\r\n                pos.z = (pos.r - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n                break\r\n        }\r\n\r\n        if (this.explodedMult!=1) {\r\n            pos.x *= this.explodedMult\r\n            pos.y *= this.explodedMult\r\n            pos.z *= this.explodedMult\r\n        }\r\n\r\n        // Don't render it if there's already a sphere at that location\r\n        if (this.spheres[pos.b][pos.r][pos.c]) {\r\n            return null\r\n        }\r\n\r\n        return pos\r\n    }\r\n\r\n    moveSphere (start, end, axis, location) {\r\n\r\n        // Set the new position for the sphere\r\n        const sphere = this.spheres[start.b][start.r][start.c]\r\n        sphere.isLerping = true\r\n        sphere.newPos = {}\r\n        sphere.newPos.axis = axis\r\n        sphere.newPos[axis] = (location - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n\r\n        // Move the spheres in the spheres state\r\n        this.spheres[end.b][end.r][end.c] = sphere\r\n        this.spheres[start.b][start.r][start.c] = null\r\n    }\r\n\r\n    // Lerp the boxes into position, when exploded\r\n    lerpBoxes () {\r\n        if (this.isLerpingBoxes) {\r\n            for (let b=0; b<this.span; b++) {\r\n                for (let r=0; r<this.span; r++) {\r\n                    for (let c=0; c<this.span; c++) {\r\n\r\n                        if (b!=this.SPREAD && r!=this.SPREAD && c!=this.SPREAD\r\n                            && Math.abs(this.boxes[b][r][c].position.x - this.boxes[b][r][c].origPos.x * this.explodedMult) < 0.005) {\r\n\r\n                            this.isLerpingBoxes = false\r\n                            this.boxes[b][r][c].position.x = this.boxes[b][r][c].origPos.x * this.explodedMult\r\n                            this.boxes[b][r][c].position.y = this.boxes[b][r][c].origPos.y * this.explodedMult\r\n                            this.boxes[b][r][c].position.z = this.boxes[b][r][c].origPos.z * this.explodedMult\r\n\r\n                            if (this.spheres[b][r][c]) {\r\n                                this.spheres[b][r][c].position.x += this.spheres[b][r][c].origPos.x * this.explodedMult - this.spheres[b][r][c].position.x\r\n                                this.spheres[b][r][c].position.y += this.spheres[b][r][c].origPos.y * this.explodedMult - this.spheres[b][r][c].position.y\r\n                                this.spheres[b][r][c].position.z += this.spheres[b][r][c].origPos.z * this.explodedMult - this.spheres[b][r][c].position.z\r\n                            }\r\n\r\n                        } else {\r\n                            this.boxes[b][r][c].position.x += (this.boxes[b][r][c].origPos.x * this.explodedMult - this.boxes[b][r][c].position.x) / 10\r\n                            this.boxes[b][r][c].position.y += (this.boxes[b][r][c].origPos.y * this.explodedMult - this.boxes[b][r][c].position.y) / 10\r\n                            this.boxes[b][r][c].position.z += (this.boxes[b][r][c].origPos.z * this.explodedMult - this.boxes[b][r][c].position.z) / 10\r\n\r\n                            if (this.spheres[b][r][c]) {\r\n                                this.spheres[b][r][c].position.x += (this.spheres[b][r][c].origPos.x * this.explodedMult - this.spheres[b][r][c].position.x) / 10\r\n                                this.spheres[b][r][c].position.y += (this.spheres[b][r][c].origPos.y * this.explodedMult - this.spheres[b][r][c].position.y) / 10\r\n                                this.spheres[b][r][c].position.z += (this.spheres[b][r][c].origPos.z * this.explodedMult - this.spheres[b][r][c].position.z) / 10\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Lerp the spheres into their new place\r\n    lerpSpheres () {\r\n\r\n        this.someSphereIsLerping = false\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n\r\n                    if (this.spheres[b][r][c] && this.spheres[b][r][c].isLerping) {\r\n\r\n                        this.someSphereIsLerping = true\r\n\r\n                        const sphere = this.spheres[b][r][c]\r\n                        const {axis} = sphere.newPos\r\n\r\n                        if (Math.abs(sphere.position[axis] - sphere.newPos[axis] * this.explodedMult) > 0.01) {\r\n                            sphere.position[axis] += (sphere.newPos[axis] * this.explodedMult - sphere.position[axis]) / 10\r\n                        } else {\r\n                            sphere.isLerping = false\r\n                            sphere.position[axis] = sphere.newPos[axis] * this.explodedMult\r\n                            sphere.origPos[axis] = sphere.newPos[axis]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    renderLoop () {\r\n\r\n        requestAnimationFrame(() => this.renderLoop())\r\n        this.lerpBoxes()\r\n        this.lerpSpheres()\r\n\r\n        this.camera.lookAt(this.scene.position)\r\n        this.camera.updateMatrixWorld()\r\n\r\n        this.renderer.render(this.scene, this.camera)\r\n        this.raycaster.setFromCamera(this.mouse, this.camera)\r\n\r\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true)\r\n\r\n        if (intersects.length) {\r\n\r\n            // If still hovering on the same thing...\r\n            if (this.hoveredObject && (this.hoveredObject==intersects[0].object || this.hoveredObject==intersects[0].object.parent)) {\r\n\r\n                if (this.mouseIsDown && !this.hoveredObject.data.isClicked) {\r\n                    this.hoveredObject.data.isClicked = true\r\n                    setTimeout(() => {\r\n                        if (this.hoveredObject) {\r\n                            this.hoveredObject.data.isClicked = false\r\n                        }\r\n                    }, 500)\r\n\r\n                    const {b, r, c} = this.previewSphere.data\r\n\r\n                    if (this.game.gameState[b][r][c]===\" \") {\r\n                        if (ws){\r\n                            sendMove(this.game.playerIndex, b, r, c, this.game.gameState)\r\n                        } else {\r\n                            this.game.makeMove(this.game.playerIndex, b, r, c)\r\n                        }\r\n                    }\r\n                }\r\n\r\n            } else {\r\n\r\n                // Set the currently hovered over object\r\n                this.hoveredObject = intersects[0].object.data ? intersects[0].object : intersects[0].object.parent\r\n                this.clearHighlightedBoxes()\r\n\r\n                if (this.hoveredObject.data) {\r\n                    // Also TODO, decide which one of these to do, based on the current gravity\r\n\r\n                    if (!this.isLerpingBoxes && !this.someSphereIsLerping) {\r\n\r\n                        if (this.game.gravityEnabled) {\r\n                            switch (this.game.gravity.axis) {\r\n                                case 0:\r\n                                    this.highlightColumn(this.hoveredObject.data)\r\n                                    break\r\n                                case 1:\r\n                                    this.highlightRowY(this.hoveredObject.data)\r\n                                    break\r\n                                case 2:\r\n                                    this.highlightRowX(this.hoveredObject.data)\r\n                                    break\r\n                            }\r\n                        } else {\r\n                            // Highlight only the hovered over box\r\n                            const {b, r, c} = this.hoveredObject.data\r\n                            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\r\n                            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY)\r\n                            this.highlightedBoxes.push(this.boxes[b][r][c])\r\n                        }\r\n\r\n                        // Render the preview sphere at the correct location\r\n                        const pos = this.getPreviewPosition(this.hoveredObject)\r\n\r\n                        if (pos) {\r\n                            this.previewSphere.position.x = pos.x\r\n                            this.previewSphere.position.y = pos.y\r\n                            this.previewSphere.position.z = pos.z\r\n                            this.previewSphere.data = {\r\n                                b: pos.b,\r\n                                r: pos.r,\r\n                                c: pos.c\r\n                            }\r\n                            this.previewSphere.material.opacity = 0.5\r\n                        }\r\n                        // === ?\r\n                        // else {\r\n                        //     this.previewSphere.material.opacity = 0\r\n                        // }\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n\r\n            this.clearHighlightedBoxes()\r\n            this.previewSphere.material.opacity = 0\r\n\r\n            if (this.hoveredObject) {\r\n                if (this.hoveredObject.material) {\r\n                    this.hoveredObject.material.emissive.setHex(this.colours.LIGHTGREY)\r\n                    this.hoveredObject.material.opacity = this.OPACITY_OFF\r\n                    this.hoveredObject.data.isClicked = false\r\n                } else if (this.hoveredObject.parent) {\r\n                    this.hoveredObject.parent.material.emissive.setHex(this.colours.LIGHTGREY)\r\n                    this.hoveredObject.parent.material.opacity = this.OPACITY_OFF\r\n                    this.hoveredObject.parent.data.isClicked = false\r\n                }\r\n\r\n            }\r\n            this.hoveredObject = null\r\n        }\r\n    }\r\n\r\n    toggleExploded () {\r\n        this.explodedMult = this.explodedMult==1 ? 2 : 1\r\n        this.previewSphere.material.opacity = 0\r\n        this.isLerpingBoxes = true\r\n    }\r\n\r\n    addPoint (board, row, col, player, nextPlayer) {\r\n        this.addSphere(board, row, col, this.playerColours[player].toUpperCase())\r\n        this.previewSphere.material.opacity = 0\r\n        this.setPreviewColour(nextPlayer)\r\n    }\r\n\r\n    setPreviewColour (playerIndex) {\r\n        const previewColour = this.colours[this.playerColours[playerIndex].toUpperCase()]\r\n        this.previewSphere.material.color.setHex(previewColour)\r\n        this.previewSphere.material.emissive.setHex(previewColour)\r\n    }\r\n\r\n    render (gameState) {\r\n        this.resetBoard()\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    if (gameState[b][r][c]) {\r\n                        this.addPoint(b, r, c, gameState[b][r][c])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    resetBoard () {\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    if (this.spheres[b][r][c]) {\r\n                        this.scene.remove(this.spheres[b][r][c])\r\n                        this.spheres[b][r][c] = undefined\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    rotate () {\r\n        this.camera.position.x = Math.sin(this.rotation*Math.PI/180) * (this.BOX_WIDTH * 1.5) * this.span * 2\r\n        this.camera.position.z = Math.cos(this.rotation*Math.PI/180) * (this.BOX_WIDTH * 1.5) * this.span * 2\r\n    }\r\n\r\n}\r\n\r\ntypeof window!=\"undefined\" && (window.exports = window.exports || {})\r\n\"use strict\"\r\n\r\nclass GamePlayer {// eslint-disable-line\r\n\r\n    constructor (type, playerIndex, game) {\r\n\r\n        console.log(`new ${type} player: ${playerIndex}`)\r\n\r\n        this.type = type\r\n        this.game = game // Two way binding\r\n        this.playerIndex = playerIndex\r\n    }\r\n\r\n    clearLastState () {\r\n        for (let b=0; b<this.game.span; b++) {\r\n            for (let r=0; r<this.game.span; r++) {\r\n                for (let c=0; c<this.game.span; c++) {\r\n                    this.lastState[b][r][c] = \" \"\r\n                }\r\n            }\r\n        }\r\n        this.lastMove = undefined\r\n    }\r\n\r\n    pickMove (gameState) {\r\n\r\n        if (this.type != \"AI\") return\r\n\r\n        fetch(\"./getAIMove\", {\r\n            method: \"post\",\r\n            body: JSON.stringify({gameState})\r\n        })\r\n        .then(r => r.json())\r\n        .then(({move}) => {\r\n            const [b, r, c] = move\r\n            this.game.makeMove(this.playerIndex, b, r, c)\r\n        })\r\n    }\r\n\r\n    reward (value, gameState) {\r\n\r\n        if (this.type != \"AI\") return\r\n\r\n        fetch(\"./rewardAI\", {\r\n            method: \"post\",\r\n            body: JSON.stringify({value, gameState})\r\n        })\r\n    }\r\n\r\n}\r\n\r\ntypeof window!=\"undefined\" && (window.exports = window.exports || {})\r\ntypeof window!=\"undefined\" && (window.GamePlayer = GamePlayer)\r\nexports.GamePlayer = GamePlayer\r\n\"use strict\"\r\n\r\nclass GameLogic {// eslint-disable-line\r\n\r\n    constructor ({gameState, gameBoard, gravityEnabled=true, span=3, players=2, isTraining, isMultiplayer, aiOpponent, isVR}={}) {\r\n\r\n        this.players = []\r\n        this.gravityEnabled = gravityEnabled\r\n        this.span = parseInt(span)\r\n        this.numPlayers = parseInt(players)\r\n        this.isTraining = isTraining // AI\r\n        this.aiOpponent = aiOpponent // AI\r\n        this.isMultiplayer = isMultiplayer // TODO, will be used to disallow moves until a move is made via WebSocket\r\n\r\n        this.gameState = gameState || this.resetGame() // Allow accepting an existing game state to allow loading existing match\r\n        this.gravity = {\r\n            axis: 0, // 0 for up/down, 1 for left/right, 2 for  forward/backward\r\n            modifier: -1 // -1 for normal, 1 for reverse\r\n        }\r\n        this.directions = {\r\n            up: 0,\r\n            down: 0,\r\n            left: 1,\r\n            right: 1,\r\n            forward: 2,\r\n            backward: 2\r\n        }\r\n        this.modifiers = {\r\n            up: 1,\r\n            down: -1,\r\n            left: -1,\r\n            right: 1,\r\n            forward: -1,\r\n            backward: 1\r\n        }\r\n\r\n        // Randomize who starts\r\n        this.playerIndex = Math.floor(Math.random()*players)\r\n        this.board = new gameBoard(this, isVR)\r\n\r\n        // Set the first player to either AI or human (aka the actual player)\r\n        if (this.aiOpponent) {\r\n            this.players.push(new GamePlayer(\"AI\", 0, this))\r\n        } else {\r\n            this.players.push(new GamePlayer(\"local human\", 0))\r\n        }\r\n\r\n        // Set the rest to whatever was configured\r\n        for (let p=1; p<players; p++) {\r\n\r\n            // TODO, disallow more than 1 other player when playing against AI - model needed would be too big\r\n            if (this.isTraining) {\r\n                this.players.push(new GamePlayer(\"AI\", p, this))\r\n            } else if (isMultiplayer) {\r\n                this.players.push(new GamePlayer(\"remote human\", p))\r\n            } else {\r\n                this.players.push(new GamePlayer(\"local human\", p))\r\n            }\r\n        }\r\n\r\n        // playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        this.players[this.playerIndex].pickMove(this.gameState)\r\n    }\r\n\r\n    // Create the board brand new\r\n    resetGame () {\r\n\r\n        const gameState = []\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n\r\n            const boardGameState = []\r\n\r\n            for (let r=0; r<this.span; r++) {\r\n\r\n                const rowGameState = []\r\n\r\n                for (let c=0; c<this.span; c++) {\r\n                    rowGameState.push(\" \")\r\n                }\r\n\r\n                boardGameState.push(rowGameState)\r\n            }\r\n            gameState.push(boardGameState)\r\n        }\r\n\r\n        if (this.board) {\r\n            this.board.resetBoard()\r\n            // playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        }\r\n\r\n        // winsDisplay.style.display = \"none\"\r\n        this.gameState = gameState\r\n\r\n        // Clear the AI players' lastState\r\n        for (let p=0; p<this.players.length; p++) {\r\n            if (this.players[p].type == \"AI\") {\r\n                this.players[p].clearLastState()\r\n            }\r\n        }\r\n\r\n        return gameState\r\n    }\r\n\r\n    makeMove (p, b, r, c) {\r\n\r\n        if (p != this.playerIndex && !this.isTraining) {\r\n            console.log(\"NOT your turn!\")\r\n            return\r\n        }\r\n\r\n        // Illegal move\r\n        if (this.gameState[b][r][c] !== \" \") {\r\n            console.log(\"Illegal move\")\r\n\r\n            // Slap its hands, if it was an AI player\r\n            this.players[p].reward(-99, this.gameState)\r\n\r\n            // Stop the game if it's an AI, to avoid looping to stack overflow\r\n            if (this.players[p].type==\"AI\") {\r\n                this.resetGame()\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        [b, r, c] = this.applyGravityToMove(b, r, c)\r\n\r\n        this.gameState[b][r][c] = p\r\n        this.board.addPoint(b, r, c, p, (this.playerIndex+1) % this.players.length)\r\n\r\n        // Player wins\r\n        if (this.isWinningMove(b, r, c, p)) {\r\n            this.players[p].reward(1, this.gameState)\r\n            this.players.forEach((player, pi) => pi!=p && player.reward(-1, this.gameState))\r\n            // winsDisplay.style.display = \"inline-block\"\r\n            return\r\n        }\r\n\r\n        // Tied game\r\n        if (this.isFull()) {\r\n            console.log(\"Tied game\")\r\n            this.players.forEach(player => player.reward(0.25, this.gameState))\r\n            return\r\n        }\r\n\r\n\r\n        // TODO, this might be useless - TEST\r\n        this.players.forEach((player, pi) => pi!=p && player.reward(0, this.gameState))\r\n\r\n        this.playerIndex = ++this.playerIndex % this.players.length\r\n\r\n        // TODO, do this outside of this class?\r\n        // playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        // winsDisplay.style.display = \"none\"\r\n\r\n        this.players[this.playerIndex].pickMove(this.gameState)\r\n        if (ws){\r\n            sendState(this.gameState)\r\n        }\r\n    }\r\n\r\n    isWinningMove (boardIndex, tileY, tileX, player) {\r\n\r\n        let match = false\r\n        const max = this.gameState[0].length-1\r\n        const mid = Math.floor(max/2)\r\n\r\n        // Check current board\r\n        match = this.gameState[boardIndex][tileY].every(col => col===player) // Horizontal\r\n            ||  this.gameState[boardIndex].every(row => row[tileX]===player) // Vertical\r\n            ||  (tileX + tileY)%2 === 0 && ( // Is it on a diagonal?\r\n                // Diagonal top-left -> bottom-right\r\n                this.gameState[boardIndex].every((row, ri) => row[ri]===player) ||\r\n                // Diagonal bottom-left -> top-right\r\n                this.gameState[boardIndex].every((row, ri) => row[max-ri]===player)\r\n            )\r\n\r\n        // Check other boards\r\n        // Up/Down\r\n        match = match || this.gameState.every(board => board[tileY][tileX] === player)\r\n\r\n        if (match) return true\r\n\r\n        // 3D diagonals\r\n        // Not in location unreachable by a diagonal\r\n        if (boardIndex !== mid || boardIndex===mid && (tileY===mid || tileX===mid)) {\r\n\r\n            match = match\r\n                ||  this.gameState.every((board, bi) => board[max-bi][tileX]===player) // Near-bottom -> Far-top\r\n                ||  this.gameState.every((board, bi) => board[bi][tileX]===player) // Far-bottom -> Near-top\r\n                ||  this.gameState.every((board, bi) => board[tileY][max-bi]===player) // Bottom-left -> Top-right\r\n                ||  this.gameState.every((board, bi) => board[tileY][bi]===player) // Bottom-right -> Top-left\r\n\r\n\r\n            if (match) return true\r\n\r\n            // Check cross diagonal (going from corners through the middle)\r\n            if (this.gameState[mid][mid][mid]===player) {\r\n\r\n                match = match\r\n                    ||  this.gameState.every((board, bi) => board[bi][bi]===player) // Far-bottom-left -> Near-top-right\r\n                    ||  this.gameState.every((board, bi) => board[max-bi][bi]===player) // Near-bottom-left -> Far-top-right\r\n                    ||  this.gameState.every((board, bi) => board[max-bi][max-bi]===player) // Near-bottom-right -> Far-top-left\r\n                    ||  this.gameState.every((board, bi) => board[bi][max-bi]===player) // Far-bottom-right -> Near-top-left\r\n            }\r\n        }\r\n\r\n        return match\r\n    }\r\n\r\n    isFull () {\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    if (this.gameState[b][r][c] === \" \") {\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    applyGravityToMove (board, row, col) {\r\n\r\n        if (!this.gravityEnabled) return [board, row, col]\r\n\r\n        let counts\r\n\r\n        switch (this.gravity.axis) {\r\n            // Up/Down\r\n            case 0:\r\n                counts = this.gravity.modifier==-1 ? board : this.span-1-board\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board + this.gravity.modifier][row][col]===\" \") {\r\n                        board += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n            // Left/Right\r\n            case 1:\r\n\r\n                counts = this.gravity.modifier==-1 ? col : this.span-1-col\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board][row][col + this.gravity.modifier]===\" \") {\r\n                        col += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n            // Forward/Backward\r\n            case 2:\r\n\r\n                counts = this.gravity.modifier==-1 ? row : this.span-1-row\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board][row + this.gravity.modifier][col]===\" \") {\r\n                        row += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n        }\r\n\r\n        return [board, row, col]\r\n    }\r\n\r\n    /*\r\n        TODO, there's a bug where some points don't move as needed. I think this may be due\r\n        to the order in which the tiles are moved\r\n    */\r\n    shiftGravity (direction) {\r\n\r\n        this.gravity.axis = this.directions[direction]\r\n        this.gravity.modifier = this.modifiers[direction]\r\n\r\n        const max = Math.abs((this.gravity.modifier==-1 ? this.span-1 : 0)-(this.span-1))\r\n\r\n        switch (this.gravity.axis) {\r\n\r\n            // Up/Down (boards)\r\n            case 0:\r\n                // For every row\r\n                for (let r=0; r<this.span; r++) {\r\n                    // For every column\r\n                    for (let c=0; c<this.span; c++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyBoard:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[Math.abs(max-i)][r][c]===\" \") {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[Math.abs(max-i2)][r][c] !== \" \") {\r\n\r\n                                        this.board.moveSphere({b: Math.abs(max-i2), r, c}, {b: Math.abs(max-i), r, c}, \"y\", Math.abs(max-i))\r\n\r\n                                        this.gameState[Math.abs(max-i)][r][c] = this.gameState[Math.abs(max-i2)][r][c]\r\n                                        this.gameState[Math.abs(max-i2)][r][c] = \" \"\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyBoard\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break\r\n\r\n            // Left/Right (columns)\r\n            case 1:\r\n\r\n                // For every board\r\n                for (let b=0; b<this.span; b++) {\r\n                    // For every row\r\n                    for (let r=0; r<this.span; r++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyColumn:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[b][r][Math.abs(max-i)]===\" \") {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[b][r][Math.abs(max-i2)]!==\" \") {\r\n\r\n                                        this.board.moveSphere({b, r, c: Math.abs(max-i2)}, {b, r, c: Math.abs(max-i)}, \"x\", Math.abs(max-i))\r\n\r\n                                        this.gameState[b][r][Math.abs(max-i)] = this.gameState[b][r][Math.abs(max-i2)]\r\n                                        this.gameState[b][r][Math.abs(max-i2)] = \" \"\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyColumn\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n                break\r\n\r\n            // Forward/Backward (rows)\r\n            case 2:\r\n\r\n                // For every board\r\n                for (let b=0; b<this.span; b++) {\r\n                    // For every row\r\n                    for (let r=0; r<this.span; r++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyColumn:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[b][Math.abs(max-i)][r]===\" \") {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[b][Math.abs(max-i2)][r]!==\" \") {\r\n\r\n                                        this.board.moveSphere({b, r: Math.abs(max-i2), c: r}, {b, r: Math.abs(max-i), c: r}, \"z\", Math.abs(max-i))\r\n\r\n                                        this.gameState[b][Math.abs(max-i)][r] = this.gameState[b][Math.abs(max-i2)][r]\r\n                                        this.gameState[b][Math.abs(max-i2)][r] = \" \"\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyColumn\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                break\r\n        }\r\n\r\n        this.checkAll()\r\n\r\n        this.board.clearHighlightedBoxes()\r\n        this.board.setPreviewColour(this.playerIndex)\r\n    }\r\n\r\n\r\n    // Check the game status for all placed items (when the gravity is changed, and every item is potentially re-arranged)\r\n    // TODO, optimize this, as this is insanely inefficient\r\n    checkAll () {\r\n        let match = false\r\n        let player\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n\r\n                    if (this.gameState[b][r][c] !== \" \") {\r\n                        match = match || this.isWinningMove(b, r, c, this.gameState[b][r][c])\r\n                        if (match) {\r\n                            player = this.gameState[b][r][c]\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        return player\r\n\r\n\r\n        // if (match) {\r\n        //     playerNum.style.color = this.board.playerColours[player]\r\n        //     winsDisplay.style.display = \"inline-block\"\r\n        // } else {\r\n        //     this.playerIndex = ++this.playerIndex % this.players.length\r\n        //     winsDisplay.style.display = \"none\"\r\n        //     playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        // }\r\n    }\r\n\r\n}\r\n\r\ntypeof window!=\"undefined\" && (window.exports = window.exports || {})\r\ntypeof window!=\"undefined\" && (window.GameLogic = GameLogic)\r\nexports.GameLogic = GameLogic\n//# sourceMappingURL=game.concat.js.map"]}