{"version":3,"sources":["game.concat.js"],"names":["test","GameBoard","[object Object]","span","gameState","makeMove","gravity","gravityEnabled","this","playerColours","rotationValue","tiltValue","perspectiveX","perspectiveY","boardElement","document","createElement","id","style","marginTop","perspectiveOrigin","b","board","tileSize","className","gridTemplateColumns","repeat","gridTemplateRows","transform","flatArrowsContainer","r","c","tile","addEventListener","styleHoverPreview","appendChild","row","col","querySelectorAll","forEach","classList","toggle","axis","children","Array","from","GameLogic","players","isTraining","isMultiplayer","parseInt","numPlayers","resetBoard","modifier","push","GamePlayer","p","boardGameState","rowGameState","console","log","type","playerIndex"],"mappings":"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","file":"game.min.js","sourcesContent":["\"use strict\"\r\n\r\nconst test = \"stuff\"\r\n\r\nclass GameBoard {\r\n\r\n    constructor ({span, gameState, makeMove, gravity, gravityEnabled}) {\r\n\r\n        this.playerColours = [\"blue\", \"red\", \"green\", \"purple\", \"yellow\", \"brown\", \"black\", \"cyan\", \"pink\", \"darkgrey\"]\r\n        this.rotationValue = -45\r\n        this.tiltValue = span==3 ? 20 : span==7 ? 40 : 30\r\n        this.span = span\r\n        this.gravity = gravity\r\n        this.gravityEnabled = gravityEnabled\r\n        this.perspectiveX = 150\r\n        this.perspectiveY = 1000\r\n        this.boardElement = document.createElement(\"div\")\r\n        this.boardElement.id = \"boardsContainer\"\r\n\r\n        if (this.span!=3) {\r\n            this.boardElement.style.marginTop = \"0\"\r\n\r\n            if (this.span==7) {\r\n                this.boardElement.style.marginTop = \"100px\"\r\n                this.perspectiveY = 800\r\n            } else {\r\n                this.perspectiveY = 1000\r\n            }\r\n        }\r\n\r\n        this.boardElement.style.perspectiveOrigin = `${this.perspectiveX}px ${this.perspectiveY}px`\r\n\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n\r\n            const board = document.createElement(\"div\")\r\n            const tileSize = 300/this.span\r\n\r\n            board.className = \"board\"\r\n            board.style.gridTemplateColumns = `${tileSize}px `.repeat(this.span)\r\n            board.style.gridTemplateRows = `${tileSize}px `.repeat(this.span)\r\n            board.style.transform = `rotateX(${this.tiltValue}deg) rotateZ(${this.rotationValue}deg)`\r\n            board.style.marginTop = this.span==7 ? \"-70%\" : \"-50%\"\r\n\r\n            // TODO, move this out of here\r\n            flatArrowsContainer.style.transform = `rotateX(${this.tiltValue+30}deg) rotateZ(${this.rotationValue-45}deg)`\r\n\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    const tile = document.createElement(\"div\")\r\n\r\n                    tile.addEventListener(\"click\", () => makeMove(b, c, r))\r\n                    tile.addEventListener(\"mouseover\", () => this.styleHoverPreview(b, r, c))\r\n\r\n                    board.appendChild(tile)\r\n                }\r\n            }\r\n\r\n            this.boardElement.appendChild(board)\r\n        }\r\n\r\n    }\r\n\r\n    renderBoard () {\r\n\r\n    }\r\n\r\n    getAvailableMoves () {\r\n\r\n    }\r\n\r\n    renderPoints () {\r\n\r\n    }\r\n\r\n    // Highlight the column/row/vertical-column that will be affected by a move\r\n    styleHoverPreview (board, row, col) {\r\n\r\n        if (!this.gravityEnabled) return\r\n\r\n        // Clear last highlighted tiles\r\n        const existingHovered = this.boardElement.querySelectorAll(\".hoveredTile\")\r\n        existingHovered.forEach(tile => tile.classList.toggle(\"hoveredTile\"))\r\n\r\n        switch (this.gravity.axis) {\r\n            // Up/Down\r\n            case 0:\r\n                for (let b=0; b<this.span; b++) {\r\n                    this.boardElement.children[b].children[row*this.span + col].classList.toggle(\"hoveredTile\")\r\n                }\r\n                break\r\n            // Left/Right\r\n            case 1:\r\n                for (let c=0; c<this.span; c++) {\r\n                    this.boardElement.children[board].children[row*this.span + c].classList.toggle(\"hoveredTile\")\r\n                }\r\n                break\r\n            // Forward/Backward\r\n            case 2:\r\n                for (let r=0; r<this.span; r++) {\r\n                    this.boardElement.children[board].children[r*this.span + col].classList.toggle(\"hoveredTile\")\r\n                }\r\n                break\r\n        }\r\n\r\n    }\r\n\r\n\r\n    rotate () {\r\n        Array.from(this.boardElement.children).forEach(board => {\r\n            board.style.transform = `rotateX(${this.tiltValue}deg) rotateZ(${this.rotationValue}deg)`\r\n            flatArrowsContainer.style.transform = `rotateX(${this.tiltValue+30}deg) rotateZ(${this.rotationValue-45}deg)`\r\n        })\r\n    }\r\n\r\n}\r\n\"use strict\"\r\n\r\nclass GameLogic {\r\n\r\n    constructor ({gameState, gravityEnabled=true, span=3, players=2, isTraining=false, isMultiplayer=false}={}) {\r\n\r\n        this.players = []\r\n        this.gravityEnabled = gravityEnabled\r\n        this.span = parseInt(span)\r\n        this.numPlayers = parseInt(players)\r\n        this.isTraining = isTraining // AI\r\n        this.isMultiplayer = isMultiplayer // TODO, will be used to disallow moves until a move is made via WebSocket\r\n\r\n        this.gameState = gameState || this.resetBoard() // Allow accepting an existing game state to allow loading existing match\r\n        this.gravity = {\r\n            axis: 0, // 0 for up/down, 1 for left/right, 2 for  forward/backward\r\n            modifier: -1 // -1 for normal, 1 for reverse\r\n        }\r\n\r\n        this.board = new GameBoard(this)\r\n\r\n\r\n        // Set the first player to either AI or human (aka the actual player)\r\n        if (this.isTraining) {\r\n            this.players.push(new GamePlayer(\"AI\", 0))\r\n        } else {\r\n            this.players.push(new GamePlayer(\"local human\", 0))\r\n        }\r\n\r\n        // Set the rest to whatever was configured\r\n        for (let p=1; p<players; p++) {\r\n\r\n            // TODO, disallow more than 1 other player when playing against AI - model needed would be too big\r\n            if (this.isTraining) {\r\n                this.players.push(new GamePlayer(\"AI\", p))\r\n            } else if (isMultiplayer) {\r\n                this.players.push(new GamePlayer(\"remote human\", p))\r\n            } else {\r\n                this.players.push(new GamePlayer(\"local human\", p))\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    // Create the board brand new\r\n    resetBoard () {\r\n\r\n        const gameState = []\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n\r\n            const boardGameState = []\r\n\r\n            for (let r=0; r<this.span; r++) {\r\n\r\n                const rowGameState = []\r\n\r\n                for (let c=0; c<this.span; c++) {\r\n                    rowGameState.push(null)\r\n                }\r\n\r\n                boardGameState.push(rowGameState)\r\n            }\r\n            gameState.push(boardGameState)\r\n        }\r\n        return gameState\r\n    }\r\n\r\n    initBoards () {\r\n\r\n    }\r\n\r\n    checkGameStatus () {\r\n\r\n    }\r\n\r\n    applyGravityToMove () {\r\n\r\n    }\r\n\r\n    shiftGravity () {\r\n\r\n    }\r\n\r\n    checkAll () {\r\n\r\n    }\r\n\r\n    makeMove (b, r, c) {\r\n        console.log(\"makeMove\", b, r, c)\r\n    }\r\n\r\n    insertMoveAt () {\r\n\r\n    }\r\n\r\n}\r\n\"use strict\"\r\n\r\nclass GamePlayer {\r\n\r\n    constructor (type, playerIndex) {\r\n\r\n        console.log(`new ${type} player: ${playerIndex}`)\r\n\r\n        this.type = type\r\n    }\r\n\r\n    getQ () {\r\n\r\n    }\r\n\r\n    pickMove () {\r\n\r\n        if (this.type != \"AI\") return\r\n\r\n    }\r\n\r\n    reward () {\r\n\r\n        if (this.type != \"AI\") return\r\n\r\n    }\r\n\r\n}\n//# sourceMappingURL=game.concat.js.map"]}