{"version":3,"sources":["game.concat.js"],"names":["test","GameBoard","[object Object]","game","span","gameState","gravity","gravityEnabled","this","playerColours","rotationValue","tiltValue","perspectiveX","perspectiveY","boardElement","document","createElement","id","style","marginTop","perspectiveOrigin","b","board","tileSize","className","gridTemplateColumns","repeat","gridTemplateRows","transform","flatArrowsContainer","r","c","tile","addEventListener","makeMove","playerIndex","styleHoverPreview","appendChild","elem","children","innerHTML","color","row","col","player","querySelectorAll","forEach","classList","toggle","axis","Array","from","GameLogic","players","isTraining","isMultiplayer","parseInt","numPlayers","resetGame","modifier","directions","up","down","left","right","forward","backward","modifiers","playerNum","push","GamePlayer","p","Math","floor","random","boardGameState","rowGameState","resetBoard","winsDisplay","display","console","log","reward","pickMove","applyGravityToMove","addPoint","winningMove","pi","isFull","length","boardIndex","tileY","tileX","match","max","mid","every","ri","bi","counts","i","direction","abs","i2","everyBoard","everyColumn","render","checkAll","type"],"mappings":"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","file":"game.min.js","sourcesContent":["\"use strict\"\r\n\r\nconst test = \"stuff\"\r\n\r\nclass GameBoard {\r\n\r\n    constructor (game) {\r\n\r\n        const {span, gameState, gravity, gravityEnabled} = game\r\n\r\n        this.playerColours = [\"blue\", \"red\", \"green\", \"purple\", \"yellow\", \"brown\", \"black\", \"cyan\", \"pink\", \"darkgrey\"]\r\n        this.rotationValue = -45\r\n        this.tiltValue = span==3 ? 20 : span==7 ? 40 : 30\r\n        this.span = span\r\n        this.gravity = gravity\r\n        this.gravityEnabled = gravityEnabled\r\n        this.perspectiveX = 150\r\n        this.perspectiveY = 1000\r\n        this.boardElement = document.createElement(\"div\")\r\n        this.boardElement.id = \"boardsContainer\"\r\n\r\n        if (this.span!=3) {\r\n            this.boardElement.style.marginTop = \"0\"\r\n\r\n            if (this.span==7) {\r\n                this.boardElement.style.marginTop = \"100px\"\r\n                this.perspectiveY = 800\r\n            } else {\r\n                this.perspectiveY = 1000\r\n            }\r\n        }\r\n\r\n        this.boardElement.style.perspectiveOrigin = `${this.perspectiveX}px ${this.perspectiveY}px`\r\n\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n\r\n            const board = document.createElement(\"div\")\r\n            const tileSize = 300/this.span\r\n\r\n            board.className = \"board\"\r\n            board.style.gridTemplateColumns = `${tileSize}px `.repeat(this.span)\r\n            board.style.gridTemplateRows = `${tileSize}px `.repeat(this.span)\r\n            board.style.transform = `rotateX(${this.tiltValue}deg) rotateZ(${this.rotationValue}deg)`\r\n            board.style.marginTop = this.span==7 ? \"-70%\" : \"-50%\"\r\n\r\n            // TODO, move this out of here\r\n            flatArrowsContainer.style.transform = `rotateX(${this.tiltValue+30}deg) rotateZ(${this.rotationValue-45}deg)`\r\n\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    const tile = document.createElement(\"div\")\r\n\r\n                    tile.addEventListener(\"click\", () => game.makeMove(game.playerIndex, b, r, c))\r\n                    tile.addEventListener(\"mouseover\", () => this.styleHoverPreview(b, r, c))\r\n\r\n                    board.appendChild(tile)\r\n                }\r\n            }\r\n\r\n            this.boardElement.appendChild(board)\r\n        }\r\n\r\n    }\r\n\r\n    render (gameState) {\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n\r\n                    const elem = this.boardElement.children[b].children[r*this.span + c]\r\n\r\n                    if (gameState[b][r][c] == null) {\r\n                        elem.innerHTML = \"\"\r\n                    } else {\r\n                        elem.innerHTML = \"•\"\r\n                        elem.style.color = this.playerColours[gameState[b][r][c]]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addPoint (board, row, col, player) {\r\n        this.boardElement.children[board].children[row*this.span + col].innerHTML = \"•\"\r\n        this.boardElement.children[board].children[row*this.span + col].style.color = this.playerColours[player]\r\n    }\r\n\r\n    renderPoints () {\r\n\r\n    }\r\n\r\n    resetBoard () {\r\n        for (let b=0; b<this.span; b++) {\r\n            this.boardElement.children[board].children[r*this.span + c].innerHTML = \"\"\r\n        }\r\n    }\r\n\r\n    // Highlight the column/row/vertical-column that will be affected by a move\r\n    styleHoverPreview (board, row, col) {\r\n\r\n        if (!this.gravityEnabled) {\r\n            return\r\n        }\r\n\r\n        // Clear last highlighted tiles\r\n        const existingHovered = this.boardElement.querySelectorAll(\".hoveredTile\")\r\n        existingHovered.forEach(tile => tile.classList.toggle(\"hoveredTile\"))\r\n\r\n        switch (this.gravity.axis) {\r\n            // Up/Down\r\n            case 0:\r\n                for (let b=0; b<this.span; b++) {\r\n                    this.boardElement.children[b].children[row*this.span + col].classList.toggle(\"hoveredTile\")\r\n                }\r\n                break\r\n            // Left/Right\r\n            case 1:\r\n                for (let c=0; c<this.span; c++) {\r\n                    this.boardElement.children[board].children[row*this.span + c].classList.toggle(\"hoveredTile\")\r\n                }\r\n                break\r\n            // Forward/Backward\r\n            case 2:\r\n                for (let r=0; r<this.span; r++) {\r\n                    this.boardElement.children[board].children[r*this.span + col].classList.toggle(\"hoveredTile\")\r\n                }\r\n                break\r\n        }\r\n\r\n    }\r\n\r\n\r\n    rotate () {\r\n        Array.from(this.boardElement.children).forEach(board => {\r\n            board.style.transform = `rotateX(${this.tiltValue}deg) rotateZ(${this.rotationValue}deg)`\r\n            flatArrowsContainer.style.transform = `rotateX(${this.tiltValue+30}deg) rotateZ(${this.rotationValue-45}deg)`\r\n        })\r\n    }\r\n\r\n}\r\n\"use strict\"\r\n\r\nclass GameLogic {\r\n\r\n    constructor ({gameState, gravityEnabled=true, span=3, players=2, isTraining=false, isMultiplayer=false}={}) {\r\n\r\n        this.players = []\r\n        this.gravityEnabled = gravityEnabled\r\n        this.span = parseInt(span)\r\n        this.numPlayers = parseInt(players)\r\n        this.isTraining = isTraining // AI\r\n        this.isMultiplayer = isMultiplayer // TODO, will be used to disallow moves until a move is made via WebSocket\r\n\r\n        this.gameState = gameState || this.resetGame() // Allow accepting an existing game state to allow loading existing match\r\n        this.gravity = {\r\n            axis: 0, // 0 for up/down, 1 for left/right, 2 for  forward/backward\r\n            modifier: -1 // -1 for normal, 1 for reverse\r\n        }\r\n        this.directions = {\r\n            up: 0,\r\n            down: 0,\r\n            left: 1,\r\n            right: 1,\r\n            forward: 2,\r\n            backward: 2\r\n        }\r\n        this.modifiers = {\r\n            up: 1,\r\n            down: -1,\r\n            left: -1,\r\n            right: 1,\r\n            forward: -1,\r\n            backward: 1\r\n        }\r\n\r\n        this.board = new GameBoard(this)\r\n        playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n\r\n\r\n        // Set the first player to either AI or human (aka the actual player)\r\n        if (this.isTraining) {\r\n            this.players.push(new GamePlayer(\"AI\", 0))\r\n        } else {\r\n            this.players.push(new GamePlayer(\"local human\", 0))\r\n        }\r\n\r\n        // Set the rest to whatever was configured\r\n        for (let p=1; p<players; p++) {\r\n\r\n            // TODO, disallow more than 1 other player when playing against AI - model needed would be too big\r\n            if (this.isTraining) {\r\n                this.players.push(new GamePlayer(\"AI\", p))\r\n            } else if (isMultiplayer) {\r\n                this.players.push(new GamePlayer(\"remote human\", p))\r\n            } else {\r\n                this.players.push(new GamePlayer(\"local human\", p))\r\n            }\r\n        }\r\n\r\n        // Randomize who starts\r\n        this.playerIndex = Math.floor(Math.random()*players)\r\n\r\n    }\r\n\r\n    // Create the board brand new\r\n    resetGame () {\r\n\r\n        const gameState = []\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n\r\n            const boardGameState = []\r\n\r\n            for (let r=0; r<this.span; r++) {\r\n\r\n                const rowGameState = []\r\n\r\n                for (let c=0; c<this.span; c++) {\r\n                    rowGameState.push(null)\r\n                }\r\n\r\n                boardGameState.push(rowGameState)\r\n            }\r\n            gameState.push(boardGameState)\r\n        }\r\n\r\n        if (this.board) {\r\n            this.board.resetBoard()\r\n            playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        }\r\n\r\n        winsDisplay.style.display = \"none\"\r\n\r\n        return gameState\r\n    }\r\n\r\n    makeMove (p, b, r, c) {\r\n\r\n        console.log(\"makeMove\", p, b, r, c)\r\n\r\n        if (p!=this.playerIndex) return\r\n\r\n        // Illegal move\r\n        if (this.gameState[b][r][c] != null) {\r\n            // Slap its hands, if it was an AI player\r\n            this.players[p].reward(-100, this.gameState)\r\n            this.players[p].pickMove(this.gameState)\r\n            return\r\n        }\r\n\r\n        // TODO, apply gravity to move\r\n        [b, r, c] = this.applyGravityToMove(b, r, c)\r\n\r\n        this.gameState[b][r][c] = p\r\n        this.board.addPoint(b, r, c, p)\r\n\r\n        // Player wins\r\n        if (this.winningMove(b, r, c, p)) {\r\n\r\n            this.players[p].reward(1, this.gameState)\r\n            this.players.forEach((player, pi) => pi!=p && player.reward(-1, this.board))\r\n            winsDisplay.style.display = \"inline-block\"\r\n\r\n            if (this.isTraining) {\r\n                this.resetGame()\r\n            }\r\n            return\r\n\r\n        }\r\n\r\n        // Tied game\r\n        if (this.isFull()) {\r\n            this.players.forEach((player, pi) => player.reward(0.25, this.board))\r\n\r\n            if (this.isTraining) {\r\n                this.resetGame()\r\n            }\r\n            return\r\n        }\r\n\r\n\r\n        // TODO, this might be useless - TEST\r\n        this.players.forEach((player, pi) => pi!=p && player.reward(0, this.board))\r\n\r\n        this.playerIndex = ++this.playerIndex % this.players.length\r\n\r\n        // TODO, do this outside of this class?\r\n        playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        winsDisplay.style.display = \"none\"\r\n\r\n        this.players[this.playerIndex].pickMove(this.board)\r\n    }\r\n\r\n    winningMove (boardIndex, tileY, tileX, player) {\r\n\r\n        let match = false\r\n        const max = this.gameState[0].length-1\r\n        const mid = Math.floor(max/2)\r\n\r\n        // Check current board\r\n        match = this.gameState[boardIndex][tileY].every(col => col==player) // Horizontal\r\n            ||  this.gameState[boardIndex].every(row => row[tileX]==player) // Vertical\r\n            ||  (tileX + tileY)%2 == 0 && ( // Is it on a diagonal?\r\n                // Diagonal top-left -> bottom-right\r\n                this.gameState[boardIndex].every((row, ri) => row[ri]==player) ||\r\n                // Diagonal bottom-left -> top-right\r\n                this.gameState[boardIndex].every((row, ri) => row[max-ri]==player)\r\n            )\r\n\r\n        // Check other boards\r\n        // Up/Down\r\n        match = match || this.gameState.every(board => board[tileY][tileX] == player)\r\n\r\n        if (match) return true\r\n\r\n        // 3D diagonals\r\n        // Not in location unreachable by a diagonal\r\n        if (boardIndex != mid || boardIndex==mid && (tileY==mid || tileX==mid)) {\r\n\r\n            match = match\r\n                ||  this.gameState.every((board, bi) => board[max-bi][tileX]==player) // Near-bottom -> Far-top\r\n                ||  this.gameState.every((board, bi) => board[bi][tileX]==player) // Far-bottom -> Near-top\r\n                ||  this.gameState.every((board, bi) => board[tileY][max-bi]==player) // Bottom-left -> Top-right\r\n                ||  this.gameState.every((board, bi) => board[tileY][bi]==player) // Bottom-right -> Top-left\r\n\r\n            if (match) return true\r\n\r\n            // Check cross diagonal (going from corners through the middle)\r\n            if (this.gameState[mid][mid][mid]==player) {\r\n\r\n                match = match\r\n                    ||  this.gameState.every((board, bi) => board[bi][bi]==player) // Far-bottom-left -> Near-top-right\r\n                    ||  this.gameState.every((board, bi) => board[max-bi][bi]==player) // Near-bottom-left -> Far-top-right\r\n                    ||  this.gameState.every((board, bi) => board[max-bi][max-bi]==player) // Near-bottom-right -> Far-top-left\r\n                    ||  this.gameState.every((board, bi) => board[bi][max-bi]==player) // Far-bottom-right -> Near-top-left\r\n            }\r\n        }\r\n\r\n        return match\r\n    }\r\n\r\n    isFull () {\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    if (this.gameState[b][r][c] == null) {\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    getAvailableMoves () {\r\n\r\n    }\r\n\r\n    applyGravityToMove (board, row, col) {\r\n\r\n        if (!this.gravityEnabled) return [board, row, col]\r\n\r\n        let counts\r\n\r\n        switch (this.gravity.axis) {\r\n            // Up/Down\r\n            case 0:\r\n                counts = this.gravity.modifier==-1 ? board : this.span-1-board\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board + this.gravity.modifier][row][col]==null) {\r\n                        board += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n            // Left/Right\r\n            case 1:\r\n\r\n                counts = this.gravity.modifier==-1 ? col : this.span-1-col\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board][row][col + this.gravity.modifier]==null) {\r\n                        col += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n            // Forward/Backward\r\n            case 2:\r\n\r\n                counts = this.gravity.modifier==-1 ? row : this.span-1-row\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board][row + this.gravity.modifier][col]==null) {\r\n                        row += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n        }\r\n\r\n        return [board, row, col]\r\n    }\r\n\r\n    /*\r\n        TODO, there's a bug where some points don't move as needed. I think this may be due\r\n        to the order in which the tiles are moved\r\n    */\r\n    shiftGravity (direction) {\r\n\r\n        this.gravity.axis = this.directions[direction]\r\n        this.gravity.modifier = this.modifiers[direction]\r\n\r\n        const max = Math.abs((this.gravity.modifier==-1 ? this.span-1 : 0)-(this.span-1))\r\n\r\n        switch (this.gravity.axis) {\r\n\r\n            // Up/Down (boards)\r\n            case 0:\r\n                // For every row\r\n                for (let r=0; r<this.span; r++) {\r\n                    // For every column\r\n                    for (let c=0; c<this.span; c++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyBoard:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[Math.abs(max-i)][r][c]==null) {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[Math.abs(max-i2)][r][c] != null) {\r\n                                        this.gameState[Math.abs(max-i)][r][c] = this.gameState[Math.abs(max-i2)][r][c]\r\n                                        this.gameState[Math.abs(max-i2)][r][c] = null\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyBoard\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break\r\n\r\n            // Left/Right (columns)\r\n            case 1:\r\n\r\n                // For every board\r\n                for (let b=0; b<this.span; b++) {\r\n                    // For every row\r\n                    for (let r=0; r<this.span; r++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyColumn:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[b][r][Math.abs(max-i)]==null) {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[b][r][Math.abs(max-i2)]!=null) {\r\n                                        this.gameState[b][r][Math.abs(max-i)] = this.gameState[b][r][Math.abs(max-i2)]\r\n                                        this.gameState[b][r][Math.abs(max-i2)] = null\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyColumn\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n                break\r\n\r\n            // Forward/Backward (rows)\r\n            case 2:\r\n\r\n                // For every board\r\n                for (let b=0; b<this.span; b++) {\r\n                    // For every row\r\n                    for (let r=0; r<this.span; r++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyColumn:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[b][Math.abs(max-i)][r]==null) {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[b][Math.abs(max-i2)][r]!=null) {\r\n                                        this.gameState[b][Math.abs(max-i)][r] = this.gameState[b][Math.abs(max-i2)][r]\r\n                                        this.gameState[b][Math.abs(max-i2)][r] = null\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyColumn\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                break\r\n        }\r\n\r\n        this.board.render(this.gameState)\r\n        this.checkAll()\r\n    }\r\n\r\n    // Check the game status for all placed items (when the gravity is changed, and every item is potentially re-arranged)\r\n    // TODO, optimize this, as this is insanely inefficient\r\n    checkAll () {\r\n        let match = false\r\n        let player\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n\r\n                    if (this.gameState[b][r][c] != null) {\r\n                        match = match || this.winningMove(b, r, c, this.gameState[b][r][c])\r\n                        if (match) {\r\n                            player = this.gameState[b][r][c]\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (match) {\r\n            playerNum.style.color = this.board.playerColours[player]\r\n            winsDisplay.style.display = \"inline-block\"\r\n        } else {\r\n            this.playerIndex = ++this.playerIndex % this.players.length\r\n            winsDisplay.style.display = \"none\"\r\n            playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        }\r\n    }\r\n\r\n\r\n\r\n    insertMoveAt () {\r\n\r\n    }\r\n\r\n}\r\n\"use strict\"\r\n\r\nclass GamePlayer {\r\n\r\n    constructor (type, playerIndex) {\r\n\r\n        console.log(`new ${type} player: ${playerIndex}`)\r\n\r\n        this.type = type\r\n    }\r\n\r\n    getQ () {\r\n\r\n    }\r\n\r\n    pickMove () {\r\n\r\n        if (this.type != \"AI\") return\r\n\r\n    }\r\n\r\n    reward () {\r\n\r\n        if (this.type != \"AI\") return\r\n\r\n    }\r\n\r\n}\n//# sourceMappingURL=game.concat.js.map"]}