{"version":3,"sources":["game.concat.js"],"names":["GameBoard","[object Object]","game","span","this","playerColours","rotation","BOX_WIDTH","SPREAD","Math","floor","SPACING","SPHERE_RADIUS","SPHERE_V_COUNT","OPACITY_ON","OPACITY_OFF","explodedMult","isLerpingBoxes","colours","RED","BLUE","GREEN","PURPLE","YELLOW","ORANGE","BLACK","CYAN","PINK","LIGHTGREY","DARKGREY","WHITE","scene","THREE","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","raycaster","Raycaster","mouse","Vector2","renderer","WebGLRenderer","alpha","antialias","setPixelRatio","devicePixelRatio","setSize","domElement","id","boardElement","light","DirectionalLight","position","set","normalize","add","y","previewColour","playerIndex","toUpperCase","previewSphereGeometry","SphereGeometry","previewSphereMaterial","MeshLambertMaterial","color","transparent","opacity","emissive","setHex","previewSphere","Mesh","console","log","initBoards","renderLoop","rotate","addEventListener","event","x","clientX","clientY","highlightedBoxes","boxes","Array","map","spheres","b","r","c","addBox","geometry","BoxGeometry","material","box","z","data","origPos","colour","sphereGeometry","sphereMaterial","sphere","length","push","cube","start","end","axis","location","isLerping","newPos","requestAnimationFrame","abs","someSphereIsLerping","lookAt","updateMatrixWorld","render","setFromCamera","intersects","intersectObjects","children","hoveredObject","object","parent","clearHighlightedBoxes","gravityEnabled","gravity","highlightColumn","highlightRowY","highlightRowX","pos","getPreviewPosition","mouseIsDown","isClicked","setTimeout","gameState","makeMove","board","row","col","player","nextPlayer","addSphere","setPreviewColour","resetBoard","addPoint","remove","undefined","sin","PI","cos","exports","GameLogic","players","isTraining","isMultiplayer","aiOpponent","parseInt","numPlayers","resetGame","modifier","directions","up","down","left","right","forward","backward","modifiers","random","GamePlayer","p","playerNum","style","pickMove","boardGameState","rowGameState","winsDisplay","display","type","clearLastState","reward","applyGravityToMove","isWinningMove","forEach","pi","isFull","boardIndex","tileY","tileX","match","max","mid","every","ri","bi","counts","i","direction","i2","everyBoard","moveSphere","everyColumn","checkAll","lastState","lastMove","fetch","method","body","JSON","stringify","then","json","move","value"],"mappings":"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","file":"game.min.js","sourcesContent":["\"use strict\"\r\n\r\nclass GameBoard {// eslint-disable-line\r\n\r\n    constructor (game) {\r\n\r\n        const {span} = game\r\n\r\n        this.playerColours = [\"blue\", \"red\", \"green\", \"purple\", \"yellow\", \"orange\", \"black\", \"cyan\", \"pink\", \"darkgrey\"]\r\n        this.rotation = -45\r\n        this.span = span\r\n        this.game = game // Two way binding\r\n\r\n        // Rendering constants\r\n        this.BOX_WIDTH = 0.5\r\n        this.SPREAD = Math.floor(this.span / 2)\r\n        this.SPACING = 1.5\r\n        this.SPHERE_RADIUS = 0.2\r\n        this.SPHERE_V_COUNT = 50\r\n        this.OPACITY_ON = 0.5\r\n        this.OPACITY_OFF = 0.25\r\n\r\n        this.explodedMult = 1\r\n        this.isLerpingBoxes = false\r\n\r\n        this.colours = {\r\n            RED: 0xff0000,\r\n            BLUE: 0x0000ff,\r\n            GREEN: 0x00ff00,\r\n            PURPLE: 0x880088,\r\n            YELLOW: 0xffff00,\r\n            ORANGE: 0xff6600,\r\n            BLACK: 0x000000,\r\n            CYAN: 0x00ffff,\r\n            PINK: 0xffc0cb,\r\n            LIGHTGREY: 0x999999,\r\n            DARKGREY: 0x666666,\r\n            WHITE: 0xffffff\r\n        }\r\n\r\n        this.scene = new THREE.Scene()\r\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\r\n        this.raycaster = new THREE.Raycaster()\r\n        this.mouse = new THREE.Vector2()\r\n        this.renderer = new THREE.WebGLRenderer({alpha: true, antialias: true})\r\n        this.renderer.setPixelRatio(window.devicePixelRatio)\r\n        this.renderer.setSize(window.innerWidth-100, window.innerHeight-200)\r\n        this.renderer.domElement.id = \"rendererDomElement\"\r\n        this.boardElement = this.renderer.domElement\r\n\r\n        const light = new THREE.DirectionalLight(this.colours.LIGHTGREY, 1)\r\n        light.position.set(1, 1, 1).normalize()\r\n        this.scene.add(light)\r\n\r\n        this.camera.position.y = 2\r\n\r\n        // Create a render sphere to move around to the correct location\r\n        const previewColour = this.colours[this.playerColours[this.game.playerIndex].toUpperCase()]\r\n        const previewSphereGeometry = new THREE.SphereGeometry(this.SPHERE_RADIUS, this.SPHERE_V_COUNT, this.SPHERE_V_COUNT)\r\n        const previewSphereMaterial = new THREE.MeshLambertMaterial({color: previewColour, transparent: true})\r\n        previewSphereMaterial.opacity = 0\r\n        previewSphereMaterial.emissive.setHex(previewColour) // TOOD, player colour\r\n        this.previewSphere = new THREE.Mesh(previewSphereGeometry, previewSphereMaterial)\r\n        this.scene.add(this.previewSphere)\r\n\r\n        console.log(\"HERE\", this)\r\n        this.initBoards()\r\n        this.renderLoop()\r\n        this.rotate()\r\n\r\n        this.boardElement.addEventListener(\"mousemove\", event => {\r\n            this.mouse.x = event.clientX / window.innerWidth * 2 - 1\r\n            this.mouse.y = -event.clientY / window.innerHeight * 2 + 1\r\n        }, false)\r\n    }\r\n\r\n    // Create volumes to store the boxes / spheres\r\n    initBoards () {\r\n        this.highlightedBoxes = []\r\n        this.boxes = [...new Array(this.span)].map(() => [...new Array(this.span)].map(() => [...new Array(this.span)]))\r\n        this.spheres = [...new Array(this.span)].map(() => [...new Array(this.span)].map(() => [...new Array(this.span)]))\r\n\r\n        // Populate the canvas with the board cubes\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    this.addBox(b, r, c)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addBox (b, r, c) {\r\n        const geometry = new THREE.BoxGeometry(this.BOX_WIDTH, this.BOX_WIDTH, this.BOX_WIDTH)\r\n        const material = new THREE.MeshLambertMaterial({color: this.colours.DARKGREY})\r\n        material.opacity = this.OPACITY_OFF\r\n        material.transparent = true\r\n\r\n        const box = new THREE.Mesh(geometry, material)\r\n        box.material.emissive.setHex(this.colours.LIGHTGREY)\r\n\r\n        box.position.x = (c - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        box.position.y = (b - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        box.position.z = (r - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        box.data = {b, r, c}\r\n        box.origPos = {\r\n            x: box.position.x,\r\n            y: box.position.y,\r\n            z: box.position.z\r\n        }\r\n\r\n        this.scene.add(box)\r\n        this.boxes[b][r][c] = box\r\n    }\r\n\r\n    addSphere (b, r, c, colour) {\r\n        const sphereGeometry = new THREE.SphereGeometry(this.SPHERE_RADIUS, this.SPHERE_V_COUNT, this.SPHERE_V_COUNT)\r\n        const sphereMaterial = new THREE.MeshLambertMaterial({color: this.colours[colour.toUpperCase()]})\r\n        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial)\r\n        sphere.material.emissive.setHex(this.colours[colour.toUpperCase()])\r\n\r\n        sphere.position.x = (c - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        sphere.position.y = (b - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        sphere.position.z = (r - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        sphere.origPos = {\r\n            x: sphere.position.x,\r\n            y: sphere.position.y,\r\n            z: sphere.position.z\r\n        }\r\n\r\n        this.spheres[b][r][c] = sphere\r\n        this.scene.add(sphere)\r\n    }\r\n\r\n    clearHighlightedBoxes () {\r\n        for (let b=0; b<this.highlightedBoxes.length; b++) {\r\n            this.highlightedBoxes[b].material.opacity = this.OPACITY_OFF\r\n            this.highlightedBoxes[b].material.emissive.setHex(this.colours.LIGHTGREY)\r\n        }\r\n        this.highlightedBoxes = []\r\n        this.previewSphere.material.opacity = 0\r\n    }\r\n\r\n    highlightColumn ({r, c}) {\r\n        for (let b=0; b<this.span; b++) {\r\n            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\r\n            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY)\r\n            this.highlightedBoxes.push(this.boxes[b][r][c])\r\n        }\r\n    }\r\n\r\n    highlightRowY ({b, r}) {\r\n        for (let c=0; c<this.span; c++) {\r\n            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\r\n            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY)\r\n            this.highlightedBoxes.push(this.boxes[b][r][c])\r\n        }\r\n    }\r\n\r\n    highlightRowX ({b, c}) {\r\n        for (let r=0; r<this.span; r++) {\r\n            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\r\n            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY)\r\n            this.highlightedBoxes.push(this.boxes[b][r][c])\r\n        }\r\n    }\r\n\r\n    // TEMP, until the gameState is fully bound\r\n    getPreviewPosition (cube) {\r\n        // Don't render it if there's already a sphere at that location\r\n        if (this.spheres[cube.data.b][cube.data.r][cube.data.c]) {\r\n            return null\r\n        }\r\n\r\n        const pos = {\r\n            x : cube.position.x,\r\n            y : cube.position.y,\r\n            z : cube.position.z\r\n        }\r\n        return pos\r\n    }\r\n\r\n    moveSphere (start, end, axis, location) {\r\n\r\n        // Set the new position for the sphere\r\n        const sphere = this.spheres[start.b][start.r][start.c]\r\n        sphere.isLerping = true\r\n        sphere.newPos = {}\r\n        sphere.newPos.axis = axis\r\n        sphere.newPos[axis] = (location - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n\r\n        // Move the spheres in the spheres state\r\n        this.spheres[end.b][end.r][end.c] = sphere\r\n        this.spheres[start.b][start.r][start.c] = null\r\n    }\r\n\r\n    renderLoop () {\r\n        requestAnimationFrame(() => this.renderLoop())\r\n\r\n        // Lerp the boxes into position, when exploded\r\n        if (this.isLerpingBoxes) {\r\n            for (let b=0; b<this.span; b++) {\r\n                for (let r=0; r<this.span; r++) {\r\n                    for (let c=0; c<this.span; c++) {\r\n\r\n                        if (b!=this.SPREAD && r!=this.SPREAD && c!=this.SPREAD\r\n                            && Math.abs(this.boxes[b][r][c].position.x - this.boxes[b][r][c].origPos.x * this.explodedMult) < 0.05\r\n                            && Math.abs(this.boxes[b][r][c].position.y - this.boxes[b][r][c].origPos.y * this.explodedMult) < 0.05\r\n                            && Math.abs(this.boxes[b][r][c].position.z - this.boxes[b][r][c].origPos.z * this.explodedMult) < 0.05) {\r\n\r\n                            this.isLerpingBoxes = false\r\n                        } else {\r\n                            this.boxes[b][r][c].position.x += (this.boxes[b][r][c].origPos.x * this.explodedMult - this.boxes[b][r][c].position.x) / 10\r\n                            this.boxes[b][r][c].position.y += (this.boxes[b][r][c].origPos.y * this.explodedMult - this.boxes[b][r][c].position.y) / 10\r\n                            this.boxes[b][r][c].position.z += (this.boxes[b][r][c].origPos.z * this.explodedMult - this.boxes[b][r][c].position.z) / 10\r\n\r\n                            if (this.spheres[b][r][c]) {\r\n                                this.spheres[b][r][c].position.x += (this.spheres[b][r][c].origPos.x * this.explodedMult - this.spheres[b][r][c].position.x) / 10\r\n                                this.spheres[b][r][c].position.y += (this.spheres[b][r][c].origPos.y * this.explodedMult - this.spheres[b][r][c].position.y) / 10\r\n                                this.spheres[b][r][c].position.z += (this.spheres[b][r][c].origPos.z * this.explodedMult - this.spheres[b][r][c].position.z) / 10\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        let someSphereIsLerping = false\r\n\r\n        // Lerp the spheres into their new place\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n\r\n                    if (this.spheres[b][r][c] && this.spheres[b][r][c].isLerping) {\r\n\r\n                        someSphereIsLerping = true\r\n\r\n                        const sphere = this.spheres[b][r][c]\r\n                        const {axis} = sphere.newPos\r\n\r\n                        if (Math.abs(sphere.position[axis] - sphere.newPos[axis]) > 0.025) {\r\n                            sphere.position[axis] += (sphere.newPos[axis] - sphere.position[axis]) / 10\r\n                        } else {\r\n                            sphere.isLerping = false\r\n                            sphere.origPos[axis] = sphere.newPos[axis]\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        this.camera.lookAt(this.scene.position)\r\n        this.camera.updateMatrixWorld()\r\n\r\n        this.renderer.render(this.scene, this.camera)\r\n        this.raycaster.setFromCamera(this.mouse, this.camera)\r\n\r\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true)\r\n\r\n        if (intersects.length) {\r\n\r\n            // If still hovering on the same thing...\r\n            if (this.hoveredObject && (this.hoveredObject==intersects[0].object || this.hoveredObject==intersects[0].object.parent)) {\r\n\r\n                if (this.mouseIsDown && !this.hoveredObject.data.isClicked) {\r\n                    this.hoveredObject.data.isClicked = true\r\n                    setTimeout(() => {\r\n                        if (this.hoveredObject) {\r\n                            this.hoveredObject.data.isClicked = false\r\n                        }\r\n                    }, 500)\r\n\r\n                    // TODO, assign the player colour to the class\r\n                    const {b, r, c} = this.hoveredObject.data\r\n\r\n                    if (this.game.gameState[b][r][c]===\" \") {\r\n                        console.log(\"making move\", b, r, c)\r\n                        this.game.makeMove(this.game.playerIndex, b, r, c)\r\n                    }\r\n                }\r\n\r\n            } else {\r\n\r\n                // Set the currently hovered over object\r\n                this.hoveredObject = intersects[0].object.data ? intersects[0].object : intersects[0].object.parent\r\n                this.clearHighlightedBoxes()\r\n\r\n                if (this.hoveredObject.data) {\r\n                    // Also TODO, decide which one of these to do, based on the current gravity\r\n\r\n                    if (!this.isLerpingBoxes && !someSphereIsLerping) {\r\n\r\n                        if (this.game.gravityEnabled) {\r\n                            switch (this.game.gravity.axis) {\r\n                                case 0:\r\n                                    this.highlightColumn(this.hoveredObject.data)\r\n                                    break\r\n                                case 1:\r\n                                    this.highlightRowY(this.hoveredObject.data)\r\n                                    break\r\n                                case 2:\r\n                                    this.highlightRowX(this.hoveredObject.data)\r\n                                    break\r\n                            }\r\n                        } else {\r\n                            // Highlight only the hovered over box\r\n                            const {b, r, c} = this.hoveredObject.data\r\n                            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\r\n                            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY)\r\n                            this.highlightedBoxes.push(this.boxes[b][r][c])\r\n                        }\r\n\r\n                        // Render the preview sphere at the correct location\r\n                        const pos = this.getPreviewPosition(this.hoveredObject)\r\n\r\n                        if (pos) {\r\n                            this.previewSphere.position.x = pos.x\r\n                            this.previewSphere.position.y = pos.y\r\n                            this.previewSphere.position.z = pos.z\r\n                            this.previewSphere.material.opacity = 0.5\r\n                        }\r\n                        // === ?\r\n                        // else {\r\n                        //     this.previewSphere.material.opacity = 0\r\n                        // }\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n\r\n            this.clearHighlightedBoxes()\r\n            this.previewSphere.material.opacity = 0\r\n\r\n            if (this.hoveredObject) {\r\n                if (this.hoveredObject.material) {\r\n                    this.hoveredObject.material.emissive.setHex(this.colours.LIGHTGREY)\r\n                    this.hoveredObject.material.opacity = this.OPACITY_OFF\r\n                    this.hoveredObject.data.isClicked = false\r\n                } else if (this.hoveredObject.parent) {\r\n                    this.hoveredObject.parent.material.emissive.setHex(this.colours.LIGHTGREY)\r\n                    this.hoveredObject.parent.material.opacity = this.OPACITY_OFF\r\n                    this.hoveredObject.parent.data.isClicked = false\r\n                }\r\n\r\n            }\r\n            this.hoveredObject = null\r\n        }\r\n    }\r\n\r\n    toggleExploded () {\r\n        this.explodedMult = this.explodedMult==1 ? 2 : 1\r\n        this.previewSphere.material.opacity = 0\r\n        this.isLerpingBoxes = true\r\n    }\r\n\r\n    addPoint (board, row, col, player, nextPlayer) {\r\n        this.addSphere(board, row, col, this.playerColours[player].toUpperCase())\r\n        this.previewSphere.material.opacity = 0\r\n        this.setPreviewColour(nextPlayer)\r\n    }\r\n\r\n    setPreviewColour (playerIndex) {\r\n        const previewColour = this.colours[this.playerColours[playerIndex].toUpperCase()]\r\n        this.previewSphere.material.color.setHex(previewColour)\r\n        this.previewSphere.material.emissive.setHex(previewColour)\r\n    }\r\n\r\n    render (gameState) {\r\n        this.resetBoard()\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    if (gameState[b][r][c]) {\r\n                        this.addPoint(b, r, c, gameState[b][r][c])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    resetBoard () {\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    if (this.spheres[b][r][c]) {\r\n                        this.scene.remove(this.spheres[b][r][c])\r\n                        this.spheres[b][r][c] = undefined\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    rotate () {\r\n        this.camera.position.x = Math.sin(this.rotation*Math.PI/180) * (this.BOX_WIDTH * 1.5) * this.span * 2\r\n        this.camera.position.z = Math.cos(this.rotation*Math.PI/180) * (this.BOX_WIDTH * 1.5) * this.span * 2\r\n    }\r\n\r\n}\r\n\r\ntypeof window!=\"undefined\" && (window.exports = window.exports || {})\r\n\"use strict\"\r\n\r\nclass GameLogic {// eslint-disable-line\r\n\r\n    constructor ({gameState, gravityEnabled=true, span=3, players=2, isTraining, isMultiplayer, aiOpponent}={}) {\r\n\r\n        this.players = []\r\n        this.gravityEnabled = gravityEnabled\r\n        this.span = parseInt(span)\r\n        this.numPlayers = parseInt(players)\r\n        this.isTraining = isTraining // AI\r\n        this.aiOpponent = aiOpponent // AI\r\n        this.isMultiplayer = isMultiplayer // TODO, will be used to disallow moves until a move is made via WebSocket\r\n\r\n        this.gameState = gameState || this.resetGame() // Allow accepting an existing game state to allow loading existing match\r\n        this.gravity = {\r\n            axis: 0, // 0 for up/down, 1 for left/right, 2 for  forward/backward\r\n            modifier: -1 // -1 for normal, 1 for reverse\r\n        }\r\n        this.directions = {\r\n            up: 0,\r\n            down: 0,\r\n            left: 1,\r\n            right: 1,\r\n            forward: 2,\r\n            backward: 2\r\n        }\r\n        this.modifiers = {\r\n            up: 1,\r\n            down: -1,\r\n            left: -1,\r\n            right: 1,\r\n            forward: -1,\r\n            backward: 1\r\n        }\r\n\r\n        // Randomize who starts\r\n        this.playerIndex = Math.floor(Math.random()*players)\r\n        this.board = new GameBoard(this)\r\n\r\n        // Set the first player to either AI or human (aka the actual player)\r\n        if (this.aiOpponent) {\r\n            this.players.push(new GamePlayer(\"AI\", 0, this))\r\n        } else {\r\n            this.players.push(new GamePlayer(\"local human\", 0))\r\n        }\r\n\r\n        // Set the rest to whatever was configured\r\n        for (let p=1; p<players; p++) {\r\n\r\n            // TODO, disallow more than 1 other player when playing against AI - model needed would be too big\r\n            if (this.isTraining) {\r\n                this.players.push(new GamePlayer(\"AI\", p, this))\r\n            } else if (isMultiplayer) {\r\n                this.players.push(new GamePlayer(\"remote human\", p))\r\n            } else {\r\n                this.players.push(new GamePlayer(\"local human\", p))\r\n            }\r\n        }\r\n\r\n        playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        this.players[this.playerIndex].pickMove(this.gameState)\r\n    }\r\n\r\n    // Create the board brand new\r\n    resetGame () {\r\n\r\n        const gameState = []\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n\r\n            const boardGameState = []\r\n\r\n            for (let r=0; r<this.span; r++) {\r\n\r\n                const rowGameState = []\r\n\r\n                for (let c=0; c<this.span; c++) {\r\n                    rowGameState.push(\" \")\r\n                }\r\n\r\n                boardGameState.push(rowGameState)\r\n            }\r\n            gameState.push(boardGameState)\r\n        }\r\n\r\n        if (this.board) {\r\n            this.board.resetBoard()\r\n            playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        }\r\n\r\n        winsDisplay.style.display = \"none\"\r\n        this.gameState = gameState\r\n\r\n        // Clear the AI players' lastState\r\n        for (let p=0; p<this.players.length; p++) {\r\n            if (this.players[p].type == \"AI\") {\r\n                this.players[p].clearLastState()\r\n            }\r\n        }\r\n\r\n        return gameState\r\n    }\r\n\r\n    makeMove (p, b, r, c) {\r\n\r\n        if (p != this.playerIndex && !this.isTraining) {\r\n            console.log(\"NOT your turn!\")\r\n            return\r\n        }\r\n\r\n        // Illegal move\r\n        if (this.gameState[b][r][c] !== \" \") {\r\n            console.log(\"Illegal move\")\r\n\r\n            // Slap its hands, if it was an AI player\r\n            this.players[p].reward(-99, this.gameState)\r\n\r\n            // Stop the game if it's an AI, to avoid looping to stack overflow\r\n            if (this.players[p].type==\"AI\") {\r\n                this.resetGame()\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        [b, r, c] = this.applyGravityToMove(b, r, c)\r\n\r\n        this.gameState[b][r][c] = p\r\n        this.board.addPoint(b, r, c, p, (this.playerIndex+1) % this.players.length)\r\n\r\n        // Player wins\r\n        if (this.isWinningMove(b, r, c, p)) {\r\n            this.players[p].reward(1, this.gameState)\r\n            this.players.forEach((player, pi) => pi!=p && player.reward(-1, this.gameState))\r\n            winsDisplay.style.display = \"inline-block\"\r\n            return\r\n        }\r\n\r\n        // Tied game\r\n        if (this.isFull()) {\r\n            console.log(\"Tied game\")\r\n            this.players.forEach(player => player.reward(0.25, this.gameState))\r\n            return\r\n        }\r\n\r\n\r\n        // TODO, this might be useless - TEST\r\n        this.players.forEach((player, pi) => pi!=p && player.reward(0, this.gameState))\r\n\r\n        this.playerIndex = ++this.playerIndex % this.players.length\r\n\r\n        // TODO, do this outside of this class?\r\n        playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        winsDisplay.style.display = \"none\"\r\n\r\n        this.players[this.playerIndex].pickMove(this.gameState)\r\n    }\r\n\r\n    isWinningMove (boardIndex, tileY, tileX, player) {\r\n\r\n        let match = false\r\n        const max = this.gameState[0].length-1\r\n        const mid = Math.floor(max/2)\r\n\r\n        // Check current board\r\n        match = this.gameState[boardIndex][tileY].every(col => col===player) // Horizontal\r\n            ||  this.gameState[boardIndex].every(row => row[tileX]===player) // Vertical\r\n            ||  (tileX + tileY)%2 === 0 && ( // Is it on a diagonal?\r\n                // Diagonal top-left -> bottom-right\r\n                this.gameState[boardIndex].every((row, ri) => row[ri]===player) ||\r\n                // Diagonal bottom-left -> top-right\r\n                this.gameState[boardIndex].every((row, ri) => row[max-ri]===player)\r\n            )\r\n\r\n        // Check other boards\r\n        // Up/Down\r\n        match = match || this.gameState.every(board => board[tileY][tileX] === player)\r\n\r\n        if (match) return true\r\n\r\n        // 3D diagonals\r\n        // Not in location unreachable by a diagonal\r\n        if (boardIndex !== mid || boardIndex===mid && (tileY===mid || tileX===mid)) {\r\n\r\n            match = match\r\n                ||  this.gameState.every((board, bi) => board[max-bi][tileX]===player) // Near-bottom -> Far-top\r\n                ||  this.gameState.every((board, bi) => board[bi][tileX]===player) // Far-bottom -> Near-top\r\n                ||  this.gameState.every((board, bi) => board[tileY][max-bi]===player) // Bottom-left -> Top-right\r\n                ||  this.gameState.every((board, bi) => board[tileY][bi]===player) // Bottom-right -> Top-left\r\n\r\n\r\n            if (match) return true\r\n\r\n            // Check cross diagonal (going from corners through the middle)\r\n            if (this.gameState[mid][mid][mid]===player) {\r\n\r\n                match = match\r\n                    ||  this.gameState.every((board, bi) => board[bi][bi]===player) // Far-bottom-left -> Near-top-right\r\n                    ||  this.gameState.every((board, bi) => board[max-bi][bi]===player) // Near-bottom-left -> Far-top-right\r\n                    ||  this.gameState.every((board, bi) => board[max-bi][max-bi]===player) // Near-bottom-right -> Far-top-left\r\n                    ||  this.gameState.every((board, bi) => board[bi][max-bi]===player) // Far-bottom-right -> Near-top-left\r\n            }\r\n        }\r\n\r\n        return match\r\n    }\r\n\r\n    isFull () {\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    if (this.gameState[b][r][c] === \" \") {\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    applyGravityToMove (board, row, col) {\r\n\r\n        if (!this.gravityEnabled) return [board, row, col]\r\n\r\n        let counts\r\n\r\n        switch (this.gravity.axis) {\r\n            // Up/Down\r\n            case 0:\r\n                counts = this.gravity.modifier==-1 ? board : this.span-1-board\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board + this.gravity.modifier][row][col]===\" \") {\r\n                        board += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n            // Left/Right\r\n            case 1:\r\n\r\n                counts = this.gravity.modifier==-1 ? col : this.span-1-col\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board][row][col + this.gravity.modifier]===\" \") {\r\n                        col += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n            // Forward/Backward\r\n            case 2:\r\n\r\n                counts = this.gravity.modifier==-1 ? row : this.span-1-row\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board][row + this.gravity.modifier][col]===\" \") {\r\n                        row += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n        }\r\n\r\n        return [board, row, col]\r\n    }\r\n\r\n    /*\r\n        TODO, there's a bug where some points don't move as needed. I think this may be due\r\n        to the order in which the tiles are moved\r\n    */\r\n    shiftGravity (direction) {\r\n\r\n        this.gravity.axis = this.directions[direction]\r\n        this.gravity.modifier = this.modifiers[direction]\r\n\r\n        const max = Math.abs((this.gravity.modifier==-1 ? this.span-1 : 0)-(this.span-1))\r\n\r\n        switch (this.gravity.axis) {\r\n\r\n            // Up/Down (boards)\r\n            case 0:\r\n                // For every row\r\n                for (let r=0; r<this.span; r++) {\r\n                    // For every column\r\n                    for (let c=0; c<this.span; c++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyBoard:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[Math.abs(max-i)][r][c]===\" \") {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[Math.abs(max-i2)][r][c] !== \" \") {\r\n\r\n                                        this.board.moveSphere({b: Math.abs(max-i2), r, c}, {b: Math.abs(max-i), r, c}, \"y\", Math.abs(max-i))\r\n\r\n                                        this.gameState[Math.abs(max-i)][r][c] = this.gameState[Math.abs(max-i2)][r][c]\r\n                                        this.gameState[Math.abs(max-i2)][r][c] = \" \"\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyBoard\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break\r\n\r\n            // Left/Right (columns)\r\n            case 1:\r\n\r\n                // For every board\r\n                for (let b=0; b<this.span; b++) {\r\n                    // For every row\r\n                    for (let r=0; r<this.span; r++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyColumn:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[b][r][Math.abs(max-i)]===\" \") {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[b][r][Math.abs(max-i2)]!==\" \") {\r\n\r\n                                        this.board.moveSphere({b, r, c: Math.abs(max-i2)}, {b, r, c: Math.abs(max-i)}, \"x\", Math.abs(max-i))\r\n\r\n                                        this.gameState[b][r][Math.abs(max-i)] = this.gameState[b][r][Math.abs(max-i2)]\r\n                                        this.gameState[b][r][Math.abs(max-i2)] = \" \"\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyColumn\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n                break\r\n\r\n            // Forward/Backward (rows)\r\n            case 2:\r\n\r\n                // For every board\r\n                for (let b=0; b<this.span; b++) {\r\n                    // For every row\r\n                    for (let r=0; r<this.span; r++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyColumn:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[b][Math.abs(max-i)][r]===\" \") {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[b][Math.abs(max-i2)][r]!==\" \") {\r\n\r\n                                        this.board.moveSphere({b, r: Math.abs(max-i2), c: r}, {b, r: Math.abs(max-i), c: r}, \"z\", Math.abs(max-i))\r\n\r\n                                        this.gameState[b][Math.abs(max-i)][r] = this.gameState[b][Math.abs(max-i2)][r]\r\n                                        this.gameState[b][Math.abs(max-i2)][r] = \" \"\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyColumn\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                break\r\n        }\r\n\r\n        this.checkAll()\r\n\r\n        this.board.clearHighlightedBoxes()\r\n        this.board.setPreviewColour(this.playerIndex)\r\n    }\r\n\r\n\r\n    // Check the game status for all placed items (when the gravity is changed, and every item is potentially re-arranged)\r\n    // TODO, optimize this, as this is insanely inefficient\r\n    checkAll () {\r\n        let match = false\r\n        let player\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n\r\n                    if (this.gameState[b][r][c] !== \" \") {\r\n                        match = match || this.isWinningMove(b, r, c, this.gameState[b][r][c])\r\n                        if (match) {\r\n                            player = this.gameState[b][r][c]\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (match) {\r\n            playerNum.style.color = this.board.playerColours[player]\r\n            winsDisplay.style.display = \"inline-block\"\r\n        } else {\r\n            this.playerIndex = ++this.playerIndex % this.players.length\r\n            winsDisplay.style.display = \"none\"\r\n            playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        }\r\n    }\r\n\r\n}\r\n\r\ntypeof window!=\"undefined\" && (window.GameLogic = GameLogic)\r\nexports.GameLogic = GameLogic\r\n\"use strict\"\r\n\r\nclass GamePlayer {// eslint-disable-line\r\n\r\n    constructor (type, playerIndex, game) {\r\n\r\n        console.log(`new ${type} player: ${playerIndex}`)\r\n\r\n        this.type = type\r\n        this.game = game // Two way binding\r\n        this.playerIndex = playerIndex\r\n    }\r\n\r\n    clearLastState () {\r\n        for (let b=0; b<this.game.span; b++) {\r\n            for (let r=0; r<this.game.span; r++) {\r\n                for (let c=0; c<this.game.span; c++) {\r\n                    this.lastState[b][r][c] = \" \"\r\n                }\r\n            }\r\n        }\r\n        this.lastMove = undefined\r\n    }\r\n\r\n    pickMove (gameState) {\r\n\r\n        if (this.type != \"AI\") return\r\n\r\n        fetch(\"./getAIMove\", {\r\n            method: \"post\",\r\n            body: JSON.stringify({gameState})\r\n        })\r\n        .then(r => r.json())\r\n        .then(({move}) => {\r\n            const [b, r, c] = move\r\n            this.game.makeMove(this.playerIndex, b, r, c)\r\n        })\r\n    }\r\n\r\n    reward (value, gameState) {\r\n\r\n        if (this.type != \"AI\") return\r\n\r\n        fetch(\"./rewardAI\", {\r\n            method: \"post\",\r\n            body: JSON.stringify({value, gameState})\r\n        })\r\n    }\r\n\r\n}\r\n\r\ntypeof window!=\"undefined\" && (window.GamePlayer = GamePlayer)\r\nexports.GamePlayer = GamePlayer\n//# sourceMappingURL=game.concat.js.map"]}