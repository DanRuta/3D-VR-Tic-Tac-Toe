{"version":3,"sources":["game.concat.js"],"names":["GameBoard","[object Object]","game","span","gravity","gravityEnabled","this","playerColours","rotation","BOX_WIDTH","SPREAD","Math","floor","SPACING","SPHERE_RADIUS","SPHERE_V_COUNT","OPACITY_ON","OPACITY_OFF","explodedMult","isLerpingBoxes","colours","RED","BLUE","GREEN","PURPLE","YELLOW","ORANGE","BLACK","CYAN","PINK","LIGHTGREY","DARKGREY","WHITE","scene","THREE","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","raycaster","Raycaster","mouse","Vector2","renderer","WebGLRenderer","alpha","antialias","setPixelRatio","devicePixelRatio","setSize","boardElement","domElement","light","DirectionalLight","position","set","normalize","add","y","previewSphereGeometry","SphereGeometry","previewSphereMaterial","MeshLambertMaterial","color","transparent","opacity","emissive","setHex","previewSphere","Mesh","console","log","initBoards","renderLoop","rotate","addEventListener","event","x","clientX","clientY","highlightedBoxes","boxes","Array","map","spheres","b","r","c","addBox","geometry","BoxGeometry","material","box","z","data","origPos","colour","sphereGeometry","sphereMaterial","toUpperCase","sphere","length","DARKGRAY","push","cube","requestAnimationFrame","abs","isLerping","axis","newPos","lookAt","updateMatrixWorld","render","setFromCamera","intersects","intersectObjects","children","hoveredObject","object","parent","clearHighlightedBoxes","highlightColumn","getPreviewPosition","mouseIsDown","isClicked","setTimeout","addPoint","board","row","col","player","addSphere","gameState","resetBoard","remove","undefined","sin","PI","cos","exports","GameLogic","players","isTraining","isMultiplayer","aiOpponent","parseInt","numPlayers","resetGame","modifier","directions","up","down","left","right","forward","backward","modifiers","GamePlayer","p","playerIndex","random","playerNum","style","pickMove","boardGameState","rowGameState","winsDisplay","display","type","clearLastState","reward","applyGravityToMove","isWinningMove","forEach","pi","isFull","boardIndex","tileY","tileX","match","max","mid","every","ri","bi","counts","i","direction","i2","everyBoard","everyColumn","checkAll","lastState","lastMove","fetch","method","body","JSON","stringify","then","json","move","makeMove","value"],"mappings":"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","file":"game.min.js","sourcesContent":["\"use strict\"\r\n\r\nclass GameBoard {// eslint-disable-line\r\n\r\n    constructor (game) {\r\n\r\n        const {span, gravity, gravityEnabled} = game\r\n\r\n        this.playerColours = [\"blue\", \"red\", \"green\", \"purple\", \"yellow\", \"orange\", \"black\", \"cyan\", \"pink\", \"darkgrey\"]\r\n        this.rotation = -45\r\n        this.span = span\r\n        this.gravity = gravity\r\n        this.gravityEnabled = gravityEnabled\r\n\r\n        // Rendering constants\r\n        this.BOX_WIDTH = 0.5\r\n        this.SPREAD = Math.floor(this.span / 2)\r\n        this.SPACING = 1.5\r\n        this.SPHERE_RADIUS = 0.2\r\n        this.SPHERE_V_COUNT = 50\r\n        this.OPACITY_ON = 0.5\r\n        this.OPACITY_OFF = 0.25\r\n\r\n        this.explodedMult = 1\r\n        this.isLerpingBoxes = false\r\n\r\n        this.colours = {\r\n            RED: 0xff0000,\r\n            BLUE: 0x0000ff,\r\n            GREEN: 0x00ff00,\r\n            PURPLE: 0x880088,\r\n            YELLOW: 0xffff00,\r\n            ORANGE: 0xff6600,\r\n            BLACK: 0x000000,\r\n            CYAN: 0x00ffff,\r\n            PINK: 0xffc0cb,\r\n            LIGHTGREY: 0x999999,\r\n            DARKGREY: 0x777777,\r\n            WHITE: 0xffffff\r\n        }\r\n\r\n        this.scene = new THREE.Scene()\r\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\r\n        this.raycaster = new THREE.Raycaster()\r\n        this.mouse = new THREE.Vector2()\r\n        this.renderer = new THREE.WebGLRenderer({alpha: true, antialias: true})\r\n        this.renderer.setPixelRatio(window.devicePixelRatio)\r\n        this.renderer.setSize(window.innerWidth-100, window.innerHeight-200)\r\n        this.boardElement = this.renderer.domElement\r\n\r\n        const light = new THREE.DirectionalLight(this.colours.LIGHTGREY, 1)\r\n        light.position.set(1, 1, 1).normalize()\r\n        this.scene.add(light)\r\n\r\n        this.camera.position.y = 2\r\n\r\n        // Create a render sphere to move around to the correct location\r\n        const previewSphereGeometry = new THREE.SphereGeometry(this.SPHERE_RADIUS, this.SPHERE_V_COUNT, this.SPHERE_V_COUNT)\r\n        //                                                                    // TOOD, player colour\r\n        const previewSphereMaterial = new THREE.MeshLambertMaterial({color: this.colours.RED, transparent: true})\r\n        previewSphereMaterial.opacity = 0\r\n        previewSphereMaterial.emissive.setHex(this.colours.RED) // TOOD, player colour\r\n        this.previewSphere = new THREE.Mesh(previewSphereGeometry, previewSphereMaterial)\r\n        this.scene.add(this.previewSphere)\r\n\r\n        console.log(\"HERE\", this)\r\n        this.initBoards()\r\n        this.renderLoop()\r\n        this.rotate()\r\n\r\n        this.boardElement.addEventListener(\"mousemove\", event => {\r\n            this.mouse.x = event.clientX / window.innerWidth * 2 - 1\r\n            this.mouse.y = - event.clientY / window.innerHeight * 2 + 1\r\n        }, false)\r\n    }\r\n\r\n    // Create volumes to store the boxes / spheres\r\n    initBoards () {\r\n        this.highlightedBoxes = []\r\n        this.boxes = [...new Array(this.span)].map(() => [...new Array(this.span)].map(() => [...new Array(this.span)]))\r\n        this.spheres = [...new Array(this.span)].map(() => [...new Array(this.span)].map(() => [...new Array(this.span)]))\r\n\r\n        // Populate the canvas with the board cubes\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    this.addBox(b, r, c)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addBox (b, r, c) {\r\n        const geometry = new THREE.BoxGeometry(this.BOX_WIDTH, this.BOX_WIDTH, this.BOX_WIDTH)\r\n        const material = new THREE.MeshLambertMaterial({color: this.colours.DARKGREY})\r\n        material.opacity = this.OPACITY_OFF\r\n        material.transparent = true\r\n\r\n        const box = new THREE.Mesh(geometry, material)\r\n        box.material.emissive.setHex(this.colours.LIGHTGREY)\r\n\r\n        box.position.x = (r - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        box.position.y = (b - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        box.position.z = (c - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        box.data = {b, r, c}\r\n        box.origPos = {\r\n            x: box.position.x,\r\n            y: box.position.y,\r\n            z: box.position.z\r\n        }\r\n\r\n        this.scene.add(box)\r\n        this.boxes[b][r][c] = box\r\n    }\r\n\r\n    addSphere (b, r, c, colour) {\r\n        const sphereGeometry = new THREE.SphereGeometry(this.SPHERE_RADIUS, this.SPHERE_V_COUNT, this.SPHERE_V_COUNT)\r\n        const sphereMaterial = new THREE.MeshLambertMaterial({color: this.colours[colour.toUpperCase()]})\r\n        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial)\r\n        sphere.material.emissive.setHex(this.colours[colour.toUpperCase()])\r\n\r\n        sphere.position.x = (r - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        sphere.position.y = (b - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        sphere.position.z = (c - this.SPREAD) * this.BOX_WIDTH * this.SPACING\r\n        sphere.origPos = {\r\n            x: sphere.position.x,\r\n            y: sphere.position.y,\r\n            z: sphere.position.z\r\n        }\r\n\r\n        this.spheres[b][r][c] = sphere\r\n        this.scene.add(sphere)\r\n    }\r\n\r\n    clearHighlightedBoxes () {\r\n        for (let b=0; b<this.highlightedBoxes.length; b++) {\r\n            this.highlightedBoxes[b].material.opacity = this.OPACITY_OFF\r\n            this.highlightedBoxes[b].material.emissive.setHex(this.colours.LIGHTGREY)\r\n        }\r\n        this.highlightedBoxes = []\r\n    }\r\n\r\n    highlightColumn ({r, c}) {\r\n        for (let b=0; b<this.span; b++) {\r\n            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\r\n            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGRAY)\r\n            this.highlightedBoxes.push(this.boxes[b][r][c])\r\n        }\r\n    }\r\n\r\n    highlightRowX ({b, r}) {\r\n        for (let c=0; c<this.span; c++) {\r\n            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\r\n            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGRAY)\r\n            this.highlightedBoxes.push(this.boxes[b][r][c])\r\n        }\r\n    }\r\n\r\n    highlightRowY ({b, c}) {\r\n        for (let r=0; r<this.span; r++) {\r\n            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\r\n            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGRAY)\r\n            this.highlightedBoxes.push(this.boxes[b][r][c])\r\n        }\r\n    }\r\n\r\n    // TEMP, until the gameState is fully bound\r\n    getPreviewPosition (cube) {\r\n        // if (!this.gravity) {...}\r\n        const pos = {\r\n            x : cube.position.x,\r\n            y : cube.position.y,\r\n            z : cube.position.z\r\n        }\r\n        return pos\r\n    }\r\n\r\n    renderLoop () {\r\n        requestAnimationFrame(() => this.renderLoop())\r\n\r\n        // Lerp the boxes into position, when exploded\r\n        if (this.isLerpingBoxes) {\r\n            console.log(\"this.span\", this.span)\r\n            for (let b=0; b<this.span; b++) {\r\n                for (let r=0; r<this.span; r++) {\r\n                    for (let c=0; c<this.span; c++) {\r\n\r\n                        if (b!=this.SPREAD && r!=this.SPREAD && c!=this.SPREAD\r\n                            && Math.abs(this.boxes[b][r][c].position.x - this.boxes[b][r][c].origPos.x * this.explodedMult) < 1e-4\r\n                            && Math.abs(this.boxes[b][r][c].position.y - this.boxes[b][r][c].origPos.y * this.explodedMult) < 1e-4\r\n                            && Math.abs(this.boxes[b][r][c].position.z - this.boxes[b][r][c].origPos.z * this.explodedMult) < 1e-4) {\r\n\r\n                            // console.log(\"SETTING TO FALSE\", b, r, c)\r\n                            this.isLerpingBoxes = false\r\n                        } else {\r\n                            this.boxes[b][r][c].position.x += (this.boxes[b][r][c].origPos.x * this.explodedMult - this.boxes[b][r][c].position.x) / 10\r\n                            this.boxes[b][r][c].position.y += (this.boxes[b][r][c].origPos.y * this.explodedMult - this.boxes[b][r][c].position.y) / 10\r\n                            this.boxes[b][r][c].position.z += (this.boxes[b][r][c].origPos.z * this.explodedMult - this.boxes[b][r][c].position.z) / 10\r\n\r\n                            if (this.spheres[b][r][c]) {\r\n                                this.spheres[b][r][c].position.x += (this.spheres[b][r][c].origPos.x * this.explodedMult - this.spheres[b][r][c].position.x) / 10\r\n                                this.spheres[b][r][c].position.y += (this.spheres[b][r][c].origPos.y * this.explodedMult - this.spheres[b][r][c].position.y) / 10\r\n                                this.spheres[b][r][c].position.z += (this.spheres[b][r][c].origPos.z * this.explodedMult - this.spheres[b][r][c].position.z) / 10\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Lerp the spheres into their new place\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n\r\n                    if (this.spheres[b][r][c] && this.spheres[b][r][c].isLerping) {\r\n\r\n                        const sphere = this.spheres[b][r][c]\r\n                        const {axis} = sphere.newPos\r\n\r\n                        if (Math.abs(sphere.position[axis] - sphere.newPos[axis]) > 1e-6) {\r\n                            sphere.position[axis] += (sphere.newPos[axis] - sphere.position[axis]) / 10\r\n                        } else {\r\n                            sphere.isLerping = false\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        this.camera.lookAt(this.scene.position)\r\n        this.camera.updateMatrixWorld()\r\n\r\n        this.renderer.render(this.scene, this.camera)\r\n        this.raycaster.setFromCamera(this.mouse, this.camera)\r\n\r\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true)\r\n\r\n        if (intersects.length) {\r\n\r\n            // If still hovering on the same thing...\r\n            if (this.hoveredObject && (this.hoveredObject==intersects[0].object || this.hoveredObject==intersects[0].object.parent)) {\r\n\r\n                if (this.mouseIsDown && !this.hoveredObject.data.isClicked) {\r\n                    this.hoveredObject.data.isClicked = true\r\n                    setTimeout(() => {\r\n                        if (this.hoveredObject) {\r\n                            this.hoveredObject.data.isClicked = false\r\n                        }\r\n                    }, 500)\r\n\r\n                    // TODO, assign the player colour to the class\r\n                    // this.addSphere(this.hoveredObject.data.b, this.hoveredObject.data.r, this.hoveredObject.data.c, Math.random() < 0.5 ? this.colours.RED : this.colours.BLUE)\r\n                    this.addPoint(this.hoveredObject.data.b, this.hoveredObject.data.r, this.hoveredObject.data.c, 0)\r\n                }\r\n\r\n            } else {\r\n\r\n                // Set the currently hovered over object\r\n                this.hoveredObject = intersects[0].object.data ? intersects[0].object : intersects[0].object.parent\r\n\r\n                // TODO, only do this if the highlighted section will change\r\n                this.clearHighlightedBoxes()\r\n                if (this.hoveredObject.data) {\r\n                    // Also TODO, decide which one of these to do, based on the current gravity\r\n                    this.highlightColumn(this.hoveredObject.data)\r\n                    // this.highlightRowX(this.hoveredObject.data)\r\n                    // this.highlightRowY(this.hoveredObject.data)\r\n\r\n                    // ALSO TODO, do the effect for a single box at a time, when there is no gravity selected\r\n                }\r\n\r\n\r\n                // Render the preview sphere at the correct location\r\n                const {x, y, z} = this.getPreviewPosition(this.hoveredObject)\r\n                this.previewSphere.position.x = x\r\n                this.previewSphere.position.y = y\r\n                this.previewSphere.position.z = z\r\n                this.previewSphere.material.opacity = 0.5\r\n            }\r\n\r\n        } else {\r\n\r\n            this.clearHighlightedBoxes()\r\n            this.previewSphere.material.opacity = 0\r\n\r\n            if (this.hoveredObject) {\r\n                if (this.hoveredObject.material) {\r\n                    this.hoveredObject.material.emissive.setHex(this.colours.LIGHTGREY)\r\n                    this.hoveredObject.material.opacity = this.OPACITY_OFF\r\n                    this.hoveredObject.data.isClicked = false\r\n                } else if (this.hoveredObject.parent) {\r\n                    this.hoveredObject.parent.material.emissive.setHex(this.colours.LIGHTGREY)\r\n                    this.hoveredObject.parent.material.opacity = this.OPACITY_OFF\r\n                    this.hoveredObject.parent.data.isClicked = false\r\n                }\r\n\r\n            }\r\n            this.hoveredObject = null\r\n\r\n        }\r\n    }\r\n\r\n    toggleExploded () {\r\n        this.explodedMult = this.explodedMult==1 ? 2 : 1\r\n        this.isLerpingBoxes = true\r\n    }\r\n\r\n    addPoint (board, row, col, player) {\r\n        this.addSphere(board, row, col, this.playerColours[player].toUpperCase())\r\n    }\r\n\r\n    render (gameState) {\r\n        this.resetBoard()\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    if (gameState[b][r][c]) {\r\n                        this.addPoint(b, r, c, gameState[b][r][c])\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    resetBoard () {\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    if (this.spheres[b][r][c]) {\r\n                        this.scene.remove(this.spheres[b][r][c])\r\n                        this.spheres[b][r][c] = undefined\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Highlight the column/row/vertical-column that will be affected by a move\r\n    // styleHoverPreview (board, row, col) {\r\n\r\n\r\n\r\n    // }\r\n\r\n\r\n    rotate () {\r\n        this.camera.position.x = Math.sin(this.rotation*Math.PI/180) * (this.BOX_WIDTH * 1.5) * this.span * 2\r\n        this.camera.position.z = Math.cos(this.rotation*Math.PI/180) * (this.BOX_WIDTH * 1.5) * this.span * 2\r\n    }\r\n\r\n}\r\n\r\ntypeof window!=\"undefined\" && (window.exports = window.exports || {})\r\n\"use strict\"\r\n\r\nclass GameLogic {// eslint-disable-line\r\n\r\n    constructor ({gameState, gravityEnabled=true, span=3, players=2, isTraining, isMultiplayer, aiOpponent}={}) {\r\n\r\n        this.players = []\r\n        this.gravityEnabled = gravityEnabled\r\n        this.span = parseInt(span)\r\n        this.numPlayers = parseInt(players)\r\n        this.isTraining = isTraining // AI\r\n        this.aiOpponent = aiOpponent // AI\r\n        this.isMultiplayer = isMultiplayer // TODO, will be used to disallow moves until a move is made via WebSocket\r\n\r\n        this.gameState = gameState || this.resetGame() // Allow accepting an existing game state to allow loading existing match\r\n        this.gravity = {\r\n            axis: 0, // 0 for up/down, 1 for left/right, 2 for  forward/backward\r\n            modifier: -1 // -1 for normal, 1 for reverse\r\n        }\r\n        this.directions = {\r\n            up: 0,\r\n            down: 0,\r\n            left: 1,\r\n            right: 1,\r\n            forward: 2,\r\n            backward: 2\r\n        }\r\n        this.modifiers = {\r\n            up: 1,\r\n            down: -1,\r\n            left: -1,\r\n            right: 1,\r\n            forward: -1,\r\n            backward: 1\r\n        }\r\n\r\n        this.board = new GameBoard(this)\r\n\r\n        // Set the first player to either AI or human (aka the actual player)\r\n        if (this.aiOpponent) {\r\n            this.players.push(new GamePlayer(\"AI\", 0, this))\r\n        } else {\r\n            this.players.push(new GamePlayer(\"local human\", 0))\r\n        }\r\n\r\n        // Set the rest to whatever was configured\r\n        for (let p=1; p<players; p++) {\r\n\r\n            // TODO, disallow more than 1 other player when playing against AI - model needed would be too big\r\n            if (this.isTraining) {\r\n                this.players.push(new GamePlayer(\"AI\", p, this))\r\n            } else if (isMultiplayer) {\r\n                this.players.push(new GamePlayer(\"remote human\", p))\r\n            } else {\r\n                this.players.push(new GamePlayer(\"local human\", p))\r\n            }\r\n        }\r\n\r\n        // Randomize who starts\r\n        this.playerIndex = Math.floor(Math.random()*players)\r\n        playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        this.players[this.playerIndex].pickMove(this.gameState)\r\n    }\r\n\r\n    // Create the board brand new\r\n    resetGame () {\r\n\r\n        const gameState = []\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n\r\n            const boardGameState = []\r\n\r\n            for (let r=0; r<this.span; r++) {\r\n\r\n                const rowGameState = []\r\n\r\n                for (let c=0; c<this.span; c++) {\r\n                    rowGameState.push(\" \")\r\n                }\r\n\r\n                boardGameState.push(rowGameState)\r\n            }\r\n            gameState.push(boardGameState)\r\n        }\r\n\r\n        if (this.board) {\r\n            this.board.resetBoard()\r\n            playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        }\r\n\r\n        winsDisplay.style.display = \"none\"\r\n        this.gameState = gameState\r\n\r\n        // Clear the AI players' lastState\r\n        for (let p=0; p<this.players.length; p++) {\r\n            if (this.players[p].type == \"AI\") {\r\n                this.players[p].clearLastState()\r\n            }\r\n        }\r\n\r\n        return gameState\r\n    }\r\n\r\n    makeMove (p, b, r, c) {\r\n\r\n        if (p != this.playerIndex && !this.isTraining) {\r\n            console.log(\"NOT your turn!\")\r\n            return\r\n        }\r\n\r\n        // Illegal move\r\n        if (this.gameState[b][r][c] !== \" \") {\r\n            console.log(\"Illegal move\")\r\n\r\n            // Slap its hands, if it was an AI player\r\n            this.players[p].reward(-99, this.gameState)\r\n\r\n            // Stop the game if it's an AI, to avoid looping to stack overflow\r\n            if (this.players[p].type==\"AI\") {\r\n                this.resetGame()\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        [b, r, c] = this.applyGravityToMove(b, r, c)\r\n\r\n        this.gameState[b][r][c] = p\r\n        this.board.addPoint(b, r, c, p)\r\n\r\n        // Player wins\r\n        if (this.isWinningMove(b, r, c, p)) {\r\n            this.players[p].reward(1, this.gameState)\r\n            this.players.forEach((player, pi) => pi!=p && player.reward(-1, this.gameState))\r\n            winsDisplay.style.display = \"inline-block\"\r\n            return\r\n        }\r\n\r\n        // Tied game\r\n        if (this.isFull()) {\r\n            console.log(\"Tied game\")\r\n            this.players.forEach(player => player.reward(0.25, this.gameState))\r\n            return\r\n        }\r\n\r\n\r\n        // TODO, this might be useless - TEST\r\n        this.players.forEach((player, pi) => pi!=p && player.reward(0, this.gameState))\r\n\r\n        this.playerIndex = ++this.playerIndex % this.players.length\r\n\r\n        // TODO, do this outside of this class?\r\n        playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        winsDisplay.style.display = \"none\"\r\n\r\n        this.players[this.playerIndex].pickMove(this.gameState)\r\n    }\r\n\r\n    isWinningMove (boardIndex, tileY, tileX, player) {\r\n\r\n        let match = false\r\n        const max = this.gameState[0].length-1\r\n        const mid = Math.floor(max/2)\r\n\r\n        // Check current board\r\n        match = this.gameState[boardIndex][tileY].every(col => col===player) // Horizontal\r\n            ||  this.gameState[boardIndex].every(row => row[tileX]===player) // Vertical\r\n            ||  (tileX + tileY)%2 === 0 && ( // Is it on a diagonal?\r\n                // Diagonal top-left -> bottom-right\r\n                this.gameState[boardIndex].every((row, ri) => row[ri]===player) ||\r\n                // Diagonal bottom-left -> top-right\r\n                this.gameState[boardIndex].every((row, ri) => row[max-ri]===player)\r\n            )\r\n\r\n        // Check other boards\r\n        // Up/Down\r\n        match = match || this.gameState.every(board => board[tileY][tileX] === player)\r\n\r\n        if (match) return true\r\n\r\n        // 3D diagonals\r\n        // Not in location unreachable by a diagonal\r\n        if (boardIndex !== mid || boardIndex===mid && (tileY===mid || tileX===mid)) {\r\n\r\n            match = match\r\n                ||  this.gameState.every((board, bi) => board[max-bi][tileX]===player) // Near-bottom -> Far-top\r\n                ||  this.gameState.every((board, bi) => board[bi][tileX]===player) // Far-bottom -> Near-top\r\n                ||  this.gameState.every((board, bi) => board[tileY][max-bi]===player) // Bottom-left -> Top-right\r\n                ||  this.gameState.every((board, bi) => board[tileY][bi]===player) // Bottom-right -> Top-left\r\n\r\n\r\n            if (match) return true\r\n\r\n            // Check cross diagonal (going from corners through the middle)\r\n            if (this.gameState[mid][mid][mid]===player) {\r\n\r\n                match = match\r\n                    ||  this.gameState.every((board, bi) => board[bi][bi]===player) // Far-bottom-left -> Near-top-right\r\n                    ||  this.gameState.every((board, bi) => board[max-bi][bi]===player) // Near-bottom-left -> Far-top-right\r\n                    ||  this.gameState.every((board, bi) => board[max-bi][max-bi]===player) // Near-bottom-right -> Far-top-left\r\n                    ||  this.gameState.every((board, bi) => board[bi][max-bi]===player) // Far-bottom-right -> Near-top-left\r\n            }\r\n        }\r\n\r\n        return match\r\n    }\r\n\r\n    isFull () {\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    if (this.gameState[b][r][c] === \" \") {\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    applyGravityToMove (board, row, col) {\r\n\r\n        if (!this.gravityEnabled) return [board, row, col]\r\n\r\n        let counts\r\n\r\n        switch (this.gravity.axis) {\r\n            // Up/Down\r\n            case 0:\r\n                counts = this.gravity.modifier==-1 ? board : this.span-1-board\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board + this.gravity.modifier][row][col]===\" \") {\r\n                        board += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n            // Left/Right\r\n            case 1:\r\n\r\n                counts = this.gravity.modifier==-1 ? col : this.span-1-col\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board][row][col + this.gravity.modifier]===\" \") {\r\n                        col += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n            // Forward/Backward\r\n            case 2:\r\n\r\n                counts = this.gravity.modifier==-1 ? row : this.span-1-row\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board][row + this.gravity.modifier][col]===\" \") {\r\n                        row += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n        }\r\n\r\n        return [board, row, col]\r\n    }\r\n\r\n    /*\r\n        TODO, there's a bug where some points don't move as needed. I think this may be due\r\n        to the order in which the tiles are moved\r\n    */\r\n    shiftGravity (direction) {\r\n\r\n        this.gravity.axis = this.directions[direction]\r\n        this.gravity.modifier = this.modifiers[direction]\r\n\r\n        const max = Math.abs((this.gravity.modifier==-1 ? this.span-1 : 0)-(this.span-1))\r\n\r\n        switch (this.gravity.axis) {\r\n\r\n            // Up/Down (boards)\r\n            case 0:\r\n                // For every row\r\n                for (let r=0; r<this.span; r++) {\r\n                    // For every column\r\n                    for (let c=0; c<this.span; c++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyBoard:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[Math.abs(max-i)][r][c]===\" \") {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[Math.abs(max-i2)][r][c] !== \" \") {\r\n                                        this.gameState[Math.abs(max-i)][r][c] = this.gameState[Math.abs(max-i2)][r][c]\r\n                                        this.gameState[Math.abs(max-i2)][r][c] = \" \"\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyBoard\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break\r\n\r\n            // Left/Right (columns)\r\n            case 1:\r\n\r\n                // For every board\r\n                for (let b=0; b<this.span; b++) {\r\n                    // For every row\r\n                    for (let r=0; r<this.span; r++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyColumn:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[b][r][Math.abs(max-i)]===\" \") {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[b][r][Math.abs(max-i2)]!==\" \") {\r\n                                        this.gameState[b][r][Math.abs(max-i)] = this.gameState[b][r][Math.abs(max-i2)]\r\n                                        this.gameState[b][r][Math.abs(max-i2)] = \" \"\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyColumn\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n                break\r\n\r\n            // Forward/Backward (rows)\r\n            case 2:\r\n\r\n                // For every board\r\n                for (let b=0; b<this.span; b++) {\r\n                    // For every row\r\n                    for (let r=0; r<this.span; r++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyColumn:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[b][Math.abs(max-i)][r]===\" \") {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[b][Math.abs(max-i2)][r]!==\" \") {\r\n                                        this.gameState[b][Math.abs(max-i)][r] = this.gameState[b][Math.abs(max-i2)][r]\r\n                                        this.gameState[b][Math.abs(max-i2)][r] = \" \"\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyColumn\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                break\r\n        }\r\n\r\n        this.board.render(this.gameState)\r\n        this.checkAll()\r\n    }\r\n\r\n    // Check the game status for all placed items (when the gravity is changed, and every item is potentially re-arranged)\r\n    // TODO, optimize this, as this is insanely inefficient\r\n    checkAll () {\r\n        let match = false\r\n        let player\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n\r\n                    if (this.gameState[b][r][c] !== \" \") {\r\n                        match = match || this.isWinningMove(b, r, c, this.gameState[b][r][c])\r\n                        if (match) {\r\n                            player = this.gameState[b][r][c]\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (match) {\r\n            playerNum.style.color = this.board.playerColours[player]\r\n            winsDisplay.style.display = \"inline-block\"\r\n        } else {\r\n            this.playerIndex = ++this.playerIndex % this.players.length\r\n            winsDisplay.style.display = \"none\"\r\n            playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        }\r\n    }\r\n\r\n}\r\n\r\ntypeof window!=\"undefined\" && (window.GameLogic = GameLogic)\r\nexports.GameLogic = GameLogic\r\n\"use strict\"\r\n\r\nclass GamePlayer {// eslint-disable-line\r\n\r\n    constructor (type, playerIndex, game) {\r\n\r\n        console.log(`new ${type} player: ${playerIndex}`)\r\n\r\n        this.type = type\r\n        this.game = game // Two way binding\r\n        this.playerIndex = playerIndex\r\n    }\r\n\r\n    clearLastState () {\r\n        for (let b=0; b<this.game.span; b++) {\r\n            for (let r=0; r<this.game.span; r++) {\r\n                for (let c=0; c<this.game.span; c++) {\r\n                    this.lastState[b][r][c] = \" \"\r\n                }\r\n            }\r\n        }\r\n        this.lastMove = undefined\r\n    }\r\n\r\n    pickMove (gameState) {\r\n\r\n        if (this.type != \"AI\") return\r\n\r\n        fetch(\"./getAIMove\", {\r\n            method: \"post\",\r\n            body: JSON.stringify({gameState})\r\n        })\r\n        .then(r => r.json())\r\n        .then(({move}) => {\r\n            const [b, r, c] = move\r\n            this.game.makeMove(this.playerIndex, b, r, c)\r\n        })\r\n    }\r\n\r\n    reward (value, gameState) {\r\n\r\n        if (this.type != \"AI\") return\r\n\r\n        fetch(\"./rewardAI\", {\r\n            method: \"post\",\r\n            body: JSON.stringify({value, gameState})\r\n        })\r\n    }\r\n\r\n}\r\n\r\ntypeof window!=\"undefined\" && (window.GamePlayer = GamePlayer)\r\nexports.GamePlayer = GamePlayer\n//# sourceMappingURL=game.concat.js.map"]}