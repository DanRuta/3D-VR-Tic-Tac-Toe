{"version":3,"sources":["game.concat.js"],"names":["GameBoard","[object Object]","game","span","gravity","gravityEnabled","this","playerColours","rotationValue","tiltValue","perspectiveX","perspectiveY","boardElement","document","createElement","id","style","marginTop","perspectiveOrigin","b","board","tileSize","className","gridTemplateColumns","repeat","gridTemplateRows","transform","flatArrowsContainer","r","c","tile","addEventListener","makeMove","playerIndex","styleHoverPreview","appendChild","gameState","elem","children","innerHTML","color","row","col","player","querySelectorAll","forEach","classList","toggle","axis","Array","from","window","exports","GameLogic","players","isTraining","isMultiplayer","aiOpponent","parseInt","numPlayers","resetGame","modifier","directions","up","down","left","right","forward","backward","modifiers","push","GamePlayer","p","Math","floor","random","playerNum","pickMove","boardGameState","rowGameState","resetBoard","winsDisplay","display","length","type","clearLastState","console","log","reward","applyGravityToMove","addPoint","isWinningMove","pi","isFull","boardIndex","tileY","tileX","match","max","mid","every","ri","bi","counts","i","direction","abs","i2","everyBoard","everyColumn","render","checkAll","lastState","lastMove","undefined","fetch","method","body","JSON","stringify","then","json","move","value"],"mappings":"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","file":"game.min.js","sourcesContent":["\"use strict\"\r\n\r\nclass GameBoard {// eslint-disable-line\r\n\r\n    constructor (game) {\r\n\r\n        const {span, gravity, gravityEnabled} = game\r\n\r\n        this.playerColours = [\"blue\", \"red\", \"green\", \"purple\", \"yellow\", \"brown\", \"black\", \"cyan\", \"pink\", \"darkgrey\"]\r\n        this.rotationValue = -45\r\n        this.tiltValue = span==3 ? 20 : span==7 ? 40 : 30\r\n        this.span = span\r\n        this.gravity = gravity\r\n        this.gravityEnabled = gravityEnabled\r\n        this.perspectiveX = 150\r\n        this.perspectiveY = 1000\r\n        this.boardElement = document.createElement(\"div\")\r\n        this.boardElement.id = \"boardsContainer\"\r\n\r\n        if (this.span!=3) {\r\n            this.boardElement.style.marginTop = \"0\"\r\n\r\n            if (this.span==7) {\r\n                this.boardElement.style.marginTop = \"100px\"\r\n                this.perspectiveY = 800\r\n            } else {\r\n                this.perspectiveY = 1000\r\n            }\r\n        }\r\n\r\n        this.boardElement.style.perspectiveOrigin = `${this.perspectiveX}px ${this.perspectiveY}px`\r\n\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n\r\n            const board = document.createElement(\"div\")\r\n            const tileSize = 300/this.span\r\n\r\n            board.className = \"board\"\r\n            board.style.gridTemplateColumns = `${tileSize}px `.repeat(this.span)\r\n            board.style.gridTemplateRows = `${tileSize}px `.repeat(this.span)\r\n            board.style.transform = `rotateX(${this.tiltValue}deg) rotateZ(${this.rotationValue}deg)`\r\n            board.style.marginTop = this.span==7 ? \"-70%\" : \"-50%\"\r\n\r\n            // TODO, move this out of here\r\n            flatArrowsContainer.style.transform = `rotateX(${this.tiltValue+30}deg) rotateZ(${this.rotationValue-45}deg)`\r\n\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    const tile = document.createElement(\"div\")\r\n\r\n                    tile.addEventListener(\"click\", () => game.makeMove(game.playerIndex, b, r, c))\r\n                    tile.addEventListener(\"mouseover\", () => this.styleHoverPreview(b, r, c))\r\n\r\n                    board.appendChild(tile)\r\n                }\r\n            }\r\n\r\n            this.boardElement.appendChild(board)\r\n        }\r\n\r\n    }\r\n\r\n    render (gameState) {\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n\r\n                    const elem = this.boardElement.children[b].children[r*this.span + c]\r\n\r\n                    if (gameState[b][r][c] === \" \") {\r\n                        elem.innerHTML = \"\"\r\n                    } else {\r\n                        elem.innerHTML = \"•\"\r\n                        elem.style.color = this.playerColours[gameState[b][r][c]]\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addPoint (board, row, col, player) {\r\n        this.boardElement.children[board].children[row*this.span + col].innerHTML = \"•\"\r\n        this.boardElement.children[board].children[row*this.span + col].style.color = this.playerColours[player]\r\n    }\r\n\r\n    renderPoints () {\r\n\r\n    }\r\n\r\n    resetBoard () {\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    this.boardElement.children[b].children[r*this.span + c].innerHTML = \"\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // Highlight the column/row/vertical-column that will be affected by a move\r\n    styleHoverPreview (board, row, col) {\r\n\r\n        if (!this.gravityEnabled) {\r\n            return\r\n        }\r\n\r\n        // Clear last highlighted tiles\r\n        const existingHovered = this.boardElement.querySelectorAll(\".hoveredTile\")\r\n        existingHovered.forEach(tile => tile.classList.toggle(\"hoveredTile\"))\r\n\r\n        switch (this.gravity.axis) {\r\n            // Up/Down\r\n            case 0:\r\n                for (let b=0; b<this.span; b++) {\r\n                    this.boardElement.children[b].children[row*this.span + col].classList.toggle(\"hoveredTile\")\r\n                }\r\n                break\r\n            // Left/Right\r\n            case 1:\r\n                for (let c=0; c<this.span; c++) {\r\n                    this.boardElement.children[board].children[row*this.span + c].classList.toggle(\"hoveredTile\")\r\n                }\r\n                break\r\n            // Forward/Backward\r\n            case 2:\r\n                for (let r=0; r<this.span; r++) {\r\n                    this.boardElement.children[board].children[r*this.span + col].classList.toggle(\"hoveredTile\")\r\n                }\r\n                break\r\n        }\r\n\r\n    }\r\n\r\n\r\n    rotate () {\r\n        Array.from(this.boardElement.children).forEach(board => {\r\n            board.style.transform = `rotateX(${this.tiltValue}deg) rotateZ(${this.rotationValue}deg)`\r\n            flatArrowsContainer.style.transform = `rotateX(${this.tiltValue+30}deg) rotateZ(${this.rotationValue-45}deg)`\r\n        })\r\n    }\r\n\r\n}\r\n\r\ntypeof window!=\"undefined\" && (window.exports = window.exports || {})\r\n\"use strict\"\r\n\r\nclass GameLogic {// eslint-disable-line\r\n\r\n    constructor ({gameState, gravityEnabled=true, span=3, players=2, isTraining, isMultiplayer, aiOpponent}={}) {\r\n\r\n        this.players = []\r\n        this.gravityEnabled = gravityEnabled\r\n        this.span = parseInt(span)\r\n        this.numPlayers = parseInt(players)\r\n        this.isTraining = isTraining // AI\r\n        this.aiOpponent = aiOpponent // AI\r\n        this.isMultiplayer = isMultiplayer // TODO, will be used to disallow moves until a move is made via WebSocket\r\n\r\n        this.gameState = gameState || this.resetGame() // Allow accepting an existing game state to allow loading existing match\r\n        this.gravity = {\r\n            axis: 0, // 0 for up/down, 1 for left/right, 2 for  forward/backward\r\n            modifier: -1 // -1 for normal, 1 for reverse\r\n        }\r\n        this.directions = {\r\n            up: 0,\r\n            down: 0,\r\n            left: 1,\r\n            right: 1,\r\n            forward: 2,\r\n            backward: 2\r\n        }\r\n        this.modifiers = {\r\n            up: 1,\r\n            down: -1,\r\n            left: -1,\r\n            right: 1,\r\n            forward: -1,\r\n            backward: 1\r\n        }\r\n\r\n        this.board = new GameBoard(this)\r\n\r\n        // Set the first player to either AI or human (aka the actual player)\r\n        if (this.aiOpponent) {\r\n            this.players.push(new GamePlayer(\"AI\", 0, this))\r\n        } else {\r\n            this.players.push(new GamePlayer(\"local human\", 0))\r\n        }\r\n\r\n        // Set the rest to whatever was configured\r\n        for (let p=1; p<players; p++) {\r\n\r\n            // TODO, disallow more than 1 other player when playing against AI - model needed would be too big\r\n            if (this.isTraining) {\r\n                this.players.push(new GamePlayer(\"AI\", p, this))\r\n            } else if (isMultiplayer) {\r\n                this.players.push(new GamePlayer(\"remote human\", p))\r\n            } else {\r\n                this.players.push(new GamePlayer(\"local human\", p))\r\n            }\r\n        }\r\n\r\n        // Randomize who starts\r\n        this.playerIndex = Math.floor(Math.random()*players)\r\n        playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        this.players[this.playerIndex].pickMove(this.gameState)\r\n    }\r\n\r\n    // Create the board brand new\r\n    resetGame () {\r\n\r\n        const gameState = []\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n\r\n            const boardGameState = []\r\n\r\n            for (let r=0; r<this.span; r++) {\r\n\r\n                const rowGameState = []\r\n\r\n                for (let c=0; c<this.span; c++) {\r\n                    rowGameState.push(\" \")\r\n                }\r\n\r\n                boardGameState.push(rowGameState)\r\n            }\r\n            gameState.push(boardGameState)\r\n        }\r\n\r\n        if (this.board) {\r\n            this.board.resetBoard()\r\n            playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        }\r\n\r\n        winsDisplay.style.display = \"none\"\r\n        this.gameState = gameState\r\n\r\n        // Clear the AI players' lastState\r\n        for (let p=0; p<this.players.length; p++) {\r\n            if (this.players[p].type == \"AI\") {\r\n                this.players[p].clearLastState()\r\n            }\r\n        }\r\n\r\n        return gameState\r\n    }\r\n\r\n    makeMove (p, b, r, c) {\r\n\r\n        if (p != this.playerIndex && !this.isTraining) {\r\n            console.log(\"NOT your turn!\")\r\n            return\r\n        }\r\n\r\n        // Illegal move\r\n        if (this.gameState[b][r][c] !== \" \") {\r\n            console.log(\"Illegal move\")\r\n\r\n            // Slap its hands, if it was an AI player\r\n            this.players[p].reward(-99, this.gameState)\r\n\r\n            // Stop the game if it's an AI, to avoid looping to stack overflow\r\n            if (this.players[p].type==\"AI\") {\r\n                this.resetGame()\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        [b, r, c] = this.applyGravityToMove(b, r, c)\r\n\r\n        this.gameState[b][r][c] = p\r\n        this.board.addPoint(b, r, c, p)\r\n\r\n        // Player wins\r\n        if (this.isWinningMove(b, r, c, p)) {\r\n            this.players[p].reward(1, this.gameState)\r\n            this.players.forEach((player, pi) => pi!=p && player.reward(-1, this.gameState))\r\n            winsDisplay.style.display = \"inline-block\"\r\n            return\r\n        }\r\n\r\n        // Tied game\r\n        if (this.isFull()) {\r\n            console.log(\"Tied game\")\r\n            this.players.forEach(player => player.reward(0.25, this.gameState))\r\n            return\r\n        }\r\n\r\n\r\n        // TODO, this might be useless - TEST\r\n        this.players.forEach((player, pi) => pi!=p && player.reward(0, this.gameState))\r\n\r\n        this.playerIndex = ++this.playerIndex % this.players.length\r\n\r\n        // TODO, do this outside of this class?\r\n        playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        winsDisplay.style.display = \"none\"\r\n\r\n        this.players[this.playerIndex].pickMove(this.gameState)\r\n    }\r\n\r\n    isWinningMove (boardIndex, tileY, tileX, player) {\r\n\r\n        let match = false\r\n        const max = this.gameState[0].length-1\r\n        const mid = Math.floor(max/2)\r\n\r\n        // Check current board\r\n        match = this.gameState[boardIndex][tileY].every(col => col===player) // Horizontal\r\n            ||  this.gameState[boardIndex].every(row => row[tileX]===player) // Vertical\r\n            ||  (tileX + tileY)%2 === 0 && ( // Is it on a diagonal?\r\n                // Diagonal top-left -> bottom-right\r\n                this.gameState[boardIndex].every((row, ri) => row[ri]===player) ||\r\n                // Diagonal bottom-left -> top-right\r\n                this.gameState[boardIndex].every((row, ri) => row[max-ri]===player)\r\n            )\r\n\r\n        // Check other boards\r\n        // Up/Down\r\n        match = match || this.gameState.every(board => board[tileY][tileX] === player)\r\n\r\n        if (match) return true\r\n\r\n        // 3D diagonals\r\n        // Not in location unreachable by a diagonal\r\n        if (boardIndex !== mid || boardIndex===mid && (tileY===mid || tileX===mid)) {\r\n\r\n            match = match\r\n                ||  this.gameState.every((board, bi) => board[max-bi][tileX]===player) // Near-bottom -> Far-top\r\n                ||  this.gameState.every((board, bi) => board[bi][tileX]===player) // Far-bottom -> Near-top\r\n                ||  this.gameState.every((board, bi) => board[tileY][max-bi]===player) // Bottom-left -> Top-right\r\n                ||  this.gameState.every((board, bi) => board[tileY][bi]===player) // Bottom-right -> Top-left\r\n\r\n\r\n            if (match) return true\r\n\r\n            // Check cross diagonal (going from corners through the middle)\r\n            if (this.gameState[mid][mid][mid]===player) {\r\n\r\n                match = match\r\n                    ||  this.gameState.every((board, bi) => board[bi][bi]===player) // Far-bottom-left -> Near-top-right\r\n                    ||  this.gameState.every((board, bi) => board[max-bi][bi]===player) // Near-bottom-left -> Far-top-right\r\n                    ||  this.gameState.every((board, bi) => board[max-bi][max-bi]===player) // Near-bottom-right -> Far-top-left\r\n                    ||  this.gameState.every((board, bi) => board[bi][max-bi]===player) // Far-bottom-right -> Near-top-left\r\n            }\r\n        }\r\n\r\n        return match\r\n    }\r\n\r\n    isFull () {\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n                    if (this.gameState[b][r][c] === \" \") {\r\n                        return false\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return true\r\n    }\r\n\r\n    applyGravityToMove (board, row, col) {\r\n\r\n        if (!this.gravityEnabled) return [board, row, col]\r\n\r\n        let counts\r\n\r\n        switch (this.gravity.axis) {\r\n            // Up/Down\r\n            case 0:\r\n                counts = this.gravity.modifier==-1 ? board : this.span-1-board\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board + this.gravity.modifier][row][col]===\" \") {\r\n                        board += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n            // Left/Right\r\n            case 1:\r\n\r\n                counts = this.gravity.modifier==-1 ? col : this.span-1-col\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board][row][col + this.gravity.modifier]===\" \") {\r\n                        col += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n            // Forward/Backward\r\n            case 2:\r\n\r\n                counts = this.gravity.modifier==-1 ? row : this.span-1-row\r\n\r\n                for (let i=0; i<counts; i++) {\r\n                    if (this.gameState[board][row + this.gravity.modifier][col]===\" \") {\r\n                        row += this.gravity.modifier\r\n                    } else {\r\n                        break\r\n                    }\r\n                }\r\n                break\r\n        }\r\n\r\n        return [board, row, col]\r\n    }\r\n\r\n    /*\r\n        TODO, there's a bug where some points don't move as needed. I think this may be due\r\n        to the order in which the tiles are moved\r\n    */\r\n    shiftGravity (direction) {\r\n\r\n        this.gravity.axis = this.directions[direction]\r\n        this.gravity.modifier = this.modifiers[direction]\r\n\r\n        const max = Math.abs((this.gravity.modifier==-1 ? this.span-1 : 0)-(this.span-1))\r\n\r\n        switch (this.gravity.axis) {\r\n\r\n            // Up/Down (boards)\r\n            case 0:\r\n                // For every row\r\n                for (let r=0; r<this.span; r++) {\r\n                    // For every column\r\n                    for (let c=0; c<this.span; c++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyBoard:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[Math.abs(max-i)][r][c]===\" \") {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[Math.abs(max-i2)][r][c] !== \" \") {\r\n                                        this.gameState[Math.abs(max-i)][r][c] = this.gameState[Math.abs(max-i2)][r][c]\r\n                                        this.gameState[Math.abs(max-i2)][r][c] = \" \"\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyBoard\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                break\r\n\r\n            // Left/Right (columns)\r\n            case 1:\r\n\r\n                // For every board\r\n                for (let b=0; b<this.span; b++) {\r\n                    // For every row\r\n                    for (let r=0; r<this.span; r++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyColumn:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[b][r][Math.abs(max-i)]===\" \") {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[b][r][Math.abs(max-i2)]!==\" \") {\r\n                                        this.gameState[b][r][Math.abs(max-i)] = this.gameState[b][r][Math.abs(max-i2)]\r\n                                        this.gameState[b][r][Math.abs(max-i2)] = \" \"\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyColumn\r\n                            }\r\n\r\n                        }\r\n\r\n                    }\r\n                }\r\n                break\r\n\r\n            // Forward/Backward (rows)\r\n            case 2:\r\n\r\n                // For every board\r\n                for (let b=0; b<this.span; b++) {\r\n                    // For every row\r\n                    for (let r=0; r<this.span; r++) {\r\n\r\n                        let i2 = 0\r\n\r\n                        everyColumn:\r\n                        for (let i=0; i<this.span; i++) {\r\n\r\n                            if (this.gameState[b][Math.abs(max-i)][r]===\" \") {\r\n\r\n                                i2 = i+1\r\n\r\n                                while (i2<this.span) {\r\n                                    if (i2<this.span && i<this.span && this.gameState[b][Math.abs(max-i2)][r]!==\" \") {\r\n                                        this.gameState[b][Math.abs(max-i)][r] = this.gameState[b][Math.abs(max-i2)][r]\r\n                                        this.gameState[b][Math.abs(max-i2)][r] = \" \"\r\n\r\n                                        i += i2\r\n                                    }\r\n\r\n                                    i2++\r\n                                }\r\n                                break everyColumn\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                break\r\n        }\r\n\r\n        this.board.render(this.gameState)\r\n        this.checkAll()\r\n    }\r\n\r\n    // Check the game status for all placed items (when the gravity is changed, and every item is potentially re-arranged)\r\n    // TODO, optimize this, as this is insanely inefficient\r\n    checkAll () {\r\n        let match = false\r\n        let player\r\n\r\n        for (let b=0; b<this.span; b++) {\r\n            for (let r=0; r<this.span; r++) {\r\n                for (let c=0; c<this.span; c++) {\r\n\r\n                    if (this.gameState[b][r][c] !== \" \") {\r\n                        match = match || this.isWinningMove(b, r, c, this.gameState[b][r][c])\r\n                        if (match) {\r\n                            player = this.gameState[b][r][c]\r\n                            break\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (match) {\r\n            playerNum.style.color = this.board.playerColours[player]\r\n            winsDisplay.style.display = \"inline-block\"\r\n        } else {\r\n            this.playerIndex = ++this.playerIndex % this.players.length\r\n            winsDisplay.style.display = \"none\"\r\n            playerNum.style.color = this.board.playerColours[this.playerIndex]\r\n        }\r\n    }\r\n\r\n}\r\n\r\ntypeof window!=\"undefined\" && (window.GameLogic = GameLogic)\r\nexports.GameLogic = GameLogic\r\n\"use strict\"\r\n\r\nclass GamePlayer {// eslint-disable-line\r\n\r\n    constructor (type, playerIndex, game) {\r\n\r\n        console.log(`new ${type} player: ${playerIndex}`)\r\n\r\n        this.type = type\r\n        this.game = game // Two way binding\r\n        this.playerIndex = playerIndex\r\n    }\r\n\r\n    clearLastState () {\r\n        for (let b=0; b<this.game.span; b++) {\r\n            for (let r=0; r<this.game.span; r++) {\r\n                for (let c=0; c<this.game.span; c++) {\r\n                    this.lastState[b][r][c] = \" \"\r\n                }\r\n            }\r\n        }\r\n        this.lastMove = undefined\r\n    }\r\n\r\n    pickMove (gameState) {\r\n\r\n        if (this.type != \"AI\") return\r\n\r\n        fetch(\"./getAIMove\", {\r\n            method: \"post\",\r\n            body: JSON.stringify({gameState})\r\n        })\r\n        .then(r => r.json())\r\n        .then(({move}) => {\r\n            const [b, r, c] = move\r\n            this.game.makeMove(this.playerIndex, b, r, c)\r\n        })\r\n    }\r\n\r\n    reward (value, gameState) {\r\n\r\n        if (this.type != \"AI\") return\r\n\r\n        fetch(\"./rewardAI\", {\r\n            method: \"post\",\r\n            body: JSON.stringify({value, gameState})\r\n        })\r\n    }\r\n\r\n}\r\n\r\ntypeof window!=\"undefined\" && (window.GamePlayer = GamePlayer)\r\nexports.GamePlayer = GamePlayer\n//# sourceMappingURL=game.concat.js.map"]}