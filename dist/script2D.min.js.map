{"version":3,"sources":["../dev/script2D.js"],"names":["ws","roomNameValue","winnerWinnerChickenDinner","e","turnPanel","classList","remove","style","display","winPanel","innerText","game","players","detail","name","noChickenDinner","connectWebSockets","roomName","WebSocket","addEventListener","message","data","JSON","parse","console","log","type","shiftGravity","direction","player","playerIndex","b","r","c","makeMove","send","stringify","userId","username","room","getGameState","getURLParameter","decodeURIComponent","RegExp","exec","location","search","replace","sendMove","gameState","setPlayerLabels","sendState","saveGameState","fetch","method","body","headers","Accept","Content-Type","then","res","json","board","render","currentTurn","nextPlayer","length","nextTurn","setupPlayersTags","htmlToPut","forEach","playerColours","toUpperCase","playersInGame","innerHTML","window","getParameters","parameters","parametersString","substring","split","p","k","v","rotation","mouseIsDown","resetButton","content","g","span","GameLogic","gravityEnabled","gameBoard","GameBoard","parseInt","appendChild","boardElement","roomNameTitle","click","hoveredObject","clickedObject","arrowModels","arrowNames","rotations","x","y","z","positions","scene","THREE","Scene","camera","PerspectiveCamera","position","renderer","WebGLRenderer","alpha","antialias","setPixelRatio","devicePixelRatio","setSize","domElement","id","arrowsContainer","loader","ObjectLoader","raycaster","Raycaster","mouse","Vector2","light","DirectionalLight","set","normalize","add","a","load","model","Math","PI","children","material","emissive","setHex","push","arrowIndex","requestAnimationFrame","lookAt","updateMatrixWorld","setFromCamera","intersects","intersectObjects","object","toLowerCase","startsWith","parent","document","cursor","arrow","setRotation","sin","cos","this","rotate","event","sizeY","target","height","sizeX","width","offsetX","offsetY","arrowsCanvas","rendererDomElement","deltaY","rotationValue","code","toggleExploded","innerWidth","innerHeight","aspect","updateProjectionMatrix","initArrows"],"mappings":"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","file":"script2D.min.js","sourcesContent":["\"use strict\"\n\nlet ws\nlet roomNameValue\n\nwindow.getParameters = () => {\n\n    const parameters = {}\n\n    // Pull query parameters from url\n    const parametersString = location.search.substring(1)\n\n    if (parametersString.length) {\n        parametersString.split(\"&\").forEach(p => {\n            const [k,v] =  p.split(\"=\")\n            parameters[k] = v\n        })\n    }\n\n    return parameters\n}\n\nwindow.addEventListener(\"load\", () => {\n\n    // let isRotating = false\n    let rotation = 45\n    let mouseIsDown = false\n    // let isRotatingTimeout\n\n    resetButton.addEventListener(\"click\", () => {\n        content.innerHTML = \"\"\n\n        const {g, span, p} = getParameters()\n\n        window.game = new GameLogic({\n            gravityEnabled: !g || g==\"1\",\n            gameBoard: GameBoard,\n            span: parseInt(span) || 3,\n            players: parseInt(p) || 2\n            // isTraining: false,\n            // aiOpponent: aiOpponentCheckbox.checked,\n            // isMultiplayer: false\n        })\n        content.appendChild(game.board.boardElement)\n\n        roomNameValue = getURLParameter(\"roomName\")\n\n        if (roomNameValue !== \"\") {\n            connectWebSockets(roomNameValue)\n            roomNameTitle.innerText = roomNameValue\n        }\n        setPlayerLabels()\n        setupPlayersTags()\n    })\n    resetButton.click()\n\n\n\n    // Arrows stuff\n    const initArrows = () => {\n\n        let hoveredObject\n        let clickedObject\n        const WHITE = 0xaaaaaa\n        const YELLOW = 0xaaaa00\n        const CYAN = 0x00aaaa\n        const arrowModels = []\n        const arrowNames = [\"left\", \"right\", \"up\", \"down\", \"forward\", \"backward\"]\n        const rotations = [\n            {x: 0.25, y: 0.0, z: 0}, // left\n            {x: 0.25, y: 0.50, z: 0}, // right\n            {x: 0.25, y: 0.75, z: 0}, // up\n            {x: 0.25, y: 0.25, z: 0}, // down\n            {x: 0.25, y: 0.50, z: 0.25}, // forward\n            {x: 0.25, y: 0.50, z: 0.75} // backward\n        ]\n        const positions = [\n            {x: -0.125, y: 0, z: 0}, // left\n            {x: 0.125, y: 0, z: 0}, // right\n            {x: 0, y: 0.1, z: 0}, // up\n            {x: 0, y: -0.1, z: 0}, // down\n            {x: 0, y: 0, z: -0.125}, // forward\n            {x: 0, y: 0, z: 0.125} // backward\n        ]\n\n        const scene = new THREE.Scene()\n        const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000)\n        camera.position.z = 4\n        camera.position.y = 2\n        const renderer = new THREE.WebGLRenderer({alpha: true, antialias: true})\n        renderer.setPixelRatio( window.devicePixelRatio )\n        renderer.setSize(400, 400)\n        renderer.domElement.id = \"arrowsCanvas\"\n        arrowsContainer.appendChild(renderer.domElement)\n\n        const loader = new THREE.ObjectLoader()\n        const raycaster = new THREE.Raycaster()\n        const mouse = new THREE.Vector2()\n        const light = new THREE.DirectionalLight( 0xffffff, 0.5 )\n        light.position.set( 0, 1, 0 ).normalize()\n        scene.add(light)\n\n        for (let a=0; a<6; a++) {\n            loader.load(\"arrows\", model => {\n\n                model.position.x = positions[a].x * 2 * Math.PI\n                model.position.y = positions[a].y * 2 * Math.PI\n                model.position.z = positions[a].z * 2 * Math.PI\n\n                model.rotation.x = rotations[a].x * 2 * Math.PI\n                model.rotation.y = rotations[a].y * 2 * Math.PI\n                model.rotation.z = rotations[a].z * 2 * Math.PI\n\n                model.children.forEach(c => {\n                    if (a==3) {\n                        c.material.emissive.setHex(CYAN)\n                        clickedObject = model\n                    } else {\n                        c.material.emissive.setHex(WHITE)\n                    }\n                })\n\n                arrowModels.push(model)\n                model.data = {arrowIndex: a}\n                scene.add(model)\n            })\n        }\n\n        const render = () => {\n            requestAnimationFrame(render)\n            camera.lookAt(scene.position)\n\n            // const vector = new THREE.Vector3(mouse.x, mouse.y, 1)\n            camera.updateMatrixWorld()\n            raycaster.setFromCamera( mouse, camera )\n\n            const intersects = raycaster.intersectObjects(scene.children, true)\n\n            if (intersects.length) {\n\n                hoveredObject = intersects[0].object.name.toLowerCase().startsWith(\"box\") ? intersects[0].object.parent : intersects[0].object\n\n                document.body.style.cursor = \"pointer\"\n\n                if (hoveredObject == clickedObject) {\n                    // do nothing\n                } else {\n\n                    if (mouseIsDown) {\n                        if (clickedObject) {\n                            // Clear old one\n                            clickedObject.children.forEach(c => c.material.emissive.setHex(WHITE))\n                        }\n\n                        // Set new one to cyan\n                        hoveredObject.children.forEach(c => c.material.emissive.setHex(CYAN))\n                        clickedObject = hoveredObject\n                        console.log(\"clicked\", arrowNames[clickedObject.data.arrowIndex])\n                        if (ws){\n                            ws.send(JSON.stringify({\n                                direction: arrowNames[clickedObject.data.arrowIndex],\n                                userId: \"1234\",\n                                username: \"rob\",\n                                type: \"text\",\n                                room: roomNameValue,\n                                type: \"gravity\"\n                            }))\n\n                        } else {\n                            game.shiftGravity(arrowNames[clickedObject.data.arrowIndex])\n                        }\n                    } else {\n                        // Hovering over non clicked item without the mouse down\n                        arrowModels.forEach(arrow => {\n                            if (arrow != clickedObject) {\n                                arrow.children.forEach(c => c.material.emissive.setHex(WHITE))\n                            }\n                        })\n\n                        if (hoveredObject != clickedObject) {\n                            hoveredObject.children.forEach(c => c.material.emissive.setHex(YELLOW))\n                        }\n                    }\n                }\n\n            } else {\n                document.body.style.cursor = \"default\"\n                if (arrowModels) {\n                    arrowModels.forEach(arrow => {\n\n                        if (arrow != clickedObject) {\n                            arrow.children.forEach(c => c.material.emissive.setHex(WHITE))\n                        }\n                    })\n                }\n                hoveredObject = null\n            }\n            renderer.render(scene, camera)\n        }\n\n        render()\n\n        const setRotation = rotation => {\n            camera.position.x = Math.sin(rotation*Math.PI/180) * 3\n            camera.position.z = Math.cos(rotation*Math.PI/180) * 3\n            this.game.board.rotation = rotation\n            this.game.board.rotate()\n        }\n        setRotation(rotation=-45)\n\n        renderer.domElement.addEventListener(\"mousemove\", event => {\n            const sizeY = event.target.height\n            const sizeX = event.target.width\n            mouse.x = event.offsetX / sizeX * 2 - 1\n            mouse.y = -event.offsetY / sizeY * 2 + 1\n        }, false)\n\n        document.addEventListener(\"mousedown\", event => {\n            if (event.target == arrowsCanvas) {\n                mouseIsDown = true\n            } else if (event.target == rendererDomElement) {\n                game.board.mouseIsDown = true\n            }\n        })\n\n        document.addEventListener(\"mouseup\", () => {\n            mouseIsDown = false\n            game.board.mouseIsDown = false\n        })\n\n        document.addEventListener(\"click\", () => {\n            mouseIsDown = false\n            game.board.mouseIsDown = false\n        })\n\n        window.addEventListener(\"wheel\", ({deltaY}) => {\n            game.board.rotationValue += (deltaY > 0 ? 1 : -1) * 5\n            game.board.rotate()\n\n            rotation = (rotation + (deltaY > 0 ? 1 : -1) * 5) % 360\n            setRotation(rotation)\n        })\n\n\n        window.addEventListener(\"keydown\", e => {\n            if (e.code == \"Space\") {\n                game.board.toggleExploded()\n            }\n        })\n\n        // Resize the rendered element on window resize\n        window.addEventListener(\"resize\", () => {\n            game.board.renderer.setSize(window.innerWidth-100, window.innerHeight-200)\n            game.board.camera.aspect = window.innerWidth / window.innerHeight\n            game.board.camera.updateProjectionMatrix()\n        })\n    }\n    initArrows()\n\n    window.addEventListener(\"T^3Win\", winnerWinnerChickenDinner)\n    window.addEventListener(\"T^3Tie\", noChickenDinner)\n})\n\nfunction  winnerWinnerChickenDinner(e) {\n    turnPanel.classList.remove(\"d-flex\")\n    turnPanel.style.display = \"none\"\n    winPanel.style.display = \"block\"\n    winPanel.innerText = game.players[e.detail].name + \" Winns!\"\n\n}\nfunction  noChickenDinner(e) {\n    turnPanel.classList.remove(\"d-flex\")\n    turnPanel.style.display = \"none\"\n    winPanel.style.display = \"block\"\n    winPanel.innerText = game.players[e.detail].name + \" Caused a tie!\"\n\n}\n\nfunction connectWebSockets(roomName) {\n    ws =  new WebSocket(\"ws://vrscrible.localhost:8000/\" + roomName)\n\n    ws.addEventListener(\"message\", (message) => {\n        const data = JSON.parse(message.data)\n        console.log(data)\n\n        if (data.type === \"gravity\") {\n            game.shiftGravity(data.direction)\n\n        } else if (data.type === \"move\") {\n\n            const player = data.playerIndex\n            const {b, r, c} = data\n            console.log(player, b, r, c)\n            game.makeMove(player, b, r, c)\n        }\n    })\n\n    ws.addEventListener(\"open\", () => {\n        console.log(\"connect ws\")\n        console.log(roomName)\n        ws.send(JSON.stringify({userId: \"1234\", username: \"rob\", type: \"setUp\", room: roomName }))\n\n        getGameState(roomName)\n    })\n}\n\nfunction getURLParameter(name) {\n    // https://stackoverflow.com/questions/11582512/how-to-get-url-parameters-with-javascript\n    return decodeURIComponent((new RegExp(\"[?|&]\" + name + \"=\" + \"([^&;]+?)(&|#|;|$)\").exec(location.search) || [null, \"\"])[1].replace(/\\+/g, \"%20\")) || null\n}\n\nfunction sendMove(playerIndex, b, r, c, gameState) {\n    if (ws){\n        ws.send(JSON.stringify({\n            playerIndex: playerIndex,\n            b: b,\n            r: r,\n            c: c,\n            userId: \"1234\",\n            username: \"rob\",\n            room: roomNameValue,\n            type: \"move\",\n            gameState: gameState\n        }))\n    }\n    setPlayerLabels()\n}\n\nfunction sendState(gameState) {\n    if (ws){\n        ws.send(JSON.stringify({\n            room: roomNameValue,\n            type: \"state\",\n            gameState: gameState\n        }))\n    }\n}\n\nfunction saveGameState(roomName, gameState) {\n    fetch(\"./saveGameState\", {\n        method: \"post\",\n        body: JSON.stringify({roomName: roomName, gameState: gameState})\n    })\n}\n\nfunction getGameState(roomName) {\n\n    fetch(\"./getGameState?roomName=\" + roomName, {\n        method: \"get\",\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }\n    }).then(res => res.json())\n    .then(data => {\n        if (data.gameState !== null){\n            game.board.render(data.gameState)\n            game.gameState  = data.gameState\n        }\n    })\n\n}\n\nfunction setPlayerLabels(){\n    currentTurn.innerText =  game.players[game.playerIndex].name\n    const nextPlayer = game.playerIndex == game.players.length -  1 ? 0 : game.playerIndex + 1\n    nextTurn.innerText = game.players[nextPlayer].name\n}\n\nfunction setupPlayersTags() {\n    let htmlToPut = \"\"\n    game.players.forEach(player =>{\n        htmlToPut += `\n                              <!-- /.player -->\n                                <li class=\"player\">\n                                    <ul class=\"list-unstlyed\">\n                                        <li class=\"player-colour\" data-colour=\"green\">${game.board.playerColours[player.playerIndex].toUpperCase()}</li>\n                                        <!-- /.player-colour -->\n                                        <li class=\"player-name\">${player.name}:</li>\n                                        <!-- /.player-name -->\n                                        <li class=\"player-score\"></li>\n                                        <!-- /.player-score -->\n                                    </ul>\n                                </li> `\n    })\n    playersInGame.innerHTML = htmlToPut\n}"]}