{"version":3,"sources":["../dev/script2D.js"],"names":["ws","roomNameValue","connectWebSockets","roomName","WebSocket","addEventListener","message","data","JSON","parse","console","log","type","game","shiftGravity","direction","player","playerIndex","b","r","c","makeMove","send","stringify","userId","username","room","getGameState","getURLParameter","name","decodeURIComponent","RegExp","exec","location","search","replace","sendMove","gameState","sendState","saveGameState","fetch","method","body","headers","Accept","Content-Type","then","res","json","window","getParameters","parameters","parametersString","substring","length","split","forEach","p","k","v","rotation","mouseIsDown","resetButton","content","innerHTML","g","span","GameLogic","gravityEnabled","gameBoard","GameBoard","parseInt","players","appendChild","board","boardElement","roomNameTitle","innerText","click","hoveredObject","clickedObject","arrowModels","arrowNames","rotations","x","y","z","positions","scene","THREE","Scene","camera","PerspectiveCamera","position","renderer","WebGLRenderer","alpha","antialias","setPixelRatio","devicePixelRatio","setSize","domElement","id","arrowsContainer","loader","ObjectLoader","raycaster","Raycaster","mouse","Vector2","light","DirectionalLight","set","normalize","add","a","load","model","Math","PI","children","material","emissive","setHex","push","arrowIndex","render","requestAnimationFrame","lookAt","updateMatrixWorld","setFromCamera","intersects","intersectObjects","object","toLowerCase","startsWith","parent","document","style","cursor","arrow","setRotation","sin","cos","this","rotate","event","sizeY","target","height","sizeX","width","offsetX","offsetY","arrowsCanvas","rendererDomElement","deltaY","rotationValue","e","code","toggleExploded","initArrows","trainAI","epochs","epsilon"],"mappings":"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","file":"script2D.min.js","sourcesContent":["\"use strict\"\r\n\r\nlet ws\r\nlet roomNameValue\r\n\r\nwindow.getParameters = () => {\r\n\r\n    const parameters = {}\r\n\r\n    // Pull query parameters from url\r\n    const parametersString = location.search.substring(1)\r\n\r\n    if (parametersString.length) {\r\n        parametersString.split(\"&\").forEach(p => {\r\n            const [k,v] =  p.split(\"=\")\r\n            parameters[k] = v\r\n        })\r\n    }\r\n\r\n    return parameters\r\n}\r\n\r\nwindow.addEventListener(\"load\", () => {\r\n\r\n    // let isRotating = false\r\n    let rotation = 45\r\n    let mouseIsDown = false\r\n    // let isRotatingTimeout\r\n\r\n    resetButton.addEventListener(\"click\", () => {\r\n        content.innerHTML = \"\"\r\n\r\n        const {g, span, p} = getParameters()\r\n\r\n        window.game = new GameLogic({\r\n            gravityEnabled: !g || g==\"1\",\r\n            gameBoard: GameBoard,\r\n            span: parseInt(span) || 3,\r\n            players: parseInt(p) || 2\r\n            // isTraining: false,\r\n            // aiOpponent: aiOpponentCheckbox.checked,\r\n            // isMultiplayer: false\r\n        })\r\n        content.appendChild(game.board.boardElement)\r\n\r\n        roomNameValue = getURLParameter(\"roomName\")\r\n\r\n        if (roomNameValue !== \"\") {\r\n            connectWebSockets(roomNameValue)\r\n            roomNameTitle.innerText = roomNameValue\r\n        }\r\n    })\r\n    resetButton.click()\r\n\r\n\r\n\r\n    // Arrows stuff\r\n    const initArrows = () => {\r\n\r\n        let hoveredObject\r\n        let clickedObject\r\n        const WHITE = 0xaaaaaa\r\n        const YELLOW = 0xaaaa00\r\n        const CYAN = 0x00aaaa\r\n        const arrowModels = []\r\n        const arrowNames = [\"left\", \"right\", \"up\", \"down\", \"forward\", \"backward\"]\r\n        const rotations = [\r\n            {x: 0.25, y: 0.0, z: 0}, // left\r\n            {x: 0.25, y: 0.50, z: 0}, // right\r\n            {x: 0.25, y: 0.75, z: 0}, // up\r\n            {x: 0.25, y: 0.25, z: 0}, // down\r\n            {x: 0.25, y: 0.50, z: 0.25}, // forward\r\n            {x: 0.25, y: 0.50, z: 0.75} // backward\r\n        ]\r\n        const positions = [\r\n            {x: -0.125, y: 0, z: 0}, // left\r\n            {x: 0.125, y: 0, z: 0}, // right\r\n            {x: 0, y: 0.1, z: 0}, // up\r\n            {x: 0, y: -0.1, z: 0}, // down\r\n            {x: 0, y: 0, z: -0.125}, // forward\r\n            {x: 0, y: 0, z: 0.125} // backward\r\n        ]\r\n\r\n        const scene = new THREE.Scene()\r\n        const camera = new THREE.PerspectiveCamera(75, 1, 0.1, 1000)\r\n        camera.position.z = 4\r\n        camera.position.y = 2\r\n        const renderer = new THREE.WebGLRenderer({alpha: true, antialias: true})\r\n        renderer.setPixelRatio( window.devicePixelRatio )\r\n        renderer.setSize(400, 400)\r\n        renderer.domElement.id = \"arrowsCanvas\"\r\n        arrowsContainer.appendChild(renderer.domElement)\r\n\r\n        const loader = new THREE.ObjectLoader()\r\n        const raycaster = new THREE.Raycaster()\r\n        const mouse = new THREE.Vector2()\r\n        const light = new THREE.DirectionalLight( 0xffffff, 0.5 )\r\n        light.position.set( 0, 1, 0 ).normalize()\r\n        scene.add(light)\r\n\r\n        for (let a=0; a<6; a++) {\r\n            loader.load(\"lib/arrow.json\", model => {\r\n\r\n                model.position.x = positions[a].x * 2 * Math.PI\r\n                model.position.y = positions[a].y * 2 * Math.PI\r\n                model.position.z = positions[a].z * 2 * Math.PI\r\n\r\n                model.rotation.x = rotations[a].x * 2 * Math.PI\r\n                model.rotation.y = rotations[a].y * 2 * Math.PI\r\n                model.rotation.z = rotations[a].z * 2 * Math.PI\r\n\r\n                model.children.forEach(c => {\r\n                    if (a==3) {\r\n                        c.material.emissive.setHex(CYAN)\r\n                        clickedObject = model\r\n                    } else {\r\n                        c.material.emissive.setHex(WHITE)\r\n                    }\r\n                })\r\n\r\n                arrowModels.push(model)\r\n                model.data = {arrowIndex: a}\r\n                scene.add(model)\r\n            })\r\n        }\r\n\r\n        const render = () => {\r\n            requestAnimationFrame(render)\r\n            camera.lookAt(scene.position)\r\n\r\n            // const vector = new THREE.Vector3(mouse.x, mouse.y, 1)\r\n            camera.updateMatrixWorld()\r\n            raycaster.setFromCamera( mouse, camera )\r\n\r\n            const intersects = raycaster.intersectObjects(scene.children, true)\r\n\r\n            if (intersects.length) {\r\n\r\n                hoveredObject = intersects[0].object.name.toLowerCase().startsWith(\"box\") ? intersects[0].object.parent : intersects[0].object\r\n\r\n                document.body.style.cursor = \"pointer\"\r\n\r\n                if (hoveredObject == clickedObject) {\r\n                    // do nothing\r\n                } else {\r\n\r\n                    if (mouseIsDown) {\r\n                        if (clickedObject) {\r\n                            // Clear old one\r\n                            clickedObject.children.forEach(c => c.material.emissive.setHex(WHITE))\r\n                        }\r\n\r\n                        // Set new one to cyan\r\n                        hoveredObject.children.forEach(c => c.material.emissive.setHex(CYAN))\r\n                        clickedObject = hoveredObject\r\n                        console.log(\"clicked\", arrowNames[clickedObject.data.arrowIndex])\r\n                        if (ws){\r\n                            ws.send(JSON.stringify({\r\n                                direction: arrowNames[clickedObject.data.arrowIndex],\r\n                                userId: \"1234\",\r\n                                username: \"rob\",\r\n                                type: \"text\",\r\n                                room: roomNameValue,\r\n                                type: \"gravity\"\r\n                            }))\r\n\r\n                        } else {\r\n                            game.shiftGravity(arrowNames[clickedObject.data.arrowIndex])\r\n                        }\r\n                    } else {\r\n                        // Hovering over non clicked item without the mouse down\r\n                        arrowModels.forEach(arrow => {\r\n                            if (arrow != clickedObject) {\r\n                                arrow.children.forEach(c => c.material.emissive.setHex(WHITE))\r\n                            }\r\n                        })\r\n\r\n                        if (hoveredObject != clickedObject) {\r\n                            hoveredObject.children.forEach(c => c.material.emissive.setHex(YELLOW))\r\n                        }\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                document.body.style.cursor = \"default\"\r\n                if (arrowModels) {\r\n                    arrowModels.forEach(arrow => {\r\n\r\n                        if (arrow != clickedObject) {\r\n                            arrow.children.forEach(c => c.material.emissive.setHex(WHITE))\r\n                        }\r\n                    })\r\n                }\r\n                hoveredObject = null\r\n            }\r\n            renderer.render(scene, camera)\r\n        }\r\n\r\n        render()\r\n\r\n        const setRotation = rotation => {\r\n            camera.position.x = Math.sin(rotation*Math.PI/180) * 3\r\n            camera.position.z = Math.cos(rotation*Math.PI/180) * 3\r\n            this.game.board.rotation = rotation\r\n            this.game.board.rotate()\r\n        }\r\n        setRotation(rotation=-45)\r\n\r\n        renderer.domElement.addEventListener(\"mousemove\", event => {\r\n            const sizeY = event.target.height\r\n            const sizeX = event.target.width\r\n            mouse.x = event.offsetX / sizeX * 2 - 1\r\n            mouse.y = -event.offsetY / sizeY * 2 + 1\r\n        }, false)\r\n\r\n        document.addEventListener(\"mousedown\", event => {\r\n            if (event.target == arrowsCanvas) {\r\n                mouseIsDown = true\r\n            } else if (event.target == rendererDomElement) {\r\n                game.board.mouseIsDown = true\r\n            }\r\n        })\r\n\r\n        document.addEventListener(\"mouseup\", () => {\r\n            mouseIsDown = false\r\n            game.board.mouseIsDown = false\r\n        })\r\n\r\n        document.addEventListener(\"click\", () => {\r\n            mouseIsDown = false\r\n            game.board.mouseIsDown = false\r\n        })\r\n\r\n        window.addEventListener(\"wheel\", ({deltaY}) => {\r\n            // isRotating = true\r\n            game.board.rotationValue += (deltaY > 0 ? 1 : -1) * 5\r\n            game.board.rotate()\r\n            // isRotating = false\r\n\r\n            rotation = (rotation + (deltaY > 0 ? 1 : -1) * 5) % 360\r\n            setRotation(rotation)\r\n        })\r\n\r\n\r\n        window.addEventListener(\"keydown\", e => {\r\n            if (e.code == \"Space\") {\r\n                game.board.toggleExploded()\r\n            }\r\n        })\r\n    }\r\n    initArrows()\r\n\r\n\r\n    window.trainAI = () => {\r\n        game.gravityEnabled = false\r\n        game.trainAI({epochs: 600, epsilon: 0.5})\r\n    }\r\n\r\n})\r\n\r\nfunction connectWebSockets(roomName) {\r\n    ws =  new WebSocket(\"ws://vrscrible.localhost:8000/\" + roomName)\r\n\r\n    ws.addEventListener(\"message\", (message) => {\r\n        const data = JSON.parse(message.data)\r\n        console.log(data)\r\n\r\n        if (data.type === \"gravity\") {\r\n            game.shiftGravity(data.direction)\r\n\r\n        } else if (data.type === \"move\") {\r\n\r\n            const player = data.playerIndex\r\n            const {b, r, c} = data\r\n            console.log(player, b, r, c)\r\n            game.makeMove(player, b, r, c)\r\n        }\r\n    })\r\n\r\n    ws.addEventListener(\"open\", () => {\r\n        console.log(\"connect ws\")\r\n        console.log(roomName)\r\n        ws.send(JSON.stringify({userId: \"1234\", username: \"rob\", type: \"setUp\", room: roomName }))\r\n        \r\n        getGameState(roomName)\r\n    })\r\n}\r\n\r\nfunction getURLParameter(name) {\r\n    // https://stackoverflow.com/questions/11582512/how-to-get-url-parameters-with-javascript\r\n    return decodeURIComponent((new RegExp(\"[?|&]\" + name + \"=\" + \"([^&;]+?)(&|#|;|$)\").exec(location.search) || [null, \"\"])[1].replace(/\\+/g, \"%20\")) || null\r\n}\r\n\r\nfunction sendMove(playerIndex, b, r, c, gameState) {\r\n    if (ws){\r\n        ws.send(JSON.stringify({\r\n            playerIndex: playerIndex,\r\n            b: b,\r\n            r: r,\r\n            c: c,\r\n            userId: \"1234\",\r\n            username: \"rob\",\r\n            room: roomNameValue,\r\n            type: \"move\",\r\n            gameState: gameState\r\n        }))\r\n    }\r\n} \r\n\r\nfunction sendState(gameState) {\r\n    if (ws){\r\n        ws.send(JSON.stringify({\r\n            room: roomNameValue,\r\n            type: \"state\",\r\n            gameState: gameState\r\n        }))\r\n    }\r\n}\r\n\r\nfunction saveGameState(roomName, gameState) {\r\n    fetch(\"./saveGameState\", {\r\n        method: \"post\",\r\n        body: JSON.stringify({roomName: roomName, gameState: gameState})\r\n    })\r\n}\r\n\r\nfunction getGameState(roomName) {\r\n    fetch(\"./getGameState?roomName=\" + roomName, {\r\n        method: \"get\",\r\n        headers: {\r\n            \"Accept\": \"application/json\",\r\n            \"Content-Type\": \"application/json\"\r\n        }\r\n    }).then(res => res.json())\r\n    .then(data => {\r\n        //put logic here to setup game\r\n        console.log(data.gameState)\r\n        if (data.gameState !== null){\r\n        //game.board.render(data.gameState)\r\n          \r\n        }\r\n    })\r\n\r\n}"]}