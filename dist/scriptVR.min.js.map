{"version":3,"sources":["scriptVR.concat.js"],"names":["GameBoard","[object Object]","game","isVR","span","this","playerColours","rotation","heightOffset","BOX_WIDTH","SPREAD","Math","floor","SPACING","SPHERE_RADIUS","SPHERE_V_COUNT","OPACITY_ON","OPACITY_OFF","explodedMult","isLerpingBoxes","colours","RED","BLUE","GREEN","PURPLE","YELLOW","ORANGE","BLACK","CYAN","PINK","BRIGHTGREY","LIGHTGREY","DARKGREY","WHITE","previewColour","playerIndex","toUpperCase","previewSphereGeometry","THREE","SphereGeometry","previewSphereMaterial","MeshLambertMaterial","color","transparent","opacity","emissive","setHex","previewSphere","Mesh","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","raycaster","Raycaster","mouse","Vector2","renderer","WebGLRenderer","alpha","antialias","setPixelRatio","devicePixelRatio","setSize","domElement","id","boardElement","light","DirectionalLight","position","set","normalize","add","y","initBoards","renderLoop","rotate","addEventListener","event","sizeY","target","height","sizeX","width","x","offsetX","offsetY","highlightedBoxes","boxes","Array","map","spheres","b","r","c","addBox","geometry","BoxGeometry","material","box","z","data","origPos","colour","sphereGeometry","sphereMaterial","sphere","length","push","cube","incr","gravity","modifier","pos","gravityEnabled","axis","start","end","location","isLerping","newPos","abs","someSphereIsLerping","requestAnimationFrame","lerpBoxes","lerpSpheres","lookAt","updateMatrixWorld","render","setFromCamera","intersects","intersectObjects","children","hoveredObject","object","parent","clearHighlightedBoxes","highlightColumn","highlightRowY","highlightRowX","getPreviewPosition","mouseIsDown","isClicked","setTimeout","gameState","ws","sendMove","makeMove","board","row","col","player","nextPlayer","addSphere","undefined","setPreviewColour","index","arrowModel","arrowModels","filter","a","arrowIndex","clickedObject","forEach","resetBoard","Number","isNaN","parseInt","addPoint","remove","sin","PI","cos","exports","GamePlayer","type","name","console","log","lastState","lastMove","fetch","method","body","JSON","stringify","then","json","move","value","GameLogic","gameBoard","players","isTraining","isMultiplayer","aiOpponent","numPlayers","resetGame","directions","up","down","left","right","forward","backward","modifiers","random","p","pickMove","boardGameState","rowGameState","clearLastState","reward","applyGravityToMove","isWinningMove","pi","dispatchEvent","CustomEvent","detail","isFull","sendState","boardIndex","tileY","tileX","match","max","mid","every","ri","bi","counts","i","direction","i2","everyBoard","moveSphere","everyColumn","checkAll","VRGameBoard","super","arrowNames","items","loader","ObjectLoader","load","model","positions","rotations","document","style","cursor","highlightArrow","send","userId","username","room","roomNameValue","shiftGravity","arrow","winnerWinnerChickenDinner","e","winPanel","display","textAlign","innerText","noChickenDinner","connectWebSockets","roomName","WebSocket","message","parse","getGameState","getURLParameter","decodeURIComponent","RegExp","exec","search","replace","saveGameState","headers","Accept","Content-Type","res","getParameters","parameters","parametersString","substring","split","k","v","screen","keepAwake","appendChild","NoSleep","enable","href","includes","fullscreenEnabled","requestFullScreen","webkitFullscreenEnabled","webkitRequestFullScreen","mozFullScreenEnabled","mozRequestFullScreen","msFullScreenEnabled","msRequestFullScreen","vrDisplay","effect","VREffect","separation","navigator","getVRDisplays","displays","enterVRButton","classList","contains","usingVR","userAgent","requestPresent","source","StereoEffect","order","controls","OrbitControls","enablePan","enableZoom","setOrientationControls","VRControls","update","removeEventListener","g","loadTHREEjsItems","makeArrows","setRotation","deltaY","code","toggleExploded","getVideoFeedAttempts","getVideoFeed","mozGetUserMedia","video","facingMode","stream","src","URL","createObjectURL","err","alert","mediaDevices","getUserMedia","catch","webkitGetUserMedia","msGetUserMedia","createElement","autoplay","buffer","bufferC","getContext","lastX","lastY","newX","newY","foundWithinBounds","frameCounter","readCircle","drawImage","getImageData","avgX","avgY","counter","startR","startC","endR","endC","min","pixel","tempCursor","marginTop","leftM","marginLeft","moveCursor","t","aspect","updateProjectionMatrix"],"mappings":"AAAA,mBAEMA,UAEFC,YAAaC,KAAMC,MAEf,MAAMC,KAACA,MAAQF,KAEfG,KAAKC,eAAiB,OAAQ,MAAO,QAAS,SAAU,SAAU,SAAU,QAAS,OAAQ,OAAQ,YACrGD,KAAKE,UAAY,GACjBF,KAAKD,KAAOA,KACZC,KAAKH,KAAOA,KACZG,KAAKG,aAAe,EAGpBH,KAAKI,UAAY,GACjBJ,KAAKK,OAASC,KAAKC,MAAMP,KAAKD,KAAO,GACrCC,KAAKQ,QAAU,IACfR,KAAKS,cAAgB,GACrBT,KAAKU,eAAiB,GACtBV,KAAKW,WAAa,GAClBX,KAAKY,YAAc,IAEnBZ,KAAKa,aAAe,EACpBb,KAAKc,gBAAiB,EAEtBd,KAAKe,SACDC,IAAK,SACLC,KAAM,IACNC,MAAO,MACPC,OAAQ,QACRC,OAAQ,SACRC,OAAQ,SACRC,MAAO,EACPC,KAAM,MACNC,KAAM,SACNC,WAAY,SACZC,UAAW,SACXC,SAAU,QACVC,MAAO,UAIX,MAAMC,cAAgB7B,KAAKe,QAAQf,KAAKC,cAAcD,KAAKH,KAAKiC,aAAaC,eACvEC,sBAAwB,IAAIC,MAAMC,eAAelC,KAAKS,cAAeT,KAAKU,eAAgBV,KAAKU,gBAC/FyB,sBAAwB,IAAIF,MAAMG,qBAAqBC,MAAOR,cAAeS,aAAa,IAMhG,GALAH,sBAAsBI,QAAU,EAChCJ,sBAAsBK,SAASC,OAAOZ,eACtC7B,KAAK0C,cAAgB,IAAIT,MAAMU,KAAKX,sBAAuBG,uBAGvDrC,KAAM,OAEVE,KAAK4C,MAAQ,IAAIX,MAAMY,MACvB7C,KAAK8C,OAAS,IAAIb,MAAMc,kBAAkB,GAAIC,OAAOC,WAAaD,OAAOE,YAAa,GAAK,KAC3FlD,KAAKmD,UAAY,IAAIlB,MAAMmB,UAC3BpD,KAAKqD,MAAQ,IAAIpB,MAAMqB,QACvBtD,KAAKuD,SAAW,IAAItB,MAAMuB,eAAeC,OAAO,EAAMC,WAAW,IACjE1D,KAAKuD,SAASI,cAAcX,OAAOY,kBACnC5D,KAAKuD,SAASM,QAAQb,OAAOC,WAAW,IAAKD,OAAOE,YAAY,KAChElD,KAAKuD,SAASO,WAAWC,GAAK,qBAC9B/D,KAAKgE,aAAehE,KAAKuD,SAASO,WAElC,MAAMG,MAAQ,IAAIhC,MAAMiC,iBAAiBlE,KAAKe,QAAQW,UAAW,GACjEuC,MAAME,SAASC,IAAI,EAAG,EAAG,GAAGC,YAC5BrE,KAAK4C,MAAM0B,IAAIL,OAEfjE,KAAK8C,OAAOqB,SAASI,EAAI,EAEzBvE,KAAK4C,MAAM0B,IAAItE,KAAK0C,eAEpB1C,KAAKwE,aACLxE,KAAKyE,aACLzE,KAAK0E,SAEL1E,KAAKgE,aAAaW,iBAAiB,YAAaC,QAC5C,MAAMC,MAAQD,MAAME,OAAOC,OACrBC,MAAQJ,MAAME,OAAOG,MAC3BjF,KAAKqD,MAAM6B,EAAIN,MAAMO,QAAUH,MAAQ,EAAI,EAC3ChF,KAAKqD,MAAMkB,GAAKK,MAAMQ,QAAUP,MAAQ,EAAI,IAC7C,GAIPjF,aACII,KAAKqF,oBACLrF,KAAKsF,UAAY,IAAIC,MAAMvF,KAAKD,OAAOyF,IAAI,QAAU,IAAID,MAAMvF,KAAKD,OAAOyF,IAAI,QAAU,IAAID,MAAMvF,KAAKD,SACxGC,KAAKyF,YAAc,IAAIF,MAAMvF,KAAKD,OAAOyF,IAAI,QAAU,IAAID,MAAMvF,KAAKD,OAAOyF,IAAI,QAAU,IAAID,MAAMvF,KAAKD,SAG1G,IAAK,IAAI2F,EAAE,EAAGA,EAAE1F,KAAKD,KAAM2F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE3F,KAAKD,KAAM4F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE5F,KAAKD,KAAM6F,IACvB5F,KAAK6F,OAAOH,EAAGC,EAAGC,GAMlChG,OAAQ8F,EAAGC,EAAGC,GACV,MAAME,SAAW,IAAI7D,MAAM8D,YAAY/F,KAAKI,UAAWJ,KAAKI,UAAWJ,KAAKI,WACtE4F,SAAW,IAAI/D,MAAMG,qBAAqBC,MAAOrC,KAAKe,QAAQY,WACpEqE,SAASzD,QAAUvC,KAAKY,YACxBoF,SAAS1D,aAAc,EAEvB,MAAM2D,IAAM,IAAIhE,MAAMU,KAAKmD,SAAUE,UACrCC,IAAID,SAASxD,SAASC,OAAOzC,KAAKe,QAAQW,WAE1CuE,IAAI9B,SAASe,GAAKU,EAAI5F,KAAKK,QAAUL,KAAKI,UAAYJ,KAAKQ,QAC3DyF,IAAI9B,SAASI,GAAKmB,EAAI1F,KAAKK,QAAUL,KAAKI,UAAYJ,KAAKQ,QAAUR,KAAKG,aAC1E8F,IAAI9B,SAAS+B,GAAKP,EAAI3F,KAAKK,QAAUL,KAAKI,UAAYJ,KAAKQ,QAC3DyF,IAAIE,MAAQT,EAAAA,EAAGC,EAAAA,EAAGC,EAAAA,GAClBK,IAAIG,SACAlB,EAAGe,IAAI9B,SAASe,EAChBX,EAAG0B,IAAI9B,SAASI,EAChB2B,EAAGD,IAAI9B,SAAS+B,GAGpBlG,KAAK4C,MAAM0B,IAAI2B,KACfjG,KAAKsF,MAAMI,GAAGC,GAAGC,GAAKK,IAG1BrG,UAAW8F,EAAGC,EAAGC,EAAGS,QAChB,MAAMC,eAAiB,IAAIrE,MAAMC,eAAelC,KAAKS,cAAeT,KAAKU,eAAgBV,KAAKU,gBACxF6F,eAAiB,IAAItE,MAAMG,qBAAqBC,MAAOrC,KAAKe,QAAQsF,OAAOtE,iBAC3EyE,OAAS,IAAIvE,MAAMU,KAAK2D,eAAgBC,gBAC9CC,OAAOR,SAASxD,SAASC,OAAOzC,KAAKe,QAAQsF,OAAOtE,gBAEpDyE,OAAOrC,SAASe,GAAKU,EAAI5F,KAAKK,QAAUL,KAAKI,UAAYJ,KAAKQ,QAC9DgG,OAAOrC,SAASI,GAAKmB,EAAI1F,KAAKK,QAAUL,KAAKI,UAAYJ,KAAKQ,QAAUR,KAAKG,aAC7EqG,OAAOrC,SAAS+B,GAAKP,EAAI3F,KAAKK,QAAUL,KAAKI,UAAYJ,KAAKQ,QAC9DgG,OAAOJ,SACHlB,EAAGsB,OAAOrC,SAASe,EACnBX,EAAGiC,OAAOrC,SAASI,EACnB2B,EAAGM,OAAOrC,SAAS+B,GAIA,GAAnBlG,KAAKa,eACL2F,OAAOrC,SAASe,GAAKsB,OAAOJ,QAAQlB,EAAIlF,KAAKa,aAAe2F,OAAOrC,SAASe,EAC5EsB,OAAOrC,SAASI,GAAKiC,OAAOJ,QAAQ7B,EAAIvE,KAAKa,aAAe2F,OAAOrC,SAASI,EAC5EiC,OAAOrC,SAAS+B,GAAKM,OAAOJ,QAAQF,EAAIlG,KAAKa,aAAe2F,OAAOrC,SAAS+B,GAGhFlG,KAAKyF,QAAQC,GAAGC,GAAGC,GAAKY,OACxBxG,KAAK4C,MAAM0B,IAAIkC,QAGnB5G,wBACI,IAAK,IAAI8F,EAAE,EAAGA,EAAE1F,KAAKqF,iBAAiBoB,OAAQf,IAC1C1F,KAAKqF,iBAAiBK,GAAGM,SAASzD,QAAUvC,KAAKY,YACjDZ,KAAKqF,iBAAiBK,GAAGM,SAASxD,SAASC,OAAOzC,KAAKe,QAAQW,WAEnE1B,KAAKqF,oBACLrF,KAAK0C,cAAcsD,SAASzD,QAAU,EAG1C3C,iBAAiB+F,EAACA,EAACC,EAAEA,IACjB,IAAK,IAAIF,EAAE,EAAGA,EAAE1F,KAAKD,KAAM2F,IACvB1F,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGI,SAASzD,QAAUvC,KAAKW,WAC5CX,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQY,UAC1D3B,KAAKqF,iBAAiBqB,KAAK1G,KAAKsF,MAAMI,GAAGC,GAAGC,IAIpDhG,eAAe8F,EAACA,EAACC,EAAEA,IACf,IAAK,IAAIC,EAAE,EAAGA,EAAE5F,KAAKD,KAAM6F,IACvB5F,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGI,SAASzD,QAAUvC,KAAKW,WAC5CX,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQY,UAC1D3B,KAAKqF,iBAAiBqB,KAAK1G,KAAKsF,MAAMI,GAAGC,GAAGC,IAIpDhG,eAAe8F,EAACA,EAACE,EAAEA,IACf,IAAK,IAAID,EAAE,EAAGA,EAAE3F,KAAKD,KAAM4F,IACvB3F,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGI,SAASzD,QAAUvC,KAAKW,WAC5CX,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQY,UAC1D3B,KAAKqF,iBAAiBqB,KAAK1G,KAAKsF,MAAMI,GAAGC,GAAGC,IAIpDhG,mBAAoB+G,MAEhB,MAAMC,KAAO5G,KAAKH,KAAKgH,QAAQC,SACzBC,KACF7B,EAAIyB,KAAKP,QAAQlB,EACjBX,EAAIoC,KAAKP,QAAQ7B,EACjB2B,EAAIS,KAAKP,QAAQF,GAOrB,GAJAa,IAAIrB,EAAIiB,KAAKR,KAAKT,EAClBqB,IAAIpB,EAAIgB,KAAKR,KAAKR,EAClBoB,IAAInB,EAAIe,KAAKR,KAAKP,GAEb5F,KAAKH,KAAKmH,eACX,OAAOD,IAGX,OAAQ/G,KAAKH,KAAKgH,QAAQI,MAEtB,KAAK,EAED,GAAIjH,KAAKyF,SAAe,GAAPmB,KAAW5G,KAAKD,KAAK,EAAI,GAAG4G,KAAKR,KAAKR,GAAGgB,KAAKR,KAAKP,GAChE,OAAO,KAKX,IAFAmB,IAAIrB,GAAW,GAAPkB,KAAW,EAAI5G,KAAKD,KAAK,EAE1BC,KAAKyF,QAAQsB,IAAIrB,GAAGiB,KAAKR,KAAKR,GAAGgB,KAAKR,KAAKP,IAC9CmB,IAAIrB,GAAKkB,KAGbG,IAAIxC,GAAKwC,IAAIrB,EAAI1F,KAAKK,QAAUL,KAAKI,UAAYJ,KAAKQ,QAAUR,KAAKG,aACrE,MAGJ,KAAK,EAED,GAAIH,KAAKyF,QAAQkB,KAAKR,KAAKT,GAAGiB,KAAKR,KAAKR,IAAU,GAAPiB,KAAW5G,KAAKD,KAAK,EAAI,GAChE,OAAO,KAKX,IAFAgH,IAAInB,GAAW,GAAPgB,KAAW,EAAI5G,KAAKD,KAAK,EAE1BC,KAAKyF,QAAQkB,KAAKR,KAAKT,GAAGiB,KAAKR,KAAKR,GAAGoB,IAAInB,IAC9CmB,IAAInB,GAAKgB,KAGbG,IAAI7B,GAAK6B,IAAInB,EAAI5F,KAAKK,QAAUL,KAAKI,UAAYJ,KAAKQ,QACtD,MAEJ,KAAK,EAED,GAAIR,KAAKyF,QAAQkB,KAAKR,KAAKT,IAAU,GAAPkB,KAAW5G,KAAKD,KAAK,EAAI,GAAG4G,KAAKR,KAAKP,GAChE,OAAO,KAKX,IAFAmB,IAAIpB,GAAW,GAAPiB,KAAW,EAAI5G,KAAKD,KAAK,EAE1BC,KAAKyF,QAAQkB,KAAKR,KAAKT,GAAGqB,IAAIpB,GAAGgB,KAAKR,KAAKP,IAC9CmB,IAAIpB,GAAKiB,KAGbG,IAAIb,GAAKa,IAAIpB,EAAI3F,KAAKK,QAAUL,KAAKI,UAAYJ,KAAKQ,QAW9D,OAPuB,GAAnBR,KAAKa,eACLkG,IAAI7B,GAAKlF,KAAKa,aACdkG,IAAIxC,GAAKvE,KAAKa,aACdkG,IAAIb,GAAKlG,KAAKa,cAIdb,KAAKyF,QAAQsB,IAAIrB,GAAGqB,IAAIpB,GAAGoB,IAAInB,GACxB,KAGJmB,IAGXnH,WAAYsH,MAAOC,IAAKF,KAAMG,UAG1B,MAAMZ,OAASxG,KAAKyF,QAAQyB,MAAMxB,GAAGwB,MAAMvB,GAAGuB,MAAMtB,GACpDY,OAAOa,WAAY,EACnBb,OAAOc,UACPd,OAAOc,OAAOL,KAAOA,KACrBT,OAAOc,OAAOL,OAASG,SAAWpH,KAAKK,QAAUL,KAAKI,UAAYJ,KAAKQ,QAGvER,KAAKyF,QAAQ0B,IAAIzB,GAAGyB,IAAIxB,GAAGwB,IAAIvB,GAAKY,OACpCxG,KAAKyF,QAAQyB,MAAMxB,GAAGwB,MAAMvB,GAAGuB,MAAMtB,GAAK,KAI9ChG,YACI,GAAII,KAAKc,eACL,IAAK,IAAI4E,EAAE,EAAGA,EAAE1F,KAAKD,KAAM2F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE3F,KAAKD,KAAM4F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE5F,KAAKD,KAAM6F,IAEnBF,GAAG1F,KAAKK,QAAUsF,GAAG3F,KAAKK,QAAUuF,GAAG5F,KAAKK,QACzCC,KAAKiH,IAAIvH,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGzB,SAASe,EAAIlF,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGQ,QAAQlB,EAAIlF,KAAKa,cAAgB,MAElGb,KAAKc,gBAAiB,EACtBd,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGzB,SAASe,EAAIlF,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGQ,QAAQlB,EAAIlF,KAAKa,aACtEb,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGzB,SAASI,EAAIvE,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGQ,QAAQ7B,EAAIvE,KAAKa,aACtEb,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGzB,SAAS+B,EAAIlG,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGQ,QAAQF,EAAIlG,KAAKa,aAElEb,KAAKyF,QAAQC,GAAGC,GAAGC,KACnB5F,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGzB,SAASe,GAAKlF,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGQ,QAAQlB,EAAIlF,KAAKa,aAAeb,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGzB,SAASe,EACzHlF,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGzB,SAASI,GAAKvE,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGQ,QAAQ7B,EAAIvE,KAAKa,aAAeb,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGzB,SAASI,EACzHvE,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGzB,SAAS+B,GAAKlG,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGQ,QAAQF,EAAIlG,KAAKa,aAAeb,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGzB,SAAS+B,KAI7HlG,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGzB,SAASe,IAAMlF,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGQ,QAAQlB,EAAIlF,KAAKa,aAAeb,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGzB,SAASe,GAAK,GACzHlF,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGzB,SAASI,IAAMvE,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGQ,QAAQ7B,EAAIvE,KAAKa,aAAeb,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGzB,SAASI,GAAK,GACzHvE,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGzB,SAAS+B,IAAMlG,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGQ,QAAQF,EAAIlG,KAAKa,aAAeb,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGzB,SAAS+B,GAAK,GAErHlG,KAAKyF,QAAQC,GAAGC,GAAGC,KACnB5F,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGzB,SAASe,IAAMlF,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGQ,QAAQlB,EAAIlF,KAAKa,aAAeb,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGzB,SAASe,GAAK,GAC/HlF,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGzB,SAASI,IAAMvE,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGQ,QAAQ7B,EAAIvE,KAAKa,aAAeb,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGzB,SAASI,GAAK,GAC/HvE,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGzB,SAAS+B,IAAMlG,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGQ,QAAQF,EAAIlG,KAAKa,aAAeb,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGzB,SAAS+B,GAAK,KAU3JtG,cAEII,KAAKwH,qBAAsB,EAE3B,IAAK,IAAI9B,EAAE,EAAGA,EAAE1F,KAAKD,KAAM2F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE3F,KAAKD,KAAM4F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE5F,KAAKD,KAAM6F,IAEvB,GAAI5F,KAAKyF,QAAQC,GAAGC,GAAGC,IAAM5F,KAAKyF,QAAQC,GAAGC,GAAGC,GAAGyB,UAAW,CAE1DrH,KAAKwH,qBAAsB,EAE3B,MAAMhB,OAASxG,KAAKyF,QAAQC,GAAGC,GAAGC,IAC5BqB,KAACA,MAAQT,OAAOc,OAElBhH,KAAKiH,IAAIf,OAAOrC,SAAS8C,MAAQT,OAAOc,OAAOL,MAAQjH,KAAKa,cAAgB,IAC5E2F,OAAOrC,SAAS8C,QAAUT,OAAOc,OAAOL,MAAQjH,KAAKa,aAAe2F,OAAOrC,SAAS8C,OAAS,IAE7FT,OAAOa,WAAY,EACnBb,OAAOrC,SAAS8C,MAAQT,OAAOc,OAAOL,MAAQjH,KAAKa,aACnD2F,OAAOJ,QAAQa,MAAQT,OAAOc,OAAOL,QAQ7DrH,aAEI6H,sBAAsB,IAAMzH,KAAKyE,cACjCzE,KAAK0H,YACL1H,KAAK2H,cAEL3H,KAAK8C,OAAO8E,OAAO5H,KAAK4C,MAAMuB,UAC9BnE,KAAK8C,OAAO+E,oBAEZ7H,KAAKuD,SAASuE,OAAO9H,KAAK4C,MAAO5C,KAAK8C,QACtC9C,KAAKmD,UAAU4E,cAAc/H,KAAKqD,MAAOrD,KAAK8C,QAE9C,MAAMkF,WAAahI,KAAKmD,UAAU8E,iBAAiBjI,KAAK4C,MAAMsF,UAAU,GAExE,GAAIF,WAAWvB,QAGX,IAAIzG,KAAKmI,eAAkBnI,KAAKmI,eAAeH,WAAW,GAAGI,QAAUpI,KAAKmI,eAAeH,WAAW,GAAGI,OAAOC,QA2B5G,GAHArI,KAAKmI,cAAgBH,WAAW,GAAGI,OAAOjC,KAAO6B,WAAW,GAAGI,OAASJ,WAAW,GAAGI,OAAOC,OAC7FrI,KAAKsI,wBAEDtI,KAAKmI,cAAchC,OAGdnG,KAAKc,iBAAmBd,KAAKwH,oBAAqB,CAEnD,GAAIxH,KAAKH,KAAKmH,eACV,OAAQhH,KAAKH,KAAKgH,QAAQI,MACtB,KAAK,EACDjH,KAAKuI,gBAAgBvI,KAAKmI,cAAchC,MACxC,MACJ,KAAK,EACDnG,KAAKwI,cAAcxI,KAAKmI,cAAchC,MACtC,MACJ,KAAK,EACDnG,KAAKyI,cAAczI,KAAKmI,cAAchC,UAG3C,CAEH,MAAMT,EAACA,EAACC,EAAEA,EAACC,EAAEA,GAAK5F,KAAKmI,cAAchC,KACrCnG,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGI,SAASzD,QAAUvC,KAAKW,WAC5CX,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQY,UAC1D3B,KAAKqF,iBAAiBqB,KAAK1G,KAAKsF,MAAMI,GAAGC,GAAGC,IAIhD,MAAMmB,IAAM/G,KAAK0I,mBAAmB1I,KAAKmI,eAErCpB,MACA/G,KAAK0C,cAAcyB,SAASe,EAAI6B,IAAI7B,EACpClF,KAAK0C,cAAcyB,SAASI,EAAIwC,IAAIxC,EACpCvE,KAAK0C,cAAcyB,SAAS+B,EAAIa,IAAIb,EACpClG,KAAK0C,cAAcyD,MACfT,EAAGqB,IAAIrB,EACPC,EAAGoB,IAAIpB,EACPC,EAAGmB,IAAInB,GAEX5F,KAAK0C,cAAcsD,SAASzD,QAAU,UA9DlD,GAAIvC,KAAK2I,cAAgB3I,KAAKmI,cAAchC,KAAKyC,UAAW,CACxD5I,KAAKmI,cAAchC,KAAKyC,WAAY,EACpCC,WAAW,KACH7I,KAAKmI,gBACLnI,KAAKmI,cAAchC,KAAKyC,WAAY,IAEzC,KAEH,MAAMlD,EAACA,EAACC,EAAEA,EAACC,EAAEA,GAAK5F,KAAK0C,cAAcyD,KAEF,MAA/BnG,KAAKH,KAAKiJ,UAAUpD,GAAGC,GAAGC,KACtBmD,GACAC,SAAShJ,KAAKH,KAAKiC,YAAa4D,EAAGC,EAAGC,EAAG5F,KAAKH,KAAKiJ,WAEnD9I,KAAKH,KAAKoJ,SAASjJ,KAAKH,KAAKiC,YAAa4D,EAAGC,EAAGC,UA4DhE5F,KAAKsI,wBACLtI,KAAK0C,cAAcsD,SAASzD,QAAU,EAElCvC,KAAKmI,gBACDnI,KAAKmI,cAAcnC,UACnBhG,KAAKmI,cAAcnC,SAASxD,SAASC,OAAOzC,KAAKe,QAAQW,WACzD1B,KAAKmI,cAAcnC,SAASzD,QAAUvC,KAAKY,YAC3CZ,KAAKmI,cAAchC,KAAKyC,WAAY,GAC7B5I,KAAKmI,cAAcE,SAC1BrI,KAAKmI,cAAcE,OAAOrC,SAASxD,SAASC,OAAOzC,KAAKe,QAAQW,WAChE1B,KAAKmI,cAAcE,OAAOrC,SAASzD,QAAUvC,KAAKY,YAClDZ,KAAKmI,cAAcE,OAAOlC,KAAKyC,WAAY,IAInD5I,KAAKmI,cAAgB,KAI7BvI,iBACII,KAAKa,aAAkC,GAAnBb,KAAKa,aAAkB,EAAI,EAC/Cb,KAAK0C,cAAcsD,SAASzD,QAAU,EACtCvC,KAAKc,gBAAiB,EAG1BlB,SAAUsJ,MAAOC,IAAKC,IAAKC,OAAQC,YAC/BtJ,KAAKuJ,UAAUL,MAAOC,IAAKC,IAAKpJ,KAAKC,cAAcoJ,QAAQtH,eAC3D/B,KAAK0C,cAAcsD,SAASzD,QAAU,OAErBiH,IAAbF,YACAtJ,KAAKyJ,iBAAiBH,YAI9B1J,iBAAkBkC,aACd,MAAMD,cAAgB7B,KAAKe,QAAQf,KAAKC,cAAc6B,aAAaC,eACnE/B,KAAK0C,cAAcsD,SAAS3D,MAAMI,OAAOZ,eACzC7B,KAAK0C,cAAcsD,SAASxD,SAASC,OAAOZ,eAGhDjC,eAAgB8J,OACZ,MAAMC,WAAaC,YAAYC,OAAOC,GAAKA,EAAE3D,KAAK4D,YAAYL,OAG1DM,eACAA,cAAc9B,SAAS+B,QAAQrE,GAAKA,EAAEI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQU,aAIhFkI,WAAW,GAAGzB,SAAS+B,QAAQrE,GAAKA,EAAEI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQQ,OAC5EyI,cAAgBL,WAAW,GAG/B/J,OAAQkJ,WACJ9I,KAAKkK,aAEL,IAAK,IAAIxE,EAAE,EAAGA,EAAE1F,KAAKD,KAAM2F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE3F,KAAKD,KAAM4F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE5F,KAAKD,KAAM6F,IAClBuE,OAAOC,MAAMC,SAASvB,UAAUpD,GAAGC,GAAGC,MACvC5F,KAAKsK,SAAS5E,EAAGC,EAAGC,EAAGkD,UAAUpD,GAAGC,GAAGC,IAO3DhG,aACI,IAAK,IAAI8F,EAAE,EAAGA,EAAE1F,KAAKD,KAAM2F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE3F,KAAKD,KAAM4F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE5F,KAAKD,KAAM6F,IACnB5F,KAAKyF,QAAQC,GAAGC,GAAGC,KACnB5F,KAAK4C,MAAM2H,OAAOvK,KAAKyF,QAAQC,GAAGC,GAAGC,IACrC5F,KAAKyF,QAAQC,GAAGC,GAAGC,QAAK4D,GAO5C5J,SACII,KAAK8C,OAAOqB,SAASe,EAAI5E,KAAKkK,IAAIxK,KAAKE,SAASI,KAAKmK,GAAG,MAAyB,IAAjBzK,KAAKI,WAAmBJ,KAAKD,KAAO,EACpGC,KAAK8C,OAAOqB,SAAS+B,EAAI5F,KAAKoK,IAAI1K,KAAKE,SAASI,KAAKmK,GAAG,MAAyB,IAAjBzK,KAAKI,WAAmBJ,KAAKD,KAAO,GAK7F,oBAARiD,SAAwBA,OAAO2H,QAAU3H,OAAO2H,mBAGjDC,WAEFhL,YAAaiL,KAAM/I,YAAajC,KAAMiL,MAElCC,QAAQC,WAAWH,gBAAgB/I,eAEnC9B,KAAK6K,KAAOA,KACZ7K,KAAKH,KAAOA,KACZG,KAAK8B,YAAcA,YACnB9B,KAAK8K,KAAOA,KAGhBlL,iBACI,IAAK,IAAI8F,EAAE,EAAGA,EAAE1F,KAAKH,KAAKE,KAAM2F,IAC5B,IAAK,IAAIC,EAAE,EAAGA,EAAE3F,KAAKH,KAAKE,KAAM4F,IAC5B,IAAK,IAAIC,EAAE,EAAGA,EAAE5F,KAAKH,KAAKE,KAAM6F,IAC5B5F,KAAKiL,UAAUvF,GAAGC,GAAGC,GAAK,IAItC5F,KAAKkL,cAAW1B,EAGpB5J,SAAUkJ,WAEW,MAAb9I,KAAK6K,MAETM,MAAM,eACFC,OAAQ,OACRC,KAAMC,KAAKC,WAAWzC,UAAAA,cAEzB0C,KAAK7F,GAAKA,EAAE8F,QACZD,KAAK,EAAEE,KAAAA,SACJ,MAAOhG,EAAGC,EAAGC,GAAK8F,KAClB1L,KAAKH,KAAKoJ,SAASjJ,KAAK8B,YAAa4D,EAAGC,EAAGC,KAInDhG,OAAQ+L,MAAO7C,WAEM,MAAb9I,KAAK6K,MAETM,MAAM,cACFC,OAAQ,OACRC,KAAMC,KAAKC,WAAWI,MAAAA,MAAO7C,UAAAA,eAM1B,oBAAR9F,SAAwBA,OAAO2H,QAAU3H,OAAO2H,aACxC,oBAAR3H,SAAwBA,OAAO4H,WAAaA,YACnDD,QAAQC,WAAaA,iBAGfgB,UAEFhM,aAAakJ,UAACA,UAAS+C,UAAEA,UAAS7E,eAAEA,gBAAe,EAAIjH,KAAEA,KAAK,EAAC+L,QAAEA,QAAQ,EAACC,WAAEA,WAAUC,cAAEA,cAAaC,WAAEA,WAAUnM,KAAEA,UAE/GE,KAAK8L,WACL9L,KAAKgH,eAAiBA,eACtBhH,KAAKD,KAAOsK,SAAStK,MACrBC,KAAKkM,WAAa7B,SAASyB,SAC3B9L,KAAK+L,WAAaA,WAClB/L,KAAKiM,WAAaA,WAClBjM,KAAKgM,cAAgBA,cAErBhM,KAAK8I,UAAYA,WAAa9I,KAAKmM,YACnCnM,KAAK6G,SACDI,KAAM,EACNH,UAAW,GAEf9G,KAAKoM,YACDC,GAAI,EACJC,KAAM,EACNC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTC,SAAU,GAEd1M,KAAK2M,WACDN,GAAI,EACJC,MAAO,EACPC,MAAO,EACPC,MAAO,EACPC,SAAU,EACVC,SAAU,GAId1M,KAAK8B,YAAcxB,KAAKC,MAAMD,KAAKsM,SAASd,SAC5C9L,KAAKkJ,MAAQ,IAAI2C,UAAU7L,KAAMF,MAG7BE,KAAKiM,WACLjM,KAAK8L,QAAQpF,KAAK,IAAIkE,WAAW,KAAM,EAAG5K,KAAM,OAEhDA,KAAK8L,QAAQpF,KAAK,IAAIkE,WAAW,cAAe,OAAGpB,EAAW,aAIlE,IAAK,IAAIqD,EAAE,EAAGA,EAAEf,QAASe,IAGjB7M,KAAK+L,WACL/L,KAAK8L,QAAQpF,KAAK,IAAIkE,WAAW,KAAMiC,EAAG7M,OACnCgM,cACPhM,KAAK8L,QAAQpF,KAAK,IAAIkE,WAAW,eAAgBiC,OAAGrD,YAAqBqD,EAAG,MAE5E7M,KAAK8L,QAAQpF,KAAK,IAAIkE,WAAW,cAAeiC,OAAGrD,YAAqBqD,EAAI,MAKpF7M,KAAK8L,QAAQ9L,KAAK8B,aAAagL,SAAS9M,KAAK8I,WAIjDlJ,YAEI,MAAMkJ,aAEN,IAAK,IAAIpD,EAAE,EAAGA,EAAE1F,KAAKD,KAAM2F,IAAK,CAE5B,MAAMqH,kBAEN,IAAK,IAAIpH,EAAE,EAAGA,EAAE3F,KAAKD,KAAM4F,IAAK,CAE5B,MAAMqH,gBAEN,IAAK,IAAIpH,EAAE,EAAGA,EAAE5F,KAAKD,KAAM6F,IACvBoH,aAAatG,KAAK,KAGtBqG,eAAerG,KAAKsG,cAExBlE,UAAUpC,KAAKqG,gBAGf/M,KAAKkJ,OACLlJ,KAAKkJ,MAAMgB,aAKflK,KAAK8I,UAAYA,UAGjB,IAAK,IAAI+D,EAAE,EAAGA,EAAE7M,KAAK8L,QAAQrF,OAAQoG,IACL,MAAxB7M,KAAK8L,QAAQe,GAAGhC,MAChB7K,KAAK8L,QAAQe,GAAGI,iBAIxB,OAAOnE,UAGXlJ,SAAUiN,EAAGnH,EAAGC,EAAGC,GAEf,GAAIiH,GAAK7M,KAAK8B,aAAgB9B,KAAK+L,WAAnC,CAMA,GAAgC,MAA5B/L,KAAK8I,UAAUpD,GAAGC,GAAGC,GAWrB,OAVAmF,QAAQC,IAAI,gBAGZhL,KAAK8L,QAAQe,GAAGK,QAAQ,GAAIlN,KAAK8I,gBAGP,MAAtB9I,KAAK8L,QAAQe,GAAGhC,MAChB7K,KAAKmM,aAYb,IANCzG,EAAGC,EAAGC,GAAK5F,KAAKmN,mBAAmBzH,EAAGC,EAAGC,GAE1C5F,KAAK8I,UAAUpD,GAAGC,GAAGC,GAAKiH,EAC1B7M,KAAKkJ,MAAMoB,SAAS5E,EAAGC,EAAGC,EAAGiH,GAAI7M,KAAK8B,YAAY,GAAK9B,KAAK8L,QAAQrF,QAGhEzG,KAAKoN,cAAc1H,EAAGC,EAAGC,EAAGiH,GAK5B,OAJA7M,KAAK8L,QAAQe,GAAGK,OAAO,EAAGlN,KAAK8I,WAC/B9I,KAAK8L,QAAQ7B,QAAQ,CAACZ,OAAQgE,KAAOA,IAAIR,GAAKxD,OAAO6D,QAAQ,EAAGlN,KAAK8I,iBAErE9F,OAAOsK,cAAc,IAAIC,YAAY,UAAWC,OAAQX,KAK5D,GAAI7M,KAAKyN,SAIL,OAHA1C,QAAQC,IAAI,aACZhL,KAAK8L,QAAQ7B,QAAQZ,QAAUA,OAAO6D,OAAO,IAAMlN,KAAK8I,iBACxD9F,OAAOsK,cAAc,IAAIC,YAAY,UAAWC,OAAQX,KAM5D7M,KAAK8L,QAAQ7B,QAAQ,CAACZ,OAAQgE,KAAOA,IAAIR,GAAKxD,OAAO6D,OAAO,EAAGlN,KAAK8I,YAEpE9I,KAAK8B,cAAgB9B,KAAK8B,YAAc9B,KAAK8L,QAAQrF,OAMrDzG,KAAK8L,QAAQ9L,KAAK8B,aAAagL,SAAS9M,KAAK8I,WACzCC,IACA2E,UAAU1N,KAAK8I,gBArDfiC,QAAQC,IAAI,kBAyDpBpL,cAAe+N,WAAYC,MAAOC,MAAOxE,QAErC,IAAIyE,OAAQ,EACZ,MAAMC,IAAM/N,KAAK8I,UAAU,GAAGrC,OAAO,EAC/BuH,IAAM1N,KAAKC,MAAMwN,IAAI,GAgB3B,GAFAD,OAXAA,MAAQ9N,KAAK8I,UAAU6E,YAAYC,OAAOK,MAAM7E,KAAOA,MAAMC,SACrDrJ,KAAK8I,UAAU6E,YAAYM,MAAM9E,KAAOA,IAAI0E,SAASxE,UACpDwE,MAAQD,OAAO,GAAM,IAEtB5N,KAAK8I,UAAU6E,YAAYM,MAAM,CAAC9E,IAAK+E,KAAO/E,IAAI+E,MAAM7E,SAExDrJ,KAAK8I,UAAU6E,YAAYM,MAAM,CAAC9E,IAAK+E,KAAO/E,IAAI4E,IAAIG,MAAM7E,WAKnDrJ,KAAK8I,UAAUmF,MAAM/E,OAASA,MAAM0E,OAAOC,SAAWxE,QAE5D,OAAO,EAIlB,GAAIsE,aAAeK,KAAOL,aAAaK,MAAQJ,QAAQI,KAAOH,QAAQG,KAAM,CASxE,GAPAF,MAAQA,OACA9N,KAAK8I,UAAUmF,MAAM,CAAC/E,MAAOiF,KAAOjF,MAAM6E,IAAII,IAAIN,SAASxE,SAC3DrJ,KAAK8I,UAAUmF,MAAM,CAAC/E,MAAOiF,KAAOjF,MAAMiF,IAAIN,SAASxE,SACvDrJ,KAAK8I,UAAUmF,MAAM,CAAC/E,MAAOiF,KAAOjF,MAAM0E,OAAOG,IAAII,MAAM9E,SAC3DrJ,KAAK8I,UAAUmF,MAAM,CAAC/E,MAAOiF,KAAOjF,MAAM0E,OAAOO,MAAM9E,QAGpD,OAAO,EAGdrJ,KAAK8I,UAAUkF,KAAKA,KAAKA,OAAO3E,SAEhCyE,MAAQA,OACA9N,KAAK8I,UAAUmF,MAAM,CAAC/E,MAAOiF,KAAOjF,MAAMiF,IAAIA,MAAM9E,SACpDrJ,KAAK8I,UAAUmF,MAAM,CAAC/E,MAAOiF,KAAOjF,MAAM6E,IAAII,IAAIA,MAAM9E,SACxDrJ,KAAK8I,UAAUmF,MAAM,CAAC/E,MAAOiF,KAAOjF,MAAM6E,IAAII,IAAIJ,IAAII,MAAM9E,SAC5DrJ,KAAK8I,UAAUmF,MAAM,CAAC/E,MAAOiF,KAAOjF,MAAMiF,IAAIJ,IAAII,MAAM9E,SAIxE,OAAOyE,MAGXlO,SACI,IAAK,IAAI8F,EAAE,EAAGA,EAAE1F,KAAKD,KAAM2F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE3F,KAAKD,KAAM4F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE5F,KAAKD,KAAM6F,IACvB,GAAgC,MAA5B5F,KAAK8I,UAAUpD,GAAGC,GAAGC,GACrB,OAAO,EAMvB,OAAO,EAGXhG,mBAAoBsJ,MAAOC,IAAKC,KAE5B,IAAKpJ,KAAKgH,eAAgB,OAAQkC,MAAOC,IAAKC,KAE9C,IAAIgF,OAEJ,OAAQpO,KAAK6G,QAAQI,MAEjB,KAAK,EACDmH,QAAiC,GAAxBpO,KAAK6G,QAAQC,SAAeoC,MAAQlJ,KAAKD,KAAK,EAAEmJ,MAEzD,IAAK,IAAImF,EAAE,EAAGA,EAAED,QACkD,MAA1DpO,KAAK8I,UAAUI,MAAQlJ,KAAK6G,QAAQC,UAAUqC,KAAKC,KADnCiF,IAEhBnF,OAASlJ,KAAK6G,QAAQC,SAK9B,MAEJ,KAAK,EAEDsH,QAAiC,GAAxBpO,KAAK6G,QAAQC,SAAesC,IAAMpJ,KAAKD,KAAK,EAAEqJ,IAEvD,IAAK,IAAIiF,EAAE,EAAGA,EAAED,QACkD,MAA1DpO,KAAK8I,UAAUI,OAAOC,KAAKC,IAAMpJ,KAAK6G,QAAQC,UAD9BuH,IAEhBjF,KAAOpJ,KAAK6G,QAAQC,SAK5B,MAEJ,KAAK,EAEDsH,QAAiC,GAAxBpO,KAAK6G,QAAQC,SAAeqC,IAAMnJ,KAAKD,KAAK,EAAEoJ,IAEvD,IAAK,IAAIkF,EAAE,EAAGA,EAAED,QACkD,MAA1DpO,KAAK8I,UAAUI,OAAOC,IAAMnJ,KAAK6G,QAAQC,UAAUsC,KADnCiF,IAEhBlF,KAAOnJ,KAAK6G,QAAQC,SAQpC,OAAQoC,MAAOC,IAAKC,KAOxBxJ,aAAc0O,WAEVtO,KAAK6G,QAAQI,KAAOjH,KAAKoM,WAAWkC,WACpCtO,KAAK6G,QAAQC,SAAW9G,KAAK2M,UAAU2B,WAEvC,MAAMP,IAAMzN,KAAKiH,MAA6B,GAAxBvH,KAAK6G,QAAQC,SAAe9G,KAAKD,KAAK,EAAI,IAAIC,KAAKD,KAAK,IAE9E,OAAQC,KAAK6G,QAAQI,MAGjB,KAAK,EAED,IAAK,IAAItB,EAAE,EAAGA,EAAE3F,KAAKD,KAAM4F,IAEvB,IAAK,IAAIC,EAAE,EAAGA,EAAE5F,KAAKD,KAAM6F,IAAK,CAE5B,IAAI2I,GAAK,EAETC,WACA,IAAK,IAAIH,EAAE,EAAGA,EAAErO,KAAKD,KAAMsO,IAEvB,GAA4C,MAAxCrO,KAAK8I,UAAUxI,KAAKiH,IAAIwG,IAAIM,IAAI1I,GAAGC,GAAU,CAI7C,IAFA2I,GAAKF,EAAE,EAEAE,GAAGvO,KAAKD,MACPwO,GAAGvO,KAAKD,MAAQsO,EAAErO,KAAKD,MAAmD,MAA3CC,KAAK8I,UAAUxI,KAAKiH,IAAIwG,IAAIQ,KAAK5I,GAAGC,KAEnE5F,KAAKkJ,MAAMuF,YAAY/I,EAAGpF,KAAKiH,IAAIwG,IAAIQ,IAAK5I,EAAAA,EAAGC,EAAAA,IAAKF,EAAGpF,KAAKiH,IAAIwG,IAAIM,GAAI1I,EAAAA,EAAGC,EAAAA,GAAI,IAAKtF,KAAKiH,IAAIwG,IAAIM,IAEjGrO,KAAK8I,UAAUxI,KAAKiH,IAAIwG,IAAIM,IAAI1I,GAAGC,GAAK5F,KAAK8I,UAAUxI,KAAKiH,IAAIwG,IAAIQ,KAAK5I,GAAGC,GAC5E5F,KAAK8I,UAAUxI,KAAKiH,IAAIwG,IAAIQ,KAAK5I,GAAGC,GAAK,IAEzCyI,GAAKE,IAGTA,KAEJ,MAAMC,YAKtB,MAGJ,KAAK,EAGD,IAAK,IAAI9I,EAAE,EAAGA,EAAE1F,KAAKD,KAAM2F,IAEvB,IAAK,IAAIC,EAAE,EAAGA,EAAE3F,KAAKD,KAAM4F,IAAK,CAE5B,IAAI4I,GAAK,EAETG,YACA,IAAK,IAAIL,EAAE,EAAGA,EAAErO,KAAKD,KAAMsO,IAEvB,GAA4C,MAAxCrO,KAAK8I,UAAUpD,GAAGC,GAAGrF,KAAKiH,IAAIwG,IAAIM,IAAW,CAI7C,IAFAE,GAAKF,EAAE,EAEAE,GAAGvO,KAAKD,MACPwO,GAAGvO,KAAKD,MAAQsO,EAAErO,KAAKD,MAAiD,MAAzCC,KAAK8I,UAAUpD,GAAGC,GAAGrF,KAAKiH,IAAIwG,IAAIQ,OAEjEvO,KAAKkJ,MAAMuF,YAAY/I,EAAAA,EAAGC,EAAAA,EAAGC,EAAGtF,KAAKiH,IAAIwG,IAAIQ,MAAO7I,EAAAA,EAAGC,EAAAA,EAAGC,EAAGtF,KAAKiH,IAAIwG,IAAIM,IAAK,IAAK/N,KAAKiH,IAAIwG,IAAIM,IAEjGrO,KAAK8I,UAAUpD,GAAGC,GAAGrF,KAAKiH,IAAIwG,IAAIM,IAAMrO,KAAK8I,UAAUpD,GAAGC,GAAGrF,KAAKiH,IAAIwG,IAAIQ,KAC1EvO,KAAK8I,UAAUpD,GAAGC,GAAGrF,KAAKiH,IAAIwG,IAAIQ,KAAO,IAEzCF,GAAKE,IAGTA,KAEJ,MAAMG,aAOtB,MAGJ,KAAK,EAGD,IAAK,IAAIhJ,EAAE,EAAGA,EAAE1F,KAAKD,KAAM2F,IAEvB,IAAK,IAAIC,EAAE,EAAGA,EAAE3F,KAAKD,KAAM4F,IAAK,CAE5B,IAAI4I,GAAK,EAETG,YACA,IAAK,IAAIL,EAAE,EAAGA,EAAErO,KAAKD,KAAMsO,IAEvB,GAA4C,MAAxCrO,KAAK8I,UAAUpD,GAAGpF,KAAKiH,IAAIwG,IAAIM,IAAI1I,GAAU,CAI7C,IAFA4I,GAAKF,EAAE,EAEAE,GAAGvO,KAAKD,MACPwO,GAAGvO,KAAKD,MAAQsO,EAAErO,KAAKD,MAAiD,MAAzCC,KAAK8I,UAAUpD,GAAGpF,KAAKiH,IAAIwG,IAAIQ,KAAK5I,KAEnE3F,KAAKkJ,MAAMuF,YAAY/I,EAAAA,EAAGC,EAAGrF,KAAKiH,IAAIwG,IAAIQ,IAAK3I,EAAGD,IAAKD,EAAAA,EAAGC,EAAGrF,KAAKiH,IAAIwG,IAAIM,GAAIzI,EAAGD,GAAI,IAAKrF,KAAKiH,IAAIwG,IAAIM,IAEvGrO,KAAK8I,UAAUpD,GAAGpF,KAAKiH,IAAIwG,IAAIM,IAAI1I,GAAK3F,KAAK8I,UAAUpD,GAAGpF,KAAKiH,IAAIwG,IAAIQ,KAAK5I,GAC5E3F,KAAK8I,UAAUpD,GAAGpF,KAAKiH,IAAIwG,IAAIQ,KAAK5I,GAAK,IAEzC0I,GAAKE,IAGTA,KAEJ,MAAMG,cAS9B1O,KAAK2O,WAEL3O,KAAKkJ,MAAMZ,wBACXtI,KAAKkJ,MAAMO,iBAAiBzJ,KAAK8B,aAMrClC,WACI,IACIyJ,OADAyE,OAAQ,EAGZ,IAAK,IAAIpI,EAAE,EAAGA,EAAE1F,KAAKD,KAAM2F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE3F,KAAKD,KAAM4F,IACvB,IAAK,IAAIC,EAAE,EAAGA,EAAE5F,KAAKD,KAAM6F,IAEvB,GAAgC,MAA5B5F,KAAK8I,UAAUpD,GAAGC,GAAGC,KACrBkI,MAAQA,OAAS9N,KAAKoN,cAAc1H,EAAGC,EAAGC,EAAG5F,KAAK8I,UAAUpD,GAAGC,GAAGC,KACvD,CACPyD,OAASrJ,KAAK8I,UAAUpD,GAAGC,GAAGC,GAC9B,MAQpB,OAAOyD,QAeA,oBAARrG,SAAwBA,OAAO2H,QAAU3H,OAAO2H,aACxC,oBAAR3H,SAAwBA,OAAO4I,UAAYA,WAClDjB,QAAQiB,UAAYA,gBAGdgD,oBAAoBjP,UAEtBC,YAAaC,MACTgP,MAAMhP,MAAM,GAEZG,KAAK8O,YAAc,OAAQ,QAAS,KAAM,OAAQ,UAAW,YAC7D9O,KAAK4J,eAGThK,iBAAkBmP,OACd/O,KAAK4C,MAAQmM,MAAMnM,MACnB5C,KAAK8C,OAASiM,MAAMjM,OACpB9C,KAAKmD,UAAY4L,MAAM5L,UACvBnD,KAAKqD,MAAQ0L,MAAM1L,MACnBrD,KAAKuD,SAAWwL,MAAMxL,SACtBvD,KAAKgE,aAAe+K,MAAM/K,aAE1BhE,KAAKG,aAAe,GACpBH,KAAK4C,MAAM0B,IAAItE,KAAK0C,eAEpB1C,KAAKwE,aACLxE,KAAKyE,aACLzE,KAAK0E,SAEL1E,KAAKgE,aAAaW,iBAAiB,YAAaC,QAC5C,MAAMC,MAAQD,MAAME,OAAOC,OACrBC,MAAQJ,MAAME,OAAOG,MAC3BjF,KAAKqD,MAAM6B,EAAIN,MAAMO,QAAUH,MAAQ,EAAI,EAC3ChF,KAAKqD,MAAMkB,GAAKK,MAAMQ,QAAUP,MAAQ,EAAI,IAC7C,GAIPjF,aAEI,MAAMoP,OAAS,IAAI/M,MAAMgN,aAGzB,IAAKjP,KAAK4J,YAAYnD,OAClB,IAAK,IAAIqD,EAAE,EAAGA,EAAE,EAAGA,IACfkF,OAAOE,KAAK,SAAUC,QAElBA,MAAMhL,SAASe,EAAqB,EAAjBkK,UAAUtF,GAAG5E,EAAQ5E,KAAKmK,GAC7C0E,MAAMhL,SAASI,EAAqB,EAAjB6K,UAAUtF,GAAGvF,EAAQjE,KAAKmK,GAC7C0E,MAAMhL,SAAS+B,EAAqB,EAAjBkJ,UAAUtF,GAAG5D,EAAQ5F,KAAKmK,GAE7C0E,MAAMjP,SAASgF,EAAqB,EAAjBmK,UAAUvF,GAAG5E,EAAQ5E,KAAKmK,GAC7C0E,MAAMjP,SAASqE,EAAqB,EAAjB8K,UAAUvF,GAAGvF,EAAQjE,KAAKmK,GAC7C0E,MAAMjP,SAASgG,EAAqB,EAAjBmJ,UAAUvF,GAAG5D,EAAQ5F,KAAKmK,GAE7C0E,MAAMjH,SAAS+B,QAAQrE,IACZ,GAAHkE,GACAlE,EAAEI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQQ,MACxCvB,KAAKgK,cAAgBmF,OAErBvJ,EAAEI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQU,cAIhDzB,KAAK4J,YAAYlD,KAAKyI,OACtBA,MAAMhJ,MAAQ4D,WAAYD,GAC1B9J,KAAK4C,MAAM0B,IAAI6K,SAM/BvP,eAAgB8J,OAEZ,MAAMC,WAAa3J,KAAK4J,YAAYC,OAAOC,GAAKA,EAAE3D,KAAK4D,YAAYL,OAG/D1J,KAAKgK,eACLhK,KAAKgK,cAAc9B,SAAS+B,QAAQrE,GAAKA,EAAEI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQU,aAIrFkI,WAAW,GAAGzB,SAAS+B,QAAQrE,GAAKA,EAAEI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQQ,OAC5EvB,KAAKgK,cAAgBL,WAAW,GAGpC/J,aAEI6H,sBAAsB,IAAMzH,KAAKyE,cAEjCzE,KAAK0H,YACL1H,KAAK2H,cAEL,MAAMK,WAAahI,KAAKmD,UAAU8E,iBAAiBjI,KAAK4C,MAAMsF,UAAU,GAExE,GAAIF,WAAWvB,QAEX,GAAIzG,KAAKmI,eAA0C,SAAzBnI,KAAKmI,cAAc0C,KAEzCyE,SAASjE,KAAKkE,MAAMC,OAAS,UAEzBxP,KAAKmI,eAAiBnI,KAAKgK,gBAIvBhK,KAAK2I,aAEL3I,KAAKyP,eAAezP,KAAKmI,cAAchC,KAAK4D,YAE5CgB,QAAQC,IAAI,UAAWhL,KAAK8O,WAAW9O,KAAKgK,cAAc7D,KAAK4D,aAE3DhB,GACAA,GAAG2G,KAAKpE,KAAKC,WACT+C,UAAWtO,KAAK8O,WAAW9O,KAAKgK,cAAc7D,KAAK4D,YACnD4F,OAAQ,OACRC,SAAU,MACV/E,KAAM,OACNgF,KAAMC,cACNjF,KAAM,aAGV7K,KAAKH,KAAKkQ,aAAa/P,KAAK8O,WAAW9O,KAAKgK,cAAc7D,KAAK4D,eAKnE/J,KAAK4J,YAAYK,QAAQ+F,QACjBA,OAAShQ,KAAKgK,eACdgG,MAAM9H,SAAS+B,QAAQrE,GAAKA,EAAEI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQU,eAIxEzB,KAAKmI,eAAiBnI,KAAKgK,eAC3BhK,KAAKmI,cAAcD,SAAS+B,QAAQrE,GAAKA,EAAEI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQK,gBAS7F,IAAIpB,KAAKmI,eAAkBnI,KAAKmI,eAAeH,WAAW,GAAGI,QAAUpI,KAAKmI,eAAeH,WAAW,GAAGI,OAAOC,QA4B5G,GAHArI,KAAKmI,cAAgBH,WAAW,GAAGI,OAAOjC,KAAO6B,WAAW,GAAGI,OAASJ,WAAW,GAAGI,OAAOC,OAC7FrI,KAAKsI,wBAEDtI,KAAKmI,cAAchC,MAAiC,SAAzBnG,KAAKmI,cAAc0C,OAGzC7K,KAAKc,iBAAmBd,KAAKwH,oBAAqB,CAEnD,GAAIxH,KAAKH,KAAKmH,gBACV,GAAIhH,KAAKmI,cAAchC,KACnB,OAAQnG,KAAKH,KAAKgH,QAAQI,MACtB,KAAK,EACDjH,KAAKuI,gBAAgBvI,KAAKmI,cAAchC,MACxC,MACJ,KAAK,EACDnG,KAAKwI,cAAcxI,KAAKmI,cAAchC,MACtC,MACJ,KAAK,EACDnG,KAAKyI,cAAczI,KAAKmI,cAAchC,WAI/C,CAEH,MAAMT,EAACA,EAACC,EAAEA,EAACC,EAAEA,GAAK5F,KAAKmI,cAAchC,KACrCnG,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGI,SAASzD,QAAUvC,KAAKW,WAC5CX,KAAKsF,MAAMI,GAAGC,GAAGC,GAAGI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQY,UAC1D3B,KAAKqF,iBAAiBqB,KAAK1G,KAAKsF,MAAMI,GAAGC,GAAGC,IAIhD,MAAMmB,IAAM/G,KAAK0I,mBAAmB1I,KAAKmI,eAErCpB,MACA/G,KAAK0C,cAAcyB,SAASe,EAAI6B,IAAI7B,EACpClF,KAAK0C,cAAcyB,SAASI,EAAIwC,IAAIxC,EACpCvE,KAAK0C,cAAcyB,SAAS+B,EAAIa,IAAIb,EACpClG,KAAK0C,cAAcyD,MACfT,EAAGqB,IAAIrB,EACPC,EAAGoB,IAAIpB,EACPC,EAAGmB,IAAInB,GAEX5F,KAAK0C,cAAcsD,SAASzD,QAAU,UAhElD,GAAIvC,KAAK2I,cAAgB3I,KAAKmI,cAAchC,KAAKyC,UAAW,CACxD5I,KAAKmI,cAAchC,KAAKyC,WAAY,EACpCC,WAAW,KACH7I,KAAKmI,gBACLnI,KAAKmI,cAAchC,KAAKyC,WAAY,IAEzC,KAEH,MAAMlD,EAACA,EAACC,EAAEA,EAACC,EAAEA,GAAK5F,KAAK0C,cAAcyD,KAEF,MAA/BnG,KAAKH,KAAKiJ,UAAUpD,GAAGC,GAAGC,KACtBmD,GACAC,SAAShJ,KAAKH,KAAKiC,YAAa4D,EAAGC,EAAGC,EAAG5F,KAAKH,KAAKiJ,WAEnD9I,KAAKH,KAAKoJ,SAASjJ,KAAKH,KAAKiC,YAAa4D,EAAGC,EAAGC,UA+DhE5F,KAAKmI,eAA0C,SAAzBnI,KAAKmI,cAAc0C,MAEzCyE,SAASjE,KAAKkE,MAAMC,OAAS,UAEzBxP,KAAK4J,YAAYnD,QACjBzG,KAAK4J,YAAYK,QAAQ+F,QAEjBA,OAAShQ,KAAKgK,eACdgG,MAAM9H,SAAS+B,QAAQrE,GAAKA,EAAEI,SAASxD,SAASC,OAAOzC,KAAKe,QAAQU,iBAOhFzB,KAAKsI,wBACLtI,KAAK0C,cAAcsD,SAASzD,QAAU,EAElCvC,KAAKmI,gBACDnI,KAAKmI,cAAcnC,UACnBhG,KAAKmI,cAAcnC,SAASxD,SAASC,OAAOzC,KAAKe,QAAQW,WACzD1B,KAAKmI,cAAcnC,SAASzD,QAAUvC,KAAKY,YAC3CZ,KAAKmI,cAAchC,KAAKyC,WAAY,GAC7B5I,KAAKmI,cAAcE,QAAUrI,KAAKmI,cAAcE,OAAOrC,WAC9DhG,KAAKmI,cAAcE,OAAOrC,SAASxD,SAASC,OAAOzC,KAAKe,QAAQW,WAChE1B,KAAKmI,cAAcE,OAAOrC,SAASzD,QAAUvC,KAAKY,YAClDZ,KAAKmI,cAAcE,OAAOlC,KAAKyC,WAAY,KAOvD5I,KAAKmI,cAAgB,KAK7BvI,WAOJ,IAAImJ,GACA+G,cAEA5P,SAAW,GAEf,MAAMmP,YACDnK,EAAG,IAAMX,EAAG,EAAK2B,EAAG,IACpBhB,EAAG,IAAMX,EAAG,GAAM2B,EAAG,IACrBhB,EAAG,IAAMX,EAAG,IAAM2B,EAAG,IACrBhB,EAAG,IAAMX,EAAG,IAAM2B,EAAG,IACrBhB,EAAG,IAAMX,EAAG,GAAM2B,EAAG,MACrBhB,EAAG,IAAMX,EAAG,GAAM2B,EAAG,MAEpBkJ,YACDlK,GAAI,KAAOX,GAAI,GAAK2B,EAAG,IACvBhB,EAAG,KAAOX,GAAI,GAAK2B,EAAG,IACtBhB,EAAG,EAAGX,GAAI,GAAK2B,EAAG,IAClBhB,EAAG,EAAGX,GAAI,GAAK2B,EAAG,IAClBhB,EAAG,EAAGX,GAAI,GAAK2B,GAAI,OACnBhB,EAAG,EAAGX,GAAI,GAAK2B,EAAG,OAkXvB,SAAU+J,0BAA0BC,GAChCC,SAASZ,MAAMa,QAAU,QACzBD,SAASZ,MAAMc,UAAY,SAC3BF,SAASG,UAAYzQ,KAAKiM,QAAQoE,EAAE1C,QAAQ1C,KAAO,UAGvD,SAAUyF,gBAAgBL,GACtBC,SAASZ,MAAMa,QAAU,QACzBD,SAASZ,MAAMc,UAAY,SAC3BF,SAASG,UAAYzQ,KAAKiM,QAAQoE,EAAE1C,QAAQ1C,KAAO,iBAIvD,SAAS0F,kBAAkBC,WACvB1H,GAAM,IAAI2H,UAAU,iCAAmCD,WAEpD9L,iBAAiB,UAAYgM,UAC5B,MAAMxK,KAAOmF,KAAKsF,MAAMD,QAAQxK,MAGhC,GAFA4E,QAAQC,IAAI7E,MAEM,YAAdA,KAAK0E,KACLhL,KAAKkQ,aAAa5J,KAAKmI,gBAEpB,GAAkB,SAAdnI,KAAK0E,KAAiB,CAE7B,MAAMxB,OAASlD,KAAKrE,aACd4D,EAACA,EAACC,EAAEA,EAACC,EAAEA,GAAKO,KAClB4E,QAAQC,IAAI3B,OAAQ3D,EAAGC,EAAGC,GAC1B/F,KAAKoJ,SAASI,OAAQ3D,EAAGC,EAAGC,MAIpCmD,GAAGpE,iBAAiB,OAAQ,KACxBoG,QAAQC,IAAI,cACZD,QAAQC,IAAIyF,UACZ1H,GAAG2G,KAAKpE,KAAKC,WAAWoE,OAAQ,OAAQC,SAAU,MAAO/E,KAAM,QAASgF,KAAMY,YAE9EI,aAAaJ,YAIrB,SAASK,gBAAgBhG,MAErB,OAAOiG,oBAAoB,IAAIC,OAAO,QAAUlG,KAAO,uBAA4BmG,KAAK7J,SAAS8J,UAAY,KAAM,KAAK,GAAGC,QAAQ,MAAO,SAAW,KAGzJ,SAASnI,SAASlH,YAAa4D,EAAGC,EAAGC,EAAGkD,WAChCC,IACAA,GAAG2G,KAAKpE,KAAKC,WACTzJ,YAAaA,YACb4D,EAAGA,EACHC,EAAGA,EACHC,EAAGA,EACH+J,OAAQ,OACRC,SAAU,MACVC,KAAMC,cACNjF,KAAM,OACN/B,UAAWA,aAMvB,SAAS4E,UAAU5E,WACXC,IACAA,GAAG2G,KAAKpE,KAAKC,WACTsE,KAAMC,cACNjF,KAAM,QACN/B,UAAWA,aAKvB,SAASsI,cAAcX,SAAU3H,WAC7BqC,MAAM,mBACFC,OAAQ,OACRC,KAAMC,KAAKC,WAAWkF,SAAUA,SAAU3H,UAAWA,cAI7D,SAAS+H,aAAaJ,UAElBtF,MAAM,2BAA6BsF,UAC/BrF,OAAQ,MACRiG,SACIC,OAAU,mBACVC,eAAgB,sBAErB/F,KAAKgG,KAAOA,IAAI/F,QAClBD,KAAKrF,OACqB,OAAnBA,KAAK2C,YACLjJ,KAAKqJ,MAAMpB,OAAO3B,KAAK2C,WACvBjJ,KAAKiJ,UAAa3C,KAAK2C,aA3cnC9F,OAAOyO,cAAgB,MAEnB,MAAMC,cAGAC,iBAAmBvK,SAAS8J,OAAOU,UAAU,GASnD,OAPID,iBAAiBlL,QACjBkL,iBAAiBE,MAAM,KAAK5H,QAAQ4C,IAChC,MAAOiF,EAAEC,GAAMlF,EAAEgF,MAAM,KACvBH,WAAWI,GAAKC,IAIjBL,aAIX1O,OAAO2B,iBAAiB,OAAQ,KAG5BqN,OAAOC,WAAY,EAGnB,MAAM1O,SAAW,IAAItB,MAAMuB,eAAeE,WAAW,EAAMD,OAAO,IAClEF,SAASI,cAAcX,OAAOY,kBAC9BL,SAASM,QAAQb,OAAOC,WAAYD,OAAOE,aAC3CoM,SAASjE,KAAK6G,YAAY3O,SAASO,YAEnCP,SAASO,WAAWa,iBAAiB,QAAS,MAC1C,IAAIwN,SAAUC,SAETpP,OAAOoE,SAASiL,KAAKC,SAAS,cAC/BhD,SAASiD,mBAAqBhP,SAASO,WAAW0O,qBAClDlD,SAASmD,yBAA2BlP,SAASO,WAAW4O,2BACxDpD,SAASqD,sBAAwBpP,SAASO,WAAW8O,wBACrDtD,SAASuD,qBAAuBtP,SAASO,WAAWgP,wBAI5D,IAIIC,UAJAC,OAAS,IAAI/Q,MAAMgR,SAAS1P,UAChCyP,OAAOE,YAAc,GACrBF,OAAOnP,QAAQb,OAAOC,WAAYD,OAAOE,aAGrCiQ,UAAUC,eACVD,UAAUC,gBAAgB5H,KAAK6H,UAAYA,SAAS5M,SAAWsM,UAAYM,SAAS,KAKxFC,cAAc3O,iBAAiB,QAAS,KAGhC2O,cAAcC,UAAUC,SAAS,WACjCR,OAAS,IAAI/Q,MAAMgR,SAAS1P,WACrB2P,WAAa,EACpBF,OAAOnP,QAAQb,OAAOC,WAAYD,OAAOE,aAEzCoQ,cAAcC,UAAUhJ,OAAO,SAC/B1K,KAAKqJ,MAAMuK,SAAU,IAGjBN,UAAUO,UAAUpB,SAAS,aAC7BS,UAAUY,iBAAiBC,OAAQrQ,SAASO,gBAE5CkP,OAAS,IAAI/Q,MAAM4R,aAAatQ,WACzB2P,WAAa,EACpBF,OAAOnP,QAAQb,OAAOC,WAAYD,OAAOE,cAE7CrD,KAAKqJ,MAAMuK,SAAU,EAErBH,cAAcC,UAAUjP,IAAI,YAKpC,MACM1B,MAAQ,IAAIX,MAAMY,MAClBC,OAAS,IAAIb,MAAMc,kBAFb,GAEoCC,OAAOC,WAAaD,OAAOE,YAAa,EAAG,KAC3FN,MAAM0B,IAAIxB,QACVA,OAAO5C,SAAS4T,MAAQ,MACxBhR,OAAOqB,SAAS+B,EAAI,EACpBpD,OAAOqB,SAASI,EAAI,EAGpB,IAAIwP,SAAW,IAAI9R,MAAM+R,cAAclR,OAAQS,SAASO,YACxDiQ,SAASjP,OAAOV,IAC8B,EAA1C9D,KAAKoK,IAAI5H,OAAOqB,SAASe,EAAE5E,KAAKmK,GAAG,KACnC3H,OAAOqB,SAASI,EAC0B,EAA1CjE,KAAKkK,IAAI1H,OAAOqB,SAAS+B,EAAE5F,KAAKmK,GAAG,MAEvCsJ,SAASE,WAAY,EACrBF,SAASG,YAAa,EAGtB,MAAMC,uBAAyBvP,QAEtBA,MAAMnB,SAEXsQ,SAAW,IAAI9R,MAAMmS,WAAWtR,SACvBuR,SAETrR,OAAOsR,oBAAoB,oBAAqBH,0BAEpDnR,OAAO2B,iBAAiB,oBAAqBwP,wBAG7C,MAAMhR,UAAY,IAAIlB,MAAMmB,UACtBC,MAAQ,IAAIpB,MAAMqB,QAClBW,MAAQ,IAAIhC,MAAMiC,iBAAkB,SAAU,IACpDD,MAAME,SAASC,IAAK,EAAG,EAAG,GAAIC,YAC9BzB,MAAM0B,IAAIL,OAEQ,MAEd,MAAMsQ,EAACA,EAACxU,KAAEA,KAAI8M,EAAEA,GAAK4E,gBAErBzO,OAAOnD,KAAO,IAAI+L,WACd5E,gBAAiBuN,GAAQ,KAAHA,EACtB1I,UAAW+C,YACX7O,KAAMsK,SAAStK,OAAS,EACxB+L,QAASzB,SAASwC,IAAM,EACxB/M,MAAM,IAEVD,KAAKqJ,MAAMsL,kBACP5R,MAAOA,MACPE,OAAQA,OACRK,UAAWA,UACXE,MAAOA,MACPE,SAAUA,SACVS,aAAcT,SAASO,aAE3BjE,KAAKqJ,MAAMuL,aAGW,MAFtB3E,cAAgBgB,gBAAgB,cAG5BN,kBAAkBV,gBAI1B3D,GAEA,MAAMrE,OAAS,KAEXL,sBAAsBK,QACtBiM,SAASM,SAETvR,OAAO8E,OAAOhF,MAAMuB,UACpBrB,OAAO+E,oBACP1E,UAAU4E,cAAc1E,MAAOP,QAE/BkQ,OAAOlL,OAAOlF,MAAOE,SAGzBgF,SAGA,MAAM4M,YAAcxU,WAChB4C,OAAOqB,SAASe,EAAqC,EAAjC5E,KAAKoK,IAAIxK,SAASI,KAAKmK,GAAG,KAC9C3H,OAAOqB,SAAS+B,EAAqC,EAAjC5F,KAAKkK,IAAItK,SAASI,KAAKmK,GAAG,MAElDiK,YAAYxU,UAAU,IAEtBqD,SAASO,WAAWa,iBAAiB,QAAS,EAAEgQ,OAAAA,WAE5CD,YADAxU,UAAYA,SAAmC,GAAvByU,OAAS,EAAI,GAAK,IAAU,OAIxDrF,SAAS3K,iBAAiB,YAAa,KACnC9E,KAAKqJ,MAAMP,aAAc,IAG7B2G,SAAS3K,iBAAiB,UAAW,KACjC9E,KAAKqJ,MAAMP,aAAc,IAG7B2G,SAAS3K,iBAAiB,QAAS,KAC/B9E,KAAKqJ,MAAMP,aAAc,IAG7B3F,OAAO2B,iBAAiB,UAAWuL,IACjB,SAAVA,EAAE0E,MACF/U,KAAKqJ,MAAM2L,mBAMnB,IAAIC,qBAAuB,EAE3B,MAAMC,aAAe,KACjB,IACI,GAAI,oBAAqB5B,UACrBA,UAAU6B,iBACLC,OAASC,WAAY,gBACtBC,SACIF,MAAMG,IAAMpS,OAAOqS,IAAIC,gBAAgBH,SAE3CI,MACIxK,QAAQC,IAAIuK,KACZC,MAAM,kGAGX,CAGH,GAF4BrC,UAAUsC,cAAgBtC,UAAUsC,aAAaC,aAGzEvC,UAAUsC,aACTC,cAAeT,OAASC,WAAY,iBACpC1J,KAAK2J,SACFF,MAAMG,IAAMpS,OAAOqS,IAAIC,gBAAgBH,UAE1CQ,MAAMJ,MACHxK,QAAQC,IAAIuK,OACZT,qBAGyB,EACrBC,eAEAS,MAAM,kGAGX,CACH,MAAME,aACFvC,UAAUuC,cACVvC,UAAUyC,oBACVzC,UAAU6B,iBACV7B,UAAU0C,eAEVH,aACAA,cACMT,OAASC,WAAY,gBACvBC,SACIF,MAAMG,IAAMpS,OAAOqS,IAAIC,gBAAgBH,SAE3CI,MACIxK,QAAQC,IAAIuK,KACZC,MAAM,+FAIdA,MAAM,0BAKpB,MAAOtF,GACLsF,MAAM,mEAIdxS,OAAOiS,MAAQ3F,SAASwG,cAAc,SACtCb,MAAMc,UAAW,EACjBd,MAAMhQ,MAAQjC,OAAOC,WACrBgS,MAAMlQ,OAAS/B,OAAOE,YAAc,EACpC6R,eAEA,MAAMiB,OAAS1G,SAASwG,cAAc,UACtCE,OAAO/Q,MAAQgQ,MAAMhQ,MACrB+Q,OAAOjR,OAASkQ,MAAMlQ,OACtB,MAAMkR,QAAUD,OAAOE,WAAW,MAElC,IAAIC,MAAQ,EACRC,MAAQ,EAERC,KAAO,EACPC,KAAO,EAGX,IAAIC,mBAAoB,EAEpBC,cAAgB,EAkBpBxT,OAAOyT,WAAa,MAKhB,GAHAhP,sBAAsBgP,cAGhBD,aAAa,GAAG,EAAG,CAErBP,QAAQS,UAAUzB,MAAO,EAAG,EAAGA,MAAMhQ,MAAOgQ,MAAMlQ,QAClD,MAAMoB,KAACA,MAAQ8P,QAAQU,aAAa,EAAG,EAAG1B,MAAMhQ,MAAOgQ,MAAMlQ,QAE7D,IAAI6R,KAAO,EACPC,KAAO,EACPC,QAAU,EAEVC,OAAS,EACTC,OAAS,EACTC,KAAOhC,MAAMlQ,OACbmS,KAAOjC,MAAMhQ,MAGbsR,oBACAQ,OAAS1M,SAAS/J,KAAKyN,IAAIqI,MA1CxB,IA0CwC,IAC3CY,OAAS3M,SAAS/J,KAAKyN,IAAIoI,MA3CxB,IA2CwC,IAC3Cc,KAAO5M,SAAS/J,KAAK6W,IAAIf,MA5CtB,IA4CsCnB,MAAMhQ,QAC/CiS,KAAO7M,SAAS/J,KAAK6W,IAAIhB,MA7CtB,IA6CsClB,MAAMlQ,UAInD,IAAK,IAAIY,EAAEoR,OAAQpR,EAAEsR,KAAMtR,GAAG,EAE1B,IAAK,IAAIC,EAAEoR,OAAQpR,EAAEsR,KAAMtR,GAAG,EAAG,CAG7B,MAAMiH,EAAIlH,EAAEsP,MAAMhQ,MAAQW,EACpBwR,OAASjR,KAAO,EAAF0G,GAAK,IAAK1G,KAAO,EAAF0G,EAAI,GAAG,IAAK1G,KAAO,EAAF0G,EAAI,GAAG,KAEvDuK,MAAM,IAAI,KAAQA,MAAM,IAAM,KAAQA,MAAM,IAAI,KAChDN,UACAF,MAAQhR,EACRiR,MAAQlR,GAKhBmR,QAAQ,IACRT,KAAOO,KAAOE,QACdR,KAAOO,KAAOC,QACdP,mBAAoB,GAEpBA,mBAAoB,EAjEb,EAACrR,EAAGX,KAGnB8S,WAAW9H,MAAM+H,UAAYjN,SAAS9F,EAAE0Q,MAAMlQ,OAAS/B,OAAOE,aAAa,KAC3E,IAAIqU,MAAQlN,SAASnF,EAAE+P,MAAMhQ,MAAQjC,OAAOC,YAExCpD,KAAKqJ,MAAMuK,UACX8D,OAAgB,GAGpBF,WAAW9H,MAAMiI,WAAaD,MAAM,KAEpC1X,KAAKqJ,MAAM7F,MAAM6B,EAAIA,EAAI+P,MAAMhQ,MAAQ,EAAI,EAC3CpF,KAAKqJ,MAAM7F,MAAMkB,GAAkC,GAA7BA,EAAI0Q,MAAMlQ,OAAS,EAAI,IA2D7C0S,CAHAtB,QAAUE,KAAKF,OAAO,GACtBC,QAAUE,KAAKF,OAAO,MAMD,KAArB3E,gBAAgBiG,GAChBjB,aAIJzT,OAAO2B,iBAAiB,SAAU,KAC9BqO,OAAOnP,QAAQb,OAAOC,WAAYD,OAAOE,aACzCJ,OAAO6U,OAAS3U,OAAOC,WAAaD,OAAOE,YAC3CJ,OAAO8U,2BAGX5U,OAAO2B,iBAAiB,SAAUsL,2BAClCjN,OAAO2B,iBAAiB,SAAU4L","file":"scriptVR.min.js","sourcesContent":["\"use strict\"\n\nclass GameBoard {// eslint-disable-line\n\n    constructor (game, isVR) {\n\n        const {span} = game\n\n        this.playerColours = [\"blue\", \"red\", \"green\", \"purple\", \"yellow\", \"orange\", \"black\", \"cyan\", \"pink\", \"darkgrey\"]\n        this.rotation = -45\n        this.span = span\n        this.game = game // Two way binding\n        this.heightOffset = 0\n\n        // Rendering constants\n        this.BOX_WIDTH = 0.5\n        this.SPREAD = Math.floor(this.span / 2)\n        this.SPACING = 1.5\n        this.SPHERE_RADIUS = 0.2\n        this.SPHERE_V_COUNT = 50\n        this.OPACITY_ON = 0.5\n        this.OPACITY_OFF = 0.25\n\n        this.explodedMult = 1\n        this.isLerpingBoxes = false\n\n        this.colours = {\n            RED: 0xff0000,\n            BLUE: 0x0000ff,\n            GREEN: 0x00ff00,\n            PURPLE: 0x880088,\n            YELLOW: 0xffff00,\n            ORANGE: 0xff6600,\n            BLACK: 0x000000,\n            CYAN: 0x00ffff,\n            PINK: 0xffc0cb,\n            BRIGHTGREY: 0xaaaaaa,\n            LIGHTGREY: 0x999999,\n            DARKGREY: 0x666666,\n            WHITE: 0xffffff\n        }\n\n        // Create a render sphere to move around to the correct location\n        const previewColour = this.colours[this.playerColours[this.game.playerIndex].toUpperCase()]\n        const previewSphereGeometry = new THREE.SphereGeometry(this.SPHERE_RADIUS, this.SPHERE_V_COUNT, this.SPHERE_V_COUNT)\n        const previewSphereMaterial = new THREE.MeshLambertMaterial({color: previewColour, transparent: true})\n        previewSphereMaterial.opacity = 0\n        previewSphereMaterial.emissive.setHex(previewColour)\n        this.previewSphere = new THREE.Mesh(previewSphereGeometry, previewSphereMaterial)\n\n\n        if (isVR) return\n\n        this.scene = new THREE.Scene()\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)\n        this.raycaster = new THREE.Raycaster()\n        this.mouse = new THREE.Vector2()\n        this.renderer = new THREE.WebGLRenderer({alpha: true, antialias: true})\n        this.renderer.setPixelRatio(window.devicePixelRatio)\n        this.renderer.setSize(window.innerWidth-100, window.innerHeight-200)\n        this.renderer.domElement.id = \"rendererDomElement\"\n        this.boardElement = this.renderer.domElement\n\n        const light = new THREE.DirectionalLight(this.colours.LIGHTGREY, 1)\n        light.position.set(1, 1, 1).normalize()\n        this.scene.add(light)\n\n        this.camera.position.y = 2\n\n        this.scene.add(this.previewSphere)\n\n        this.initBoards()\n        this.renderLoop()\n        this.rotate()\n\n        this.boardElement.addEventListener(\"mousemove\", event => {\n            const sizeY = event.target.height\n            const sizeX = event.target.width\n            this.mouse.x = event.offsetX / sizeX * 2 - 1\n            this.mouse.y = -event.offsetY / sizeY * 2 + 1\n        }, false)\n    }\n\n    // Create volumes to store the boxes / spheres\n    initBoards () {\n        this.highlightedBoxes = []\n        this.boxes = [...new Array(this.span)].map(() => [...new Array(this.span)].map(() => [...new Array(this.span)]))\n        this.spheres = [...new Array(this.span)].map(() => [...new Array(this.span)].map(() => [...new Array(this.span)]))\n\n        // Populate the canvas with the board cubes\n        for (let b=0; b<this.span; b++) {\n            for (let r=0; r<this.span; r++) {\n                for (let c=0; c<this.span; c++) {\n                    this.addBox(b, r, c)\n                }\n            }\n        }\n    }\n\n    addBox (b, r, c) {\n        const geometry = new THREE.BoxGeometry(this.BOX_WIDTH, this.BOX_WIDTH, this.BOX_WIDTH)\n        const material = new THREE.MeshLambertMaterial({color: this.colours.DARKGREY})\n        material.opacity = this.OPACITY_OFF\n        material.transparent = true\n\n        const box = new THREE.Mesh(geometry, material)\n        box.material.emissive.setHex(this.colours.LIGHTGREY)\n\n        box.position.x = (c - this.SPREAD) * this.BOX_WIDTH * this.SPACING\n        box.position.y = (b - this.SPREAD) * this.BOX_WIDTH * this.SPACING + this.heightOffset\n        box.position.z = (r - this.SPREAD) * this.BOX_WIDTH * this.SPACING\n        box.data = {b, r, c}\n        box.origPos = {\n            x: box.position.x,\n            y: box.position.y,\n            z: box.position.z\n        }\n\n        this.scene.add(box)\n        this.boxes[b][r][c] = box\n    }\n\n    addSphere (b, r, c, colour) {\n        const sphereGeometry = new THREE.SphereGeometry(this.SPHERE_RADIUS, this.SPHERE_V_COUNT, this.SPHERE_V_COUNT)\n        const sphereMaterial = new THREE.MeshLambertMaterial({color: this.colours[colour.toUpperCase()]})\n        const sphere = new THREE.Mesh(sphereGeometry, sphereMaterial)\n        sphere.material.emissive.setHex(this.colours[colour.toUpperCase()])\n\n        sphere.position.x = (c - this.SPREAD) * this.BOX_WIDTH * this.SPACING\n        sphere.position.y = (b - this.SPREAD) * this.BOX_WIDTH * this.SPACING + this.heightOffset\n        sphere.position.z = (r - this.SPREAD) * this.BOX_WIDTH * this.SPACING\n        sphere.origPos = {\n            x: sphere.position.x,\n            y: sphere.position.y,\n            z: sphere.position.z\n        }\n\n        // Set the sphere position to the exploded position\n        if (this.explodedMult!=1) {\n            sphere.position.x += sphere.origPos.x * this.explodedMult - sphere.position.x\n            sphere.position.y += sphere.origPos.y * this.explodedMult - sphere.position.y\n            sphere.position.z += sphere.origPos.z * this.explodedMult - sphere.position.z\n        }\n\n        this.spheres[b][r][c] = sphere\n        this.scene.add(sphere)\n    }\n\n    clearHighlightedBoxes () {\n        for (let b=0; b<this.highlightedBoxes.length; b++) {\n            this.highlightedBoxes[b].material.opacity = this.OPACITY_OFF\n            this.highlightedBoxes[b].material.emissive.setHex(this.colours.LIGHTGREY)\n        }\n        this.highlightedBoxes = []\n        this.previewSphere.material.opacity = 0\n    }\n\n    highlightColumn ({r, c}) {\n        for (let b=0; b<this.span; b++) {\n            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\n            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY)\n            this.highlightedBoxes.push(this.boxes[b][r][c])\n        }\n    }\n\n    highlightRowY ({b, r}) {\n        for (let c=0; c<this.span; c++) {\n            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\n            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY)\n            this.highlightedBoxes.push(this.boxes[b][r][c])\n        }\n    }\n\n    highlightRowX ({b, c}) {\n        for (let r=0; r<this.span; r++) {\n            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\n            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY)\n            this.highlightedBoxes.push(this.boxes[b][r][c])\n        }\n    }\n\n    getPreviewPosition (cube) {\n\n        const incr = this.game.gravity.modifier\n        const pos = {\n            x : cube.origPos.x,\n            y : cube.origPos.y,\n            z : cube.origPos.z\n        }\n\n        pos.b = cube.data.b\n        pos.r = cube.data.r\n        pos.c = cube.data.c\n\n        if (!this.game.gravityEnabled) {\n            return pos\n        }\n\n        switch (this.game.gravity.axis) {\n            // up/down\n            case 0:\n                // Column full\n                if (this.spheres[incr==-1 ? this.span-1 : 0][cube.data.r][cube.data.c]) {\n                    return null\n                }\n\n                pos.b = incr==-1 ? 0 : this.span-1\n\n                while (this.spheres[pos.b][cube.data.r][cube.data.c]) {\n                    pos.b -= incr\n                }\n\n                pos.y = (pos.b - this.SPREAD) * this.BOX_WIDTH * this.SPACING + this.heightOffset\n                break\n\n            // left/right\n            case 1:\n                // Row full\n                if (this.spheres[cube.data.b][cube.data.r][incr==-1 ? this.span-1 : 0]) {\n                    return null\n                }\n\n                pos.c = incr==-1 ? 0 : this.span-1\n\n                while (this.spheres[cube.data.b][cube.data.r][pos.c]) {\n                    pos.c -= incr\n                }\n\n                pos.x = (pos.c - this.SPREAD) * this.BOX_WIDTH * this.SPACING\n                break\n            // forward/backward\n            case 2:\n                // Row full\n                if (this.spheres[cube.data.b][incr==-1 ? this.span-1 : 0][cube.data.c]) {\n                    return null\n                }\n\n                pos.r = incr==-1 ? 0 : this.span-1\n\n                while (this.spheres[cube.data.b][pos.r][cube.data.c]) {\n                    pos.r -= incr\n                }\n\n                pos.z = (pos.r - this.SPREAD) * this.BOX_WIDTH * this.SPACING\n                break\n        }\n\n        if (this.explodedMult!=1) {\n            pos.x *= this.explodedMult\n            pos.y *= this.explodedMult\n            pos.z *= this.explodedMult\n        }\n\n        // Don't render it if there's already a sphere at that location\n        if (this.spheres[pos.b][pos.r][pos.c]) {\n            return null\n        }\n\n        return pos\n    }\n\n    moveSphere (start, end, axis, location) {\n\n        // Set the new position for the sphere\n        const sphere = this.spheres[start.b][start.r][start.c]\n        sphere.isLerping = true\n        sphere.newPos = {}\n        sphere.newPos.axis = axis\n        sphere.newPos[axis] = (location - this.SPREAD) * this.BOX_WIDTH * this.SPACING\n\n        // Move the spheres in the spheres state\n        this.spheres[end.b][end.r][end.c] = sphere\n        this.spheres[start.b][start.r][start.c] = null\n    }\n\n    // Lerp the boxes into position, when exploded\n    lerpBoxes () {\n        if (this.isLerpingBoxes) {\n            for (let b=0; b<this.span; b++) {\n                for (let r=0; r<this.span; r++) {\n                    for (let c=0; c<this.span; c++) {\n\n                        if (b!=this.SPREAD && r!=this.SPREAD && c!=this.SPREAD\n                            && Math.abs(this.boxes[b][r][c].position.x - this.boxes[b][r][c].origPos.x * this.explodedMult) < 0.005) {\n\n                            this.isLerpingBoxes = false\n                            this.boxes[b][r][c].position.x = this.boxes[b][r][c].origPos.x * this.explodedMult\n                            this.boxes[b][r][c].position.y = this.boxes[b][r][c].origPos.y * this.explodedMult\n                            this.boxes[b][r][c].position.z = this.boxes[b][r][c].origPos.z * this.explodedMult\n\n                            if (this.spheres[b][r][c]) {\n                                this.spheres[b][r][c].position.x += this.spheres[b][r][c].origPos.x * this.explodedMult - this.spheres[b][r][c].position.x\n                                this.spheres[b][r][c].position.y += this.spheres[b][r][c].origPos.y * this.explodedMult - this.spheres[b][r][c].position.y\n                                this.spheres[b][r][c].position.z += this.spheres[b][r][c].origPos.z * this.explodedMult - this.spheres[b][r][c].position.z\n                            }\n\n                        } else {\n                            this.boxes[b][r][c].position.x += (this.boxes[b][r][c].origPos.x * this.explodedMult - this.boxes[b][r][c].position.x) / 10\n                            this.boxes[b][r][c].position.y += (this.boxes[b][r][c].origPos.y * this.explodedMult - this.boxes[b][r][c].position.y) / 10\n                            this.boxes[b][r][c].position.z += (this.boxes[b][r][c].origPos.z * this.explodedMult - this.boxes[b][r][c].position.z) / 10\n\n                            if (this.spheres[b][r][c]) {\n                                this.spheres[b][r][c].position.x += (this.spheres[b][r][c].origPos.x * this.explodedMult - this.spheres[b][r][c].position.x) / 10\n                                this.spheres[b][r][c].position.y += (this.spheres[b][r][c].origPos.y * this.explodedMult - this.spheres[b][r][c].position.y) / 10\n                                this.spheres[b][r][c].position.z += (this.spheres[b][r][c].origPos.z * this.explodedMult - this.spheres[b][r][c].position.z) / 10\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Lerp the spheres into their new place\n    lerpSpheres () {\n\n        this.someSphereIsLerping = false\n\n        for (let b=0; b<this.span; b++) {\n            for (let r=0; r<this.span; r++) {\n                for (let c=0; c<this.span; c++) {\n\n                    if (this.spheres[b][r][c] && this.spheres[b][r][c].isLerping) {\n\n                        this.someSphereIsLerping = true\n\n                        const sphere = this.spheres[b][r][c]\n                        const {axis} = sphere.newPos\n\n                        if (Math.abs(sphere.position[axis] - sphere.newPos[axis] * this.explodedMult) > 0.01) {\n                            sphere.position[axis] += (sphere.newPos[axis] * this.explodedMult - sphere.position[axis]) / 10\n                        } else {\n                            sphere.isLerping = false\n                            sphere.position[axis] = sphere.newPos[axis] * this.explodedMult\n                            sphere.origPos[axis] = sphere.newPos[axis]\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    renderLoop () {\n\n        requestAnimationFrame(() => this.renderLoop())\n        this.lerpBoxes()\n        this.lerpSpheres()\n\n        this.camera.lookAt(this.scene.position)\n        this.camera.updateMatrixWorld()\n\n        this.renderer.render(this.scene, this.camera)\n        this.raycaster.setFromCamera(this.mouse, this.camera)\n\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true)\n\n        if (intersects.length) {\n\n            // If still hovering on the same thing...\n            if (this.hoveredObject && (this.hoveredObject==intersects[0].object || this.hoveredObject==intersects[0].object.parent)) {\n\n                if (this.mouseIsDown && !this.hoveredObject.data.isClicked) {\n                    this.hoveredObject.data.isClicked = true\n                    setTimeout(() => {\n                        if (this.hoveredObject) {\n                            this.hoveredObject.data.isClicked = false\n                        }\n                    }, 500)\n\n                    const {b, r, c} = this.previewSphere.data\n\n                    if (this.game.gameState[b][r][c]===\" \") {\n                        if (ws){\n                            sendMove(this.game.playerIndex, b, r, c, this.game.gameState)\n                        } else {\n                            this.game.makeMove(this.game.playerIndex, b, r, c)\n                        }\n                    }\n                }\n\n            } else {\n\n                // Set the currently hovered over object\n                this.hoveredObject = intersects[0].object.data ? intersects[0].object : intersects[0].object.parent\n                this.clearHighlightedBoxes()\n\n                if (this.hoveredObject.data) {\n                    // Also TODO, decide which one of these to do, based on the current gravity\n\n                    if (!this.isLerpingBoxes && !this.someSphereIsLerping) {\n\n                        if (this.game.gravityEnabled) {\n                            switch (this.game.gravity.axis) {\n                                case 0:\n                                    this.highlightColumn(this.hoveredObject.data)\n                                    break\n                                case 1:\n                                    this.highlightRowY(this.hoveredObject.data)\n                                    break\n                                case 2:\n                                    this.highlightRowX(this.hoveredObject.data)\n                                    break\n                            }\n                        } else {\n                            // Highlight only the hovered over box\n                            const {b, r, c} = this.hoveredObject.data\n                            this.boxes[b][r][c].material.opacity = this.OPACITY_ON\n                            this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY)\n                            this.highlightedBoxes.push(this.boxes[b][r][c])\n                        }\n\n                        // Render the preview sphere at the correct location\n                        const pos = this.getPreviewPosition(this.hoveredObject)\n\n                        if (pos) {\n                            this.previewSphere.position.x = pos.x\n                            this.previewSphere.position.y = pos.y\n                            this.previewSphere.position.z = pos.z\n                            this.previewSphere.data = {\n                                b: pos.b,\n                                r: pos.r,\n                                c: pos.c\n                            }\n                            this.previewSphere.material.opacity = 0.5\n                        }\n                        // === ?\n                        // else {\n                        //     this.previewSphere.material.opacity = 0\n                        // }\n                    }\n                }\n            }\n\n        } else {\n\n            this.clearHighlightedBoxes()\n            this.previewSphere.material.opacity = 0\n\n            if (this.hoveredObject) {\n                if (this.hoveredObject.material) {\n                    this.hoveredObject.material.emissive.setHex(this.colours.LIGHTGREY)\n                    this.hoveredObject.material.opacity = this.OPACITY_OFF\n                    this.hoveredObject.data.isClicked = false\n                } else if (this.hoveredObject.parent) {\n                    this.hoveredObject.parent.material.emissive.setHex(this.colours.LIGHTGREY)\n                    this.hoveredObject.parent.material.opacity = this.OPACITY_OFF\n                    this.hoveredObject.parent.data.isClicked = false\n                }\n\n            }\n            this.hoveredObject = null\n        }\n    }\n\n    toggleExploded () {\n        this.explodedMult = this.explodedMult==1 ? 2 : 1\n        this.previewSphere.material.opacity = 0\n        this.isLerpingBoxes = true\n    }\n\n    addPoint (board, row, col, player, nextPlayer) {\n        this.addSphere(board, row, col, this.playerColours[player].toUpperCase())\n        this.previewSphere.material.opacity = 0\n\n        if (nextPlayer!==undefined) {\n            this.setPreviewColour(nextPlayer)\n        }\n    }\n\n    setPreviewColour (playerIndex) {\n        const previewColour = this.colours[this.playerColours[playerIndex].toUpperCase()]\n        this.previewSphere.material.color.setHex(previewColour)\n        this.previewSphere.material.emissive.setHex(previewColour)\n    }\n\n    highlightArrow (index) {\n        const arrowModel = arrowModels.filter(a => a.data.arrowIndex==index)\n\n        // Clear old arrow\n        if (clickedObject) {\n            clickedObject.children.forEach(c => c.material.emissive.setHex(this.colours.BRIGHTGREY))\n        }\n\n        // Set new one to cyan\n        arrowModel[0].children.forEach(c => c.material.emissive.setHex(this.colours.CYAN))\n        clickedObject = arrowModel[0]\n    }\n\n    render (gameState) {\n        this.resetBoard()\n\n        for (let b=0; b<this.span; b++) {\n            for (let r=0; r<this.span; r++) {\n                for (let c=0; c<this.span; c++) {\n                    if (!Number.isNaN(parseInt(gameState[b][r][c]))) {\n                        this.addPoint(b, r, c, gameState[b][r][c])\n                    }\n                }\n            }\n        }\n    }\n\n    resetBoard () {\n        for (let b=0; b<this.span; b++) {\n            for (let r=0; r<this.span; r++) {\n                for (let c=0; c<this.span; c++) {\n                    if (this.spheres[b][r][c]) {\n                        this.scene.remove(this.spheres[b][r][c])\n                        this.spheres[b][r][c] = undefined\n                    }\n                }\n            }\n        }\n    }\n\n    rotate () {\n        this.camera.position.x = Math.sin(this.rotation*Math.PI/180) * (this.BOX_WIDTH * 1.5) * this.span * 2\n        this.camera.position.z = Math.cos(this.rotation*Math.PI/180) * (this.BOX_WIDTH * 1.5) * this.span * 2\n    }\n\n}\n\ntypeof window!=\"undefined\" && (window.exports = window.exports || {})\n\"use strict\"\n\nclass GamePlayer {// eslint-disable-line\n\n    constructor (type, playerIndex, game, name) {\n\n        console.log(`new ${type} player: ${playerIndex}`)\n\n        this.type = type\n        this.game = game // Two way binding\n        this.playerIndex = playerIndex\n        this.name = name\n    }\n\n    clearLastState () {\n        for (let b=0; b<this.game.span; b++) {\n            for (let r=0; r<this.game.span; r++) {\n                for (let c=0; c<this.game.span; c++) {\n                    this.lastState[b][r][c] = \" \"\n                }\n            }\n        }\n        this.lastMove = undefined\n    }\n\n    pickMove (gameState) {\n\n        if (this.type != \"AI\") return\n\n        fetch(\"./getAIMove\", {\n            method: \"post\",\n            body: JSON.stringify({gameState})\n        })\n        .then(r => r.json())\n        .then(({move}) => {\n            const [b, r, c] = move\n            this.game.makeMove(this.playerIndex, b, r, c)\n        })\n    }\n\n    reward (value, gameState) {\n\n        if (this.type != \"AI\") return\n\n        fetch(\"./rewardAI\", {\n            method: \"post\",\n            body: JSON.stringify({value, gameState})\n        })\n    }\n\n}\n\ntypeof window!=\"undefined\" && (window.exports = window.exports || {})\ntypeof window!=\"undefined\" && (window.GamePlayer = GamePlayer)\nexports.GamePlayer = GamePlayer\n\"use strict\"\n\nclass GameLogic {// eslint-disable-line\n\n    constructor ({gameState, gameBoard, gravityEnabled=true, span=3, players=2, isTraining, isMultiplayer, aiOpponent, isVR}={}) {\n\n        this.players = []\n        this.gravityEnabled = gravityEnabled\n        this.span = parseInt(span)\n        this.numPlayers = parseInt(players)\n        this.isTraining = isTraining // AI\n        this.aiOpponent = aiOpponent // AI\n        this.isMultiplayer = isMultiplayer // TODO, will be used to disallow moves until a move is made via WebSocket\n\n        this.gameState = gameState || this.resetGame() // Allow accepting an existing game state to allow loading existing match\n        this.gravity = {\n            axis: 0, // 0 for up/down, 1 for left/right, 2 for  forward/backward\n            modifier: -1 // -1 for normal, 1 for reverse\n        }\n        this.directions = {\n            up: 0,\n            down: 0,\n            left: 1,\n            right: 1,\n            forward: 2,\n            backward: 2\n        }\n        this.modifiers = {\n            up: 1,\n            down: -1,\n            left: -1,\n            right: 1,\n            forward: -1,\n            backward: 1\n        }\n\n        // Randomize who starts\n        this.playerIndex = Math.floor(Math.random()*players)\n        this.board = new gameBoard(this, isVR)\n\n        // Set the first player to either AI or human (aka the actual player)\n        if (this.aiOpponent) {\n            this.players.push(new GamePlayer(\"AI\", 0, this, \"AI\"))\n        } else {\n            this.players.push(new GamePlayer(\"local human\", 0, undefined ,\"Player 1\"))\n        }\n\n        // Set the rest to whatever was configured\n        for (let p=1; p<players; p++) {\n\n            // TODO, disallow more than 1 other player when playing against AI - model needed would be too big\n            if (this.isTraining) {\n                this.players.push(new GamePlayer(\"AI\", p, this))\n            } else if (isMultiplayer) {\n                this.players.push(new GamePlayer(\"remote human\", p, undefined, `Player ${p +1}`))\n            } else {\n                this.players.push(new GamePlayer(\"local human\", p, undefined, `Player ${p + 1}`))\n            }\n        }\n\n        // playerNum.style.color = this.board.playerColours[this.playerIndex]\n        this.players[this.playerIndex].pickMove(this.gameState)\n    }\n\n    // Create the board brand new\n    resetGame () {\n\n        const gameState = []\n\n        for (let b=0; b<this.span; b++) {\n\n            const boardGameState = []\n\n            for (let r=0; r<this.span; r++) {\n\n                const rowGameState = []\n\n                for (let c=0; c<this.span; c++) {\n                    rowGameState.push(\" \")\n                }\n\n                boardGameState.push(rowGameState)\n            }\n            gameState.push(boardGameState)\n        }\n\n        if (this.board) {\n            this.board.resetBoard()\n            // playerNum.style.color = this.board.playerColours[this.playerIndex]\n        }\n\n        // winsDisplay.style.display = \"none\"\n        this.gameState = gameState\n\n        // Clear the AI players' lastState\n        for (let p=0; p<this.players.length; p++) {\n            if (this.players[p].type == \"AI\") {\n                this.players[p].clearLastState()\n            }\n        }\n\n        return gameState\n    }\n\n    makeMove (p, b, r, c) {\n\n        if (p != this.playerIndex && !this.isTraining) {\n            console.log(\"NOT your turn!\")\n            return\n        }\n\n        // Illegal move\n        if (this.gameState[b][r][c] !== \" \") {\n            console.log(\"Illegal move\")\n\n            // Slap its hands, if it was an AI player\n            this.players[p].reward(-99, this.gameState)\n\n            // Stop the game if it's an AI, to avoid looping to stack overflow\n            if (this.players[p].type==\"AI\") {\n                this.resetGame()\n            }\n\n            return\n        }\n\n        [b, r, c] = this.applyGravityToMove(b, r, c)\n\n        this.gameState[b][r][c] = p\n        this.board.addPoint(b, r, c, p, (this.playerIndex+1) % this.players.length)\n\n        // Player wins\n        if (this.isWinningMove(b, r, c, p)) {\n            this.players[p].reward(1, this.gameState)\n            this.players.forEach((player, pi) => pi!=p && player.reward(-1, this.gameState))\n            // winsDisplay.style.display = \"inline-block\"\n            window.dispatchEvent(new CustomEvent(\"T^3Win\", {detail: p}))\n            return\n        }\n\n        // Tied game\n        if (this.isFull()) {\n            console.log(\"Tied game\")\n            this.players.forEach(player => player.reward(0.25, this.gameState))\n            window.dispatchEvent(new CustomEvent(\"T^3Tie\", {detail: p}))\n            return\n        }\n\n\n        // TODO, this might be useless - TEST\n        this.players.forEach((player, pi) => pi!=p && player.reward(0, this.gameState))\n\n        this.playerIndex = ++this.playerIndex % this.players.length\n\n        // TODO, do this outside of this class?\n        // playerNum.style.color = this.board.playerColours[this.playerIndex]\n        // winsDisplay.style.display = \"none\"\n\n        this.players[this.playerIndex].pickMove(this.gameState)\n        if (ws){\n            sendState(this.gameState)\n        }\n    }\n\n    isWinningMove (boardIndex, tileY, tileX, player) {\n\n        let match = false\n        const max = this.gameState[0].length-1\n        const mid = Math.floor(max/2)\n\n        // Check current board\n        match = this.gameState[boardIndex][tileY].every(col => col===player) // Horizontal\n            ||  this.gameState[boardIndex].every(row => row[tileX]===player) // Vertical\n            ||  (tileX + tileY)%2 === 0 && ( // Is it on a diagonal?\n                // Diagonal top-left -> bottom-right\n                this.gameState[boardIndex].every((row, ri) => row[ri]===player) ||\n                // Diagonal bottom-left -> top-right\n                this.gameState[boardIndex].every((row, ri) => row[max-ri]===player)\n            )\n\n        // Check other boards\n        // Up/Down\n        match = match || this.gameState.every(board => board[tileY][tileX] === player)\n\n        if (match) return true\n\n        // 3D diagonals\n        // Not in location unreachable by a diagonal\n        if (boardIndex !== mid || boardIndex===mid && (tileY===mid || tileX===mid)) {\n\n            match = match\n                ||  this.gameState.every((board, bi) => board[max-bi][tileX]===player) // Near-bottom -> Far-top\n                ||  this.gameState.every((board, bi) => board[bi][tileX]===player) // Far-bottom -> Near-top\n                ||  this.gameState.every((board, bi) => board[tileY][max-bi]===player) // Bottom-left -> Top-right\n                ||  this.gameState.every((board, bi) => board[tileY][bi]===player) // Bottom-right -> Top-left\n\n\n            if (match) return true\n\n            // Check cross diagonal (going from corners through the middle)\n            if (this.gameState[mid][mid][mid]===player) {\n\n                match = match\n                    ||  this.gameState.every((board, bi) => board[bi][bi]===player) // Far-bottom-left -> Near-top-right\n                    ||  this.gameState.every((board, bi) => board[max-bi][bi]===player) // Near-bottom-left -> Far-top-right\n                    ||  this.gameState.every((board, bi) => board[max-bi][max-bi]===player) // Near-bottom-right -> Far-top-left\n                    ||  this.gameState.every((board, bi) => board[bi][max-bi]===player) // Far-bottom-right -> Near-top-left\n            }\n        }\n\n        return match\n    }\n\n    isFull () {\n        for (let b=0; b<this.span; b++) {\n            for (let r=0; r<this.span; r++) {\n                for (let c=0; c<this.span; c++) {\n                    if (this.gameState[b][r][c] === \" \") {\n                        return false\n                    }\n                }\n            }\n        }\n\n        return true\n    }\n\n    applyGravityToMove (board, row, col) {\n\n        if (!this.gravityEnabled) return [board, row, col]\n\n        let counts\n\n        switch (this.gravity.axis) {\n            // Up/Down\n            case 0:\n                counts = this.gravity.modifier==-1 ? board : this.span-1-board\n\n                for (let i=0; i<counts; i++) {\n                    if (this.gameState[board + this.gravity.modifier][row][col]===\" \") {\n                        board += this.gravity.modifier\n                    } else {\n                        break\n                    }\n                }\n                break\n            // Left/Right\n            case 1:\n\n                counts = this.gravity.modifier==-1 ? col : this.span-1-col\n\n                for (let i=0; i<counts; i++) {\n                    if (this.gameState[board][row][col + this.gravity.modifier]===\" \") {\n                        col += this.gravity.modifier\n                    } else {\n                        break\n                    }\n                }\n                break\n            // Forward/Backward\n            case 2:\n\n                counts = this.gravity.modifier==-1 ? row : this.span-1-row\n\n                for (let i=0; i<counts; i++) {\n                    if (this.gameState[board][row + this.gravity.modifier][col]===\" \") {\n                        row += this.gravity.modifier\n                    } else {\n                        break\n                    }\n                }\n                break\n        }\n\n        return [board, row, col]\n    }\n\n    /*\n        TODO, there's a bug where some points don't move as needed. I think this may be due\n        to the order in which the tiles are moved\n    */\n    shiftGravity (direction) {\n\n        this.gravity.axis = this.directions[direction]\n        this.gravity.modifier = this.modifiers[direction]\n\n        const max = Math.abs((this.gravity.modifier==-1 ? this.span-1 : 0)-(this.span-1))\n\n        switch (this.gravity.axis) {\n\n            // Up/Down (boards)\n            case 0:\n                // For every row\n                for (let r=0; r<this.span; r++) {\n                    // For every column\n                    for (let c=0; c<this.span; c++) {\n\n                        let i2 = 0\n\n                        everyBoard:\n                        for (let i=0; i<this.span; i++) {\n\n                            if (this.gameState[Math.abs(max-i)][r][c]===\" \") {\n\n                                i2 = i+1\n\n                                while (i2<this.span) {\n                                    if (i2<this.span && i<this.span && this.gameState[Math.abs(max-i2)][r][c] !== \" \") {\n\n                                        this.board.moveSphere({b: Math.abs(max-i2), r, c}, {b: Math.abs(max-i), r, c}, \"y\", Math.abs(max-i))\n\n                                        this.gameState[Math.abs(max-i)][r][c] = this.gameState[Math.abs(max-i2)][r][c]\n                                        this.gameState[Math.abs(max-i2)][r][c] = \" \"\n\n                                        i += i2\n                                    }\n\n                                    i2++\n                                }\n                                break everyBoard\n                            }\n                        }\n                    }\n                }\n                break\n\n            // Left/Right (columns)\n            case 1:\n\n                // For every board\n                for (let b=0; b<this.span; b++) {\n                    // For every row\n                    for (let r=0; r<this.span; r++) {\n\n                        let i2 = 0\n\n                        everyColumn:\n                        for (let i=0; i<this.span; i++) {\n\n                            if (this.gameState[b][r][Math.abs(max-i)]===\" \") {\n\n                                i2 = i+1\n\n                                while (i2<this.span) {\n                                    if (i2<this.span && i<this.span && this.gameState[b][r][Math.abs(max-i2)]!==\" \") {\n\n                                        this.board.moveSphere({b, r, c: Math.abs(max-i2)}, {b, r, c: Math.abs(max-i)}, \"x\", Math.abs(max-i))\n\n                                        this.gameState[b][r][Math.abs(max-i)] = this.gameState[b][r][Math.abs(max-i2)]\n                                        this.gameState[b][r][Math.abs(max-i2)] = \" \"\n\n                                        i += i2\n                                    }\n\n                                    i2++\n                                }\n                                break everyColumn\n                            }\n\n                        }\n\n                    }\n                }\n                break\n\n            // Forward/Backward (rows)\n            case 2:\n\n                // For every board\n                for (let b=0; b<this.span; b++) {\n                    // For every row\n                    for (let r=0; r<this.span; r++) {\n\n                        let i2 = 0\n\n                        everyColumn:\n                        for (let i=0; i<this.span; i++) {\n\n                            if (this.gameState[b][Math.abs(max-i)][r]===\" \") {\n\n                                i2 = i+1\n\n                                while (i2<this.span) {\n                                    if (i2<this.span && i<this.span && this.gameState[b][Math.abs(max-i2)][r]!==\" \") {\n\n                                        this.board.moveSphere({b, r: Math.abs(max-i2), c: r}, {b, r: Math.abs(max-i), c: r}, \"z\", Math.abs(max-i))\n\n                                        this.gameState[b][Math.abs(max-i)][r] = this.gameState[b][Math.abs(max-i2)][r]\n                                        this.gameState[b][Math.abs(max-i2)][r] = \" \"\n\n                                        i += i2\n                                    }\n\n                                    i2++\n                                }\n                                break everyColumn\n                            }\n                        }\n                    }\n                }\n\n                break\n        }\n\n        this.checkAll()\n\n        this.board.clearHighlightedBoxes()\n        this.board.setPreviewColour(this.playerIndex)\n    }\n\n\n    // Check the game status for all placed items (when the gravity is changed, and every item is potentially re-arranged)\n    // TODO, optimize this, as this is insanely inefficient\n    checkAll () {\n        let match = false\n        let player\n\n        for (let b=0; b<this.span; b++) {\n            for (let r=0; r<this.span; r++) {\n                for (let c=0; c<this.span; c++) {\n\n                    if (this.gameState[b][r][c] !== \" \") {\n                        match = match || this.isWinningMove(b, r, c, this.gameState[b][r][c])\n                        if (match) {\n                            player = this.gameState[b][r][c]\n                            break\n                        }\n                    }\n                }\n            }\n        }\n\n\n        return player\n\n\n        // if (match) {\n        //     playerNum.style.color = this.board.playerColours[player]\n        //     winsDisplay.style.display = \"inline-block\"\n        // } else {\n        //     this.playerIndex = ++this.playerIndex % this.players.length\n        //     winsDisplay.style.display = \"none\"\n        //     playerNum.style.color = this.board.playerColours[this.playerIndex]\n        // }\n    }\n\n}\n\ntypeof window!=\"undefined\" && (window.exports = window.exports || {})\ntypeof window!=\"undefined\" && (window.GameLogic = GameLogic)\nexports.GameLogic = GameLogic\n\"use strict\"\n\nclass VRGameBoard extends GameBoard {// eslint-disable-line\n\n    constructor (game) {\n        super(game, true)\n\n        this.arrowNames = [\"left\", \"right\", \"up\", \"down\", \"forward\", \"backward\"]\n        this.arrowModels = []\n    }\n\n    loadTHREEjsItems (items) {\n        this.scene = items.scene\n        this.camera = items.camera\n        this.raycaster = items.raycaster\n        this.mouse = items.mouse\n        this.renderer = items.renderer\n        this.boardElement = items.boardElement\n\n        this.heightOffset = 0.5\n        this.scene.add(this.previewSphere)\n\n        this.initBoards()\n        this.renderLoop()\n        this.rotate()\n\n        this.boardElement.addEventListener(\"mousemove\", event => {\n            const sizeY = event.target.height\n            const sizeX = event.target.width\n            this.mouse.x = event.offsetX / sizeX * 2 - 1\n            this.mouse.y = -event.offsetY / sizeY * 2 + 1\n        }, false)\n    }\n\n    // Add arrow models\n    makeArrows () {\n\n        const loader = new THREE.ObjectLoader()\n\n        // Don't re-draw them\n        if (!this.arrowModels.length) {\n            for (let a=0; a<6; a++) {\n                loader.load(\"arrows\", model => {\n\n                    model.position.x = positions[a].x * 2 * Math.PI\n                    model.position.y = positions[a].y * 2 * Math.PI\n                    model.position.z = positions[a].z * 2 * Math.PI\n\n                    model.rotation.x = rotations[a].x * 2 * Math.PI\n                    model.rotation.y = rotations[a].y * 2 * Math.PI\n                    model.rotation.z = rotations[a].z * 2 * Math.PI\n\n                    model.children.forEach(c => {\n                        if (a==3) {\n                            c.material.emissive.setHex(this.colours.CYAN)\n                            this.clickedObject = model\n                        } else {\n                            c.material.emissive.setHex(this.colours.BRIGHTGREY)\n                        }\n                    })\n\n                    this.arrowModels.push(model)\n                    model.data = {arrowIndex: a}\n                    this.scene.add(model)\n                })\n            }\n        }\n    }\n\n    highlightArrow (index) {\n\n        const arrowModel = this.arrowModels.filter(a => a.data.arrowIndex==index)\n\n        // Clear old arrow\n        if (this.clickedObject) {\n            this.clickedObject.children.forEach(c => c.material.emissive.setHex(this.colours.BRIGHTGREY))\n        }\n\n        // Set new one to cyan\n        arrowModel[0].children.forEach(c => c.material.emissive.setHex(this.colours.CYAN))\n        this.clickedObject = arrowModel[0]\n    }\n\n    renderLoop () {\n\n        requestAnimationFrame(() => this.renderLoop())\n\n        this.lerpBoxes()\n        this.lerpSpheres()\n\n        const intersects = this.raycaster.intersectObjects(this.scene.children, true)\n\n        if (intersects.length) {\n\n            if (this.hoveredObject && this.hoveredObject.type==\"Scene\") {\n\n                document.body.style.cursor = \"pointer\"\n\n                if (this.hoveredObject == this.clickedObject) {\n                    // do nothing\n                } else {\n\n                    if (this.mouseIsDown) {\n\n                        this.highlightArrow(this.hoveredObject.data.arrowIndex)\n\n                        console.log(\"clicked\", this.arrowNames[this.clickedObject.data.arrowIndex])\n\n                        if (ws) {\n                            ws.send(JSON.stringify({\n                                direction: this.arrowNames[this.clickedObject.data.arrowIndex],\n                                userId: \"1234\",\n                                username: \"rob\",\n                                type: \"text\",\n                                room: roomNameValue,\n                                type: \"gravity\"\n                            }))\n                        } else {\n                            this.game.shiftGravity(this.arrowNames[this.clickedObject.data.arrowIndex])\n                        }\n\n                    } else {\n                        // Hovering over non clicked item without the mouse down\n                        this.arrowModels.forEach(arrow => {\n                            if (arrow != this.clickedObject) {\n                                arrow.children.forEach(c => c.material.emissive.setHex(this.colours.BRIGHTGREY))\n                            }\n                        })\n\n                        if (this.hoveredObject != this.clickedObject) {\n                            this.hoveredObject.children.forEach(c => c.material.emissive.setHex(this.colours.YELLOW))\n                        }\n                    }\n                }\n\n\n            } else {\n\n                // If still hovering on the same thing...\n                if (this.hoveredObject && (this.hoveredObject==intersects[0].object || this.hoveredObject==intersects[0].object.parent)) {\n\n\n                    if (this.mouseIsDown && !this.hoveredObject.data.isClicked) {\n                        this.hoveredObject.data.isClicked = true\n                        setTimeout(() => {\n                            if (this.hoveredObject) {\n                                this.hoveredObject.data.isClicked = false\n                            }\n                        }, 500)\n\n                        const {b, r, c} = this.previewSphere.data\n\n                        if (this.game.gameState[b][r][c]===\" \") {\n                            if (ws){\n                                sendMove(this.game.playerIndex, b, r, c, this.game.gameState)\n                            } else {\n                                this.game.makeMove(this.game.playerIndex, b, r, c)\n                            }\n                        }\n                    }\n\n                } else {\n\n                    // Set the currently hovered over object\n                    this.hoveredObject = intersects[0].object.data ? intersects[0].object : intersects[0].object.parent\n                    this.clearHighlightedBoxes()\n\n                    if (this.hoveredObject.data && this.hoveredObject.type!=\"Scene\") {\n                        // Also TODO, decide which one of these to do, based on the current gravity\n\n                        if (!this.isLerpingBoxes && !this.someSphereIsLerping) {\n\n                            if (this.game.gravityEnabled) {\n                                if (this.hoveredObject.data) {\n                                    switch (this.game.gravity.axis) {\n                                        case 0:\n                                            this.highlightColumn(this.hoveredObject.data)\n                                            break\n                                        case 1:\n                                            this.highlightRowY(this.hoveredObject.data)\n                                            break\n                                        case 2:\n                                            this.highlightRowX(this.hoveredObject.data)\n                                            break\n                                    }\n                                }\n                            } else {\n                                // Highlight only the hovered over box\n                                const {b, r, c} = this.hoveredObject.data\n                                this.boxes[b][r][c].material.opacity = this.OPACITY_ON\n                                this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY)\n                                this.highlightedBoxes.push(this.boxes[b][r][c])\n                            }\n\n                            // Render the preview sphere at the correct location\n                            const pos = this.getPreviewPosition(this.hoveredObject)\n\n                            if (pos) {\n                                this.previewSphere.position.x = pos.x\n                                this.previewSphere.position.y = pos.y\n                                this.previewSphere.position.z = pos.z\n                                this.previewSphere.data = {\n                                    b: pos.b,\n                                    r: pos.r,\n                                    c: pos.c\n                                }\n                                this.previewSphere.material.opacity = 0.5\n                            }\n                            // === ?\n                            // else {\n                            //     this.previewSphere.material.opacity = 0\n                            // }\n                        }\n                    }\n                }\n            }\n\n        } else {\n\n            if (this.hoveredObject && this.hoveredObject.type==\"Scene\") {\n\n                document.body.style.cursor = \"default\"\n\n                if (this.arrowModels.length) {\n                    this.arrowModels.forEach(arrow => {\n\n                        if (arrow != this.clickedObject) {\n                            arrow.children.forEach(c => c.material.emissive.setHex(this.colours.BRIGHTGREY))\n                        }\n                    })\n                }\n\n            } else {\n\n                this.clearHighlightedBoxes()\n                this.previewSphere.material.opacity = 0\n\n                if (this.hoveredObject) {\n                    if (this.hoveredObject.material) {\n                        this.hoveredObject.material.emissive.setHex(this.colours.LIGHTGREY)\n                        this.hoveredObject.material.opacity = this.OPACITY_OFF\n                        this.hoveredObject.data.isClicked = false\n                    } else if (this.hoveredObject.parent && this.hoveredObject.parent.material) {\n                        this.hoveredObject.parent.material.emissive.setHex(this.colours.LIGHTGREY)\n                        this.hoveredObject.parent.material.opacity = this.OPACITY_OFF\n                        this.hoveredObject.parent.data.isClicked = false\n                    }\n\n                }\n            }\n\n\n            this.hoveredObject = null\n        }\n\n    }\n\n    rotate () {\n\n    }\n\n}\n\"use strict\"\n\nlet ws\nlet roomNameValue\n\nlet rotation = 45\n\nconst rotations = [\n    {x: 0.25, y: 0.0, z: 0}, // left\n    {x: 0.25, y: 0.50, z: 0}, // right\n    {x: 0.25, y: 0.75, z: 0}, // up\n    {x: 0.25, y: 0.25, z: 0}, // down\n    {x: 0.25, y: 0.50, z: 0.25}, // forward\n    {x: 0.25, y: 0.50, z: 0.75} // backward\n]\nconst positions = [\n    {x: -0.125, y: -0.4, z: 0}, // left\n    {x: 0.125, y: -0.4, z: 0}, // right\n    {x: 0, y: -0.3, z: 0}, // up\n    {x: 0, y: -0.5, z: 0}, // down\n    {x: 0, y: -0.4, z: -0.125}, // forward\n    {x: 0, y: -0.4, z: 0.125} // backward\n]\n\nwindow.getParameters = () => {\n\n    const parameters = {}\n\n    // Pull query parameters from url\n    const parametersString = location.search.substring(1)\n\n    if (parametersString.length) {\n        parametersString.split(\"&\").forEach(p => {\n            const [k,v] =  p.split(\"=\")\n            parameters[k] = v\n        })\n    }\n\n    return parameters\n}\n\n\nwindow.addEventListener(\"load\", () => {\n\n    // Prevent the device from going into sleep mode, to keep the screen turned on\n    screen.keepAwake = true\n\n    // Initialise THREEjs components, starting with the renderer\n    const renderer = new THREE.WebGLRenderer({antialias: true, alpha: true})\n    renderer.setPixelRatio(window.devicePixelRatio)\n    renderer.setSize(window.innerWidth, window.innerHeight)\n    document.body.appendChild(renderer.domElement)\n\n    renderer.domElement.addEventListener(\"click\", () => {\n        new NoSleep().enable()\n\n        if (!window.location.href.includes(\"localhost\")) {\n            document.fullscreenEnabled && renderer.domElement.requestFullScreen() ||\n            document.webkitFullscreenEnabled && renderer.domElement.webkitRequestFullScreen() ||\n            document.mozFullScreenEnabled && renderer.domElement.mozRequestFullScreen() ||\n            document.msFullScreenEnabled && renderer.domElement.msRequestFullScreen()\n        }\n    })\n\n    let effect = new THREE.VREffect(renderer)\n    effect.separation = -10\n    effect.setSize(window.innerWidth, window.innerHeight)\n\n    let vrDisplay\n    if (navigator.getVRDisplays) {\n        navigator.getVRDisplays().then(displays => displays.length && (vrDisplay = displays[0]))\n    }\n\n\n    // Button to enable VR mode\n    enterVRButton.addEventListener(\"click\", () => {\n\n        // Go back to non VR mode\n        if (enterVRButton.classList.contains(\"small\")) {\n            effect = new THREE.VREffect(renderer)\n            effect.separation = 0\n            effect.setSize(window.innerWidth, window.innerHeight)\n\n            enterVRButton.classList.remove(\"small\")\n            game.board.usingVR = false\n        } else {\n            // Start VR mode\n            if (navigator.userAgent.includes(\"Mobile VR\")) {\n                vrDisplay.requestPresent([{source: renderer.domElement}])\n            } else {\n                effect = new THREE.StereoEffect(renderer)\n                effect.separation = 0\n                effect.setSize(window.innerWidth, window.innerHeight)\n            }\n            game.board.usingVR = true\n\n            enterVRButton.classList.add(\"small\")\n        }\n    })\n\n    // Scenes and camera\n    const fov = 70\n    const scene = new THREE.Scene()\n    const camera = new THREE.PerspectiveCamera(fov, window.innerWidth / window.innerHeight, 1, 1000)\n    scene.add(camera)\n    camera.rotation.order = \"YXZ\"\n    camera.position.z = 4\n    camera.position.y = 2\n\n    // Controls\n    let controls = new THREE.OrbitControls(camera, renderer.domElement)\n    controls.target.set(\n        Math.cos(camera.position.x*Math.PI/180) * 4,\n        camera.position.y,\n        Math.sin(camera.position.z*Math.PI/180) * 4\n    )\n    controls.enablePan = false\n    controls.enableZoom = false\n\n    // Set VR controls if available\n    const setOrientationControls = event => {\n\n        if (!event.alpha) return\n\n        controls = new THREE.VRControls(camera)\n        controls.update()\n\n        window.removeEventListener(\"deviceorientation\", setOrientationControls)\n    }\n    window.addEventListener(\"deviceorientation\", setOrientationControls)\n\n\n    const raycaster = new THREE.Raycaster()\n    const mouse = new THREE.Vector2()\n    const light = new THREE.DirectionalLight( 0xffffff, 0.5 )\n    light.position.set( 0, 1, 0 ).normalize()\n    scene.add(light)\n\n    const resetGame = () => {\n\n        const {g, span, p} = getParameters()\n\n        window.game = new GameLogic({\n            gravityEnabled: !g || g==\"1\",\n            gameBoard: VRGameBoard,\n            span: parseInt(span) || 3,\n            players: parseInt(p) || 2,\n            isVR: true\n        })\n        game.board.loadTHREEjsItems({\n            scene: scene,\n            camera: camera,\n            raycaster: raycaster,\n            mouse: mouse,\n            renderer: renderer,\n            boardElement: renderer.domElement\n        })\n        game.board.makeArrows()\n        roomNameValue = getURLParameter(\"roomName\")\n\n        if (roomNameValue !== \"\") {\n            connectWebSockets(roomNameValue)\n            //roomNameTitle.innerText = roomNameValue\n        }\n    }\n    resetGame()\n\n    const render = () => {\n\n        requestAnimationFrame(render)\n        controls.update()\n\n        camera.lookAt(scene.position)\n        camera.updateMatrixWorld()\n        raycaster.setFromCamera(mouse, camera)\n\n        effect.render(scene, camera)\n\n    }\n    render()\n\n\n    const setRotation = rotation => {\n        camera.position.x = Math.cos(rotation*Math.PI/180) * 5\n        camera.position.z = Math.sin(rotation*Math.PI/180) * 5\n    }\n    setRotation(rotation=-45)\n\n    renderer.domElement.addEventListener(\"wheel\", ({deltaY}) => {\n        rotation = (rotation + (deltaY > 0 ? 1 : -1) * 5) % 360\n        setRotation(rotation)\n    })\n\n    document.addEventListener(\"mousedown\", () => {\n        game.board.mouseIsDown = true\n    })\n\n    document.addEventListener(\"mouseup\", () => {\n        game.board.mouseIsDown = false\n    })\n\n    document.addEventListener(\"click\", () => {\n        game.board.mouseIsDown = false\n    })\n\n    window.addEventListener(\"keydown\", e => {\n        if (e.code == \"Space\") {\n            game.board.toggleExploded()\n        }\n    })\n\n\n    /* MOTION CONTROLLER*/\n    let getVideoFeedAttempts = 0\n\n    const getVideoFeed = () => {\n        try {\n            if (\"mozGetUserMedia\" in navigator) {\n                navigator.mozGetUserMedia(\n                    {video: { facingMode: \"environment\" }},\n                    stream => {\n                        video.src = window.URL.createObjectURL(stream)\n                    },\n                    err => {\n                        console.log(err)\n                        alert(\"There was an error accessing the camera. Please try again and ensure you are using https\")\n                    }\n                )\n            } else {\n                const mediaDevicesSupport = navigator.mediaDevices && navigator.mediaDevices.getUserMedia\n\n                if (mediaDevicesSupport) {\n                    navigator.mediaDevices\n                    .getUserMedia({ video: { facingMode: \"environment\" } })\n                    .then(stream => {\n                        video.src = window.URL.createObjectURL(stream)\n                    })\n                    .catch(err => {\n                        console.log(err)\n                        getVideoFeedAttempts++\n\n                        // Sometimes, getting the camera can fail. Re-attempting usually works, on refresh. This simulates that.\n                        if (getVideoFeedAttempts<3) {\n                            getVideoFeed()\n                        } else {\n                            alert(\"There was an error accessing the camera. Please try again and ensure you are using https\")\n                        }\n                    })\n                } else {\n                    const getUserMedia =\n                        navigator.getUserMedia ||\n                        navigator.webkitGetUserMedia ||\n                        navigator.mozGetUserMedia ||\n                        navigator.msGetUserMedia\n\n                    if (getUserMedia) {\n                        getUserMedia(\n                            { video: { facingMode: \"environment\" } },\n                            stream => {\n                                video.src = window.URL.createObjectURL(stream)\n                            },\n                            err => {\n                                console.log(err)\n                                alert(\"There was an error accessing the camera. Please try again and ensure you are using https.\")\n                            }\n                        )\n                    } else {\n                        alert(\"Camera not available\")\n                    }\n                }\n            }\n\n        } catch (e) {\n            alert(\"Error getting camera feed. Please ensure you are using https.\")\n        }\n    }\n\n    window.video = document.createElement(\"video\")\n    video.autoplay = true\n    video.width = window.innerWidth\n    video.height = window.innerHeight / 2\n    getVideoFeed()\n\n    const buffer = document.createElement(\"canvas\")\n    buffer.width = video.width\n    buffer.height = video.height\n    const bufferC = buffer.getContext(\"2d\")\n\n    let lastX = 0\n    let lastY = 0\n\n    let newX = 0\n    let newY = 0\n\n    const bounds = 100\n    let foundWithinBounds = false\n\n    let frameCounter = -1\n\n    const moveCursor = (x, y) => {\n\n        // console.log(x, y)\n        tempCursor.style.marginTop = parseInt(y/video.height * window.innerHeight)+\"px\"\n        let leftM = parseInt(x/video.width * window.innerWidth)\n\n        if (game.board.usingVR) {\n            leftM = leftM / 2\n        }\n\n        tempCursor.style.marginLeft = leftM+\"px\"\n\n        game.board.mouse.x = x / video.width * 2 - 1\n        game.board.mouse.y = (y / video.height * 2 - 1) * -1\n    }\n\n    window.readCircle = () => {\n\n        requestAnimationFrame(readCircle)\n\n        // Only read a new position every 10 frames\n        if (++frameCounter%5==0) {\n\n            bufferC.drawImage(video, 0, 0, video.width, video.height)\n            const {data} = bufferC.getImageData(0, 0, video.width, video.height)\n\n            let avgX = 0\n            let avgY = 0\n            let counter = 0\n\n            let startR = 0\n            let startC = 0\n            let endR = video.height\n            let endC = video.width\n\n            // Limit the search area when the position can be roughly estimated from the previous frame\n            if (foundWithinBounds) {\n                startR = parseInt(Math.max(lastY - bounds, 0))\n                startC = parseInt(Math.max(lastX - bounds, 0))\n                endR = parseInt(Math.min(lastY + bounds, video.width))\n                endC = parseInt(Math.min(lastX + bounds, video.height))\n            }\n\n            // For every 4th row\n            for (let r=startR; r<endR; r+=4) {\n                // For every 4th column\n                for (let c=startC; c<endC; c+=4) {\n\n                    // Pixel coords\n                    const p = r*video.width + c\n                    const pixel = [data[p*4]/255, data[p*4+1]/255, data[p*4+2]/255]\n\n                    if (pixel[0]<=0.75 && pixel[1] >= 0.75 && pixel[2]<=0.7) {\n                        counter++\n                        avgX += c\n                        avgY += r\n                    }\n                }\n            }\n\n            if (counter>10) {\n                newX = avgX / counter\n                newY = avgY / counter\n                foundWithinBounds = true\n            } else {\n                foundWithinBounds = false\n            }\n        }\n\n        lastX += (newX-lastX)/20\n        lastY += (newY-lastY)/20\n\n        moveCursor(lastX, lastY)\n    }\n\n    // TEMP\n    if (getParameters().t == \"y\") {\n        readCircle()\n    }\n\n    // Resize the rendered element on window resize\n    window.addEventListener(\"resize\", () => {\n        effect.setSize(window.innerWidth, window.innerHeight)\n        camera.aspect = window.innerWidth / window.innerHeight\n        camera.updateProjectionMatrix()\n    })\n\n    window.addEventListener(\"T^3Win\", winnerWinnerChickenDinner)\n    window.addEventListener(\"T^3Tie\", noChickenDinner)\n})\n\n\nfunction  winnerWinnerChickenDinner(e) {\n    winPanel.style.display = \"block\"\n    winPanel.style.textAlign = \"center\"\n    winPanel.innerText = game.players[e.detail].name + \" Winns!\"\n\n}\nfunction  noChickenDinner(e) {\n    winPanel.style.display = \"block\"\n    winPanel.style.textAlign = \"center\"\n    winPanel.innerText = game.players[e.detail].name + \" Caused a tie!\"\n\n}\n\nfunction connectWebSockets(roomName) {\n    ws =  new WebSocket(\"ws://vrscrible.localhost:8000/\" + roomName)\n\n    ws.addEventListener(\"message\", (message) => {\n        const data = JSON.parse(message.data)\n        console.log(data)\n\n        if (data.type === \"gravity\") {\n            game.shiftGravity(data.direction)\n\n        } else if (data.type === \"move\") {\n\n            const player = data.playerIndex\n            const {b, r, c} = data\n            console.log(player, b, r, c)\n            game.makeMove(player, b, r, c)\n        }\n    })\n\n    ws.addEventListener(\"open\", () => {\n        console.log(\"connect ws\")\n        console.log(roomName)\n        ws.send(JSON.stringify({userId: \"1234\", username: \"rob\", type: \"setUp\", room: roomName }))\n\n        getGameState(roomName)\n    })\n}\n\nfunction getURLParameter(name) {\n    // https://stackoverflow.com/questions/11582512/how-to-get-url-parameters-with-javascript\n    return decodeURIComponent((new RegExp(\"[?|&]\" + name + \"=\" + \"([^&;]+?)(&|#|;|$)\").exec(location.search) || [null, \"\"])[1].replace(/\\+/g, \"%20\")) || null\n}\n\nfunction sendMove(playerIndex, b, r, c, gameState) {\n    if (ws){\n        ws.send(JSON.stringify({\n            playerIndex: playerIndex,\n            b: b,\n            r: r,\n            c: c,\n            userId: \"1234\",\n            username: \"rob\",\n            room: roomNameValue,\n            type: \"move\",\n            gameState: gameState\n        }))\n    }\n    //setPlayerLabels()\n}\n\nfunction sendState(gameState) {\n    if (ws){\n        ws.send(JSON.stringify({\n            room: roomNameValue,\n            type: \"state\",\n            gameState: gameState\n        }))\n    }\n}\n\nfunction saveGameState(roomName, gameState) {\n    fetch(\"./saveGameState\", {\n        method: \"post\",\n        body: JSON.stringify({roomName: roomName, gameState: gameState})\n    })\n}\n\nfunction getGameState(roomName) {\n\n    fetch(\"./getGameState?roomName=\" + roomName, {\n        method: \"get\",\n        headers: {\n            \"Accept\": \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }\n    }).then(res => res.json())\n    .then(data => {\n        if (data.gameState !== null){\n            game.board.render(data.gameState)\n            game.gameState  = data.gameState\n        }\n    })\n\n}\n//# sourceMappingURL=scriptVR.concat.js.map"]}