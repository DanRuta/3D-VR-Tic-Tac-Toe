{"version":3,"sources":["../dev/scriptVR.js"],"names":["ws","hoveredObject","clickedObject","mouseIsDown","rotation","WHITE","YELLOW","CYAN","arrowModels","arrowNames","rotations","x","y","z","positions","window","addEventListener","screen","keepAwake","renderer","THREE","WebGLRenderer","antialias","alpha","setPixelRatio","devicePixelRatio","setSize","innerWidth","innerHeight","document","body","appendChild","domElement","NoSleep","enable","location","href","includes","fullscreenEnabled","requestFullScreen","webkitFullscreenEnabled","webkitRequestFullScreen","mozFullScreenEnabled","mozRequestFullScreen","msFullScreenEnabled","msRequestFullScreen","vrDisplay","effect","VREffect","separation","navigator","getVRDisplays","then","displays","length","enterVRButton","getElementById","classList","contains","remove","userAgent","requestPresent","source","StereoEffect","add","scene","Scene","camera","PerspectiveCamera","position","controls","OrbitControls","target","set","noPan","noZoom","setOrientationControls","event","VRControls","update","removeEventListener","loader","ObjectLoader","raycaster","Raycaster","mouse","Vector2","light","DirectionalLight","normalize","a","load","model","Math","PI","children","forEach","c","material","emissive","setHex","push","data","arrowIndex","render","requestAnimationFrame","lookAt","updateMatrixWorld","setFromCamera","intersects","intersectObjects","object","name","toLowerCase","startsWith","parent","style","cursor","console","log","send","JSON","stringify","direction","userId","username","type","room","roomNameValue","game","shiftGravity","arrow","setRotation","sin","cos","deltaY"],"mappings":"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","file":"scriptVR.min.js","sourcesContent":["\"use strict\"\r\n\r\nlet ws\r\nlet hoveredObject\r\nlet clickedObject\r\nlet mouseIsDown = false\r\nlet rotation = 45\r\n\r\nconst WHITE = 0xaaaaaa\r\nconst YELLOW = 0xaaaa00\r\nconst CYAN = 0x00aaaa\r\nconst arrowModels = []\r\nconst arrowNames = [\"left\", \"right\", \"up\", \"down\", \"forward\", \"backward\"]\r\nconst rotations = [\r\n    {x: 0.25, y: 0.0, z: 0}, // left\r\n    {x: 0.25, y: 0.50, z: 0}, // right\r\n    {x: 0.25, y: 0.75, z: 0}, // up\r\n    {x: 0.25, y: 0.25, z: 0}, // down\r\n    {x: 0.25, y: 0.50, z: 0.25}, // forward\r\n    {x: 0.25, y: 0.50, z: 0.75} // backward\r\n]\r\nconst positions = [\r\n    {x: -0.125, y: 0, z: 0}, // left\r\n    {x: 0.125, y: 0, z: 0}, // right\r\n    {x: 0, y: 0.1, z: 0}, // up\r\n    {x: 0, y: -0.1, z: 0}, // down\r\n    {x: 0, y: 0, z: -0.125}, // forward\r\n    {x: 0, y: 0, z: 0.125} // backward\r\n]\r\n\r\n\r\nwindow.addEventListener(\"load\", () => {\r\n\r\n    // Prevent the device from going into sleep mode, to keep the screen turned on\r\n    screen.keepAwake = true\r\n\r\n    // Initialise THREEjs components, starting with the renderer\r\n    const renderer = new THREE.WebGLRenderer({antialias: true, alpha: true})\r\n    renderer.setPixelRatio(window.devicePixelRatio)\r\n    renderer.setSize(window.innerWidth, window.innerHeight)\r\n    document.body.appendChild(renderer.domElement)\r\n\r\n    renderer.domElement.addEventListener(\"click\", () => {\r\n        new NoSleep().enable()\r\n\r\n        if (!window.location.href.includes(\"localhost\")) {\r\n            document.fullscreenEnabled && renderer.domElement.requestFullScreen() ||\r\n            document.webkitFullscreenEnabled && renderer.domElement.webkitRequestFullScreen() ||\r\n            document.mozFullScreenEnabled && renderer.domElement.mozRequestFullScreen() ||\r\n            document.msFullScreenEnabled && renderer.domElement.msRequestFullScreen()\r\n        }\r\n    })\r\n\r\n    let effect = new THREE.VREffect(renderer)\r\n    effect.separation = 0\r\n    effect.setSize(window.innerWidth, window.innerHeight)\r\n\r\n    let vrDisplay\r\n    if (navigator.getVRDisplays) {\r\n        navigator.getVRDisplays().then(displays => displays.length && (vrDisplay = displays[0]))\r\n    }\r\n\r\n\r\n    // Button to enable VR mode\r\n    enterVRButton.addEventListener(\"click\", () => {\r\n        const controls = document.getElementById(\"controls\")\r\n\r\n        if (enterVRButton.classList.contains(\"small\")) {\r\n            effect = new THREE.VREffect(renderer)\r\n            effect.separation = 0\r\n            effect.setSize(window.innerWidth, window.innerHeight)\r\n\r\n            enterVRButton.classList.remove(\"small\")\r\n        } else {\r\n            if (navigator.userAgent.includes(\"Mobile VR\")) {\r\n                vrDisplay.requestPresent([{source: renderer.domElement}])\r\n            } else {\r\n                effect = new THREE.StereoEffect(renderer)\r\n                effect.separation = 0\r\n                effect.setSize(window.innerWidth, window.innerHeight)\r\n            }\r\n\r\n            enterVRButton.classList.add(\"small\")\r\n        }\r\n    })\r\n\r\n    // Scenes and camera\r\n    const fov = 70\r\n    const scene = new THREE.Scene()\r\n    const camera = new THREE.PerspectiveCamera(fov, window.innerWidth / window.innerHeight, 1, 1000)\r\n    scene.add(camera)\r\n    camera.position.z = 4\r\n    camera.position.y = 2\r\n\r\n    // Controls\r\n    let controls = new THREE.OrbitControls(camera, renderer.domElement)\r\n    controls.target.set(\r\n        camera.position.x+0.15,\r\n        camera.position.y,\r\n        camera.position.z\r\n    )\r\n    controls.noPan  = true\r\n    controls.noZoom = true\r\n\r\n    // Set VR controls if available\r\n    const setOrientationControls = event => {\r\n\r\n        if (!event.alpha) return\r\n\r\n        controls = new THREE.VRControls(camera)\r\n        controls.update()\r\n\r\n        window.removeEventListener(\"deviceorientation\", setOrientationControls)\r\n    }\r\n    window.addEventListener(\"deviceorientation\", setOrientationControls)\r\n\r\n\r\n    const loader = new THREE.ObjectLoader()\r\n    const raycaster = new THREE.Raycaster()\r\n    const mouse = new THREE.Vector2()\r\n    const light = new THREE.DirectionalLight( 0xffffff, 0.5 )\r\n    light.position.set( 0, 1, 0 ).normalize()\r\n    scene.add(light)\r\n\r\n\r\n\r\n    // Add arrow models\r\n    for (let a=0; a<6; a++) {\r\n        loader.load(\"lib/arrow.json\", model => {\r\n\r\n            model.position.x = positions[a].x * 2 * Math.PI\r\n            model.position.y = positions[a].y * 2 * Math.PI\r\n            model.position.z = positions[a].z * 2 * Math.PI\r\n\r\n            model.rotation.x = rotations[a].x * 2 * Math.PI\r\n            model.rotation.y = rotations[a].y * 2 * Math.PI\r\n            model.rotation.z = rotations[a].z * 2 * Math.PI\r\n\r\n            model.children.forEach(c => {\r\n                if (a==3) {\r\n                    c.material.emissive.setHex(CYAN)\r\n                    clickedObject = model\r\n                } else {\r\n                    c.material.emissive.setHex(WHITE)\r\n                }\r\n            })\r\n\r\n            arrowModels.push(model)\r\n            model.data = {arrowIndex: a}\r\n            scene.add(model)\r\n        })\r\n    }\r\n\r\n\r\n    const render = () => {\r\n\r\n        requestAnimationFrame(render)\r\n        controls.update()\r\n\r\n        camera.lookAt(scene.position)\r\n        camera.updateMatrixWorld()\r\n        raycaster.setFromCamera(mouse, camera)\r\n\r\n        const intersects = raycaster.intersectObjects(scene.children, true)\r\n\r\n        if (intersects.length) {\r\n\r\n            hoveredObject = intersects[0].object.name.toLowerCase().startsWith(\"box\") ? intersects[0].object.parent : intersects[0].object\r\n\r\n            document.body.style.cursor = \"pointer\"\r\n\r\n            if (hoveredObject == clickedObject) {\r\n                // do nothing\r\n            } else {\r\n\r\n                if (mouseIsDown) {\r\n                    if (clickedObject) {\r\n                        // Clear old one\r\n                        clickedObject.children.forEach(c => c.material.emissive.setHex(WHITE))\r\n                    }\r\n\r\n                    // Set new one to cyan\r\n                    hoveredObject.children.forEach(c => c.material.emissive.setHex(CYAN))\r\n                    clickedObject = hoveredObject\r\n                    console.log(\"clicked\", arrowNames[clickedObject.data.arrowIndex])\r\n                    if (ws){\r\n                        ws.send(JSON.stringify({\r\n                            direction: arrowNames[clickedObject.data.arrowIndex],\r\n                            userId: \"1234\",\r\n                            username: \"rob\",\r\n                            type: \"text\",\r\n                            room: roomNameValue,\r\n                            type: \"gravity\"\r\n                        }))\r\n\r\n                    } else {\r\n                        game.shiftGravity(arrowNames[clickedObject.data.arrowIndex])\r\n                    }\r\n                } else {\r\n                    // Hovering over non clicked item without the mouse down\r\n                    arrowModels.forEach(arrow => {\r\n                        if (arrow != clickedObject) {\r\n                            arrow.children.forEach(c => c.material.emissive.setHex(WHITE))\r\n                        }\r\n                    })\r\n\r\n                    if (hoveredObject != clickedObject) {\r\n                        hoveredObject.children.forEach(c => c.material.emissive.setHex(YELLOW))\r\n                    }\r\n                }\r\n            }\r\n\r\n        } else {\r\n            document.body.style.cursor = \"default\"\r\n            if (arrowModels) {\r\n                arrowModels.forEach(arrow => {\r\n\r\n                    if (arrow != clickedObject) {\r\n                        arrow.children.forEach(c => c.material.emissive.setHex(WHITE))\r\n                    }\r\n                })\r\n            }\r\n            hoveredObject = null\r\n        }\r\n        // renderer.render(scene, camera)\r\n        effect.render(scene, camera)\r\n\r\n    }\r\n    render()\r\n\r\n\r\n    const setRotation = rotation => {\r\n        camera.position.x = Math.sin(rotation*Math.PI/180) * 3\r\n        camera.position.z = Math.cos(rotation*Math.PI/180) * 3\r\n        // this.game.board.rotation = rotation\r\n        // this.game.board.rotate()\r\n    }\r\n    setRotation(rotation=-45)\r\n\r\n\r\n    window.addEventListener(\"wheel\", ({deltaY}) => {\r\n        // game.board.rotationValue += (deltaY > 0 ? 1 : -1) * 5\r\n        // game.board.rotate()\r\n\r\n        rotation = (rotation + (deltaY > 0 ? 1 : -1) * 5) % 360\r\n        setRotation(rotation)\r\n    })\r\n\r\n    document.addEventListener(\"mousedown\", event => {\r\n        // if (event.target == arrowsCanvas) {\r\n        mouseIsDown = true\r\n        // } else if (event.target == rendererDomElement) {\r\n        // game.board.mouseIsDown = true\r\n        // }\r\n    })\r\n\r\n    document.addEventListener(\"mouseup\", () => {\r\n        mouseIsDown = false\r\n        // game.board.mouseIsDown = false\r\n    })\r\n\r\n    document.addEventListener(\"click\", () => {\r\n        mouseIsDown = false\r\n        // game.board.mouseIsDown = false\r\n    })\r\n\r\n    console.log(\"hi\")\r\n})"]}