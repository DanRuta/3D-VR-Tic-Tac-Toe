"use strict";const test="stuff";class GameBoard{constructor({span:span,gameState:gameState,makeMove:makeMove,gravity:gravity,gravityEnabled:gravityEnabled}){this.playerColours=["blue","red","green","purple","yellow","brown","black","cyan","pink","darkgrey"],this.rotationValue=-45,this.tiltValue=3==span?20:7==span?40:30,this.span=span,this.gravity=gravity,this.gravityEnabled=gravityEnabled,this.perspectiveX=150,this.perspectiveY=1e3,this.boardElement=document.createElement("div"),this.boardElement.id="boardsContainer",3!=this.span&&(this.boardElement.style.marginTop="0",7==this.span?(this.boardElement.style.marginTop="100px",this.perspectiveY=800):this.perspectiveY=1e3),this.boardElement.style.perspectiveOrigin=`${this.perspectiveX}px ${this.perspectiveY}px`;for(let b=0;b<this.span;b++){const board=document.createElement("div"),tileSize=300/this.span;board.className="board",board.style.gridTemplateColumns=`${tileSize}px `.repeat(this.span),board.style.gridTemplateRows=`${tileSize}px `.repeat(this.span),board.style.transform=`rotateX(${this.tiltValue}deg) rotateZ(${this.rotationValue}deg)`,board.style.marginTop=7==this.span?"-70%":"-50%",flatArrowsContainer.style.transform=`rotateX(${this.tiltValue+30}deg) rotateZ(${this.rotationValue-45}deg)`;for(let r=0;r<this.span;r++)for(let c=0;c<this.span;c++){const tile=document.createElement("div");tile.addEventListener("click",()=>makeMove(b,c,r)),tile.addEventListener("mouseover",()=>this.styleHoverPreview(b,r,c)),board.appendChild(tile)}this.boardElement.appendChild(board)}}renderBoard(){}getAvailableMoves(){}renderPoints(){}styleHoverPreview(board,row,col){if(!this.gravityEnabled)return;switch(this.boardElement.querySelectorAll(".hoveredTile").forEach(tile=>tile.classList.toggle("hoveredTile")),this.gravity.axis){case 0:for(let b=0;b<this.span;b++)this.boardElement.children[b].children[row*this.span+col].classList.toggle("hoveredTile");break;case 1:for(let c=0;c<this.span;c++)this.boardElement.children[board].children[row*this.span+c].classList.toggle("hoveredTile");break;case 2:for(let r=0;r<this.span;r++)this.boardElement.children[board].children[r*this.span+col].classList.toggle("hoveredTile")}}rotate(){Array.from(this.boardElement.children).forEach(board=>{board.style.transform=`rotateX(${this.tiltValue}deg) rotateZ(${this.rotationValue}deg)`,flatArrowsContainer.style.transform=`rotateX(${this.tiltValue+30}deg) rotateZ(${this.rotationValue-45}deg)`})}}class GameLogic{constructor({gameState:gameState,gravityEnabled:gravityEnabled=!0,span:span=3,players:players=2,isTraining:isTraining=!1,isMultiplayer:isMultiplayer=!1}={}){this.players=[],this.gravityEnabled=gravityEnabled,this.span=parseInt(span),this.numPlayers=parseInt(players),this.isTraining=isTraining,this.isMultiplayer=isMultiplayer,this.gameState=gameState||this.resetBoard(),this.gravity={axis:0,modifier:-1},this.board=new GameBoard(this),this.isTraining?this.players.push(new GamePlayer("AI",0)):this.players.push(new GamePlayer("local human",0));for(let p=1;p<players;p++)this.isTraining?this.players.push(new GamePlayer("AI",p)):isMultiplayer?this.players.push(new GamePlayer("remote human",p)):this.players.push(new GamePlayer("local human",p))}resetBoard(){const gameState=[];for(let b=0;b<this.span;b++){const boardGameState=[];for(let r=0;r<this.span;r++){const rowGameState=[];for(let c=0;c<this.span;c++)rowGameState.push(null);boardGameState.push(rowGameState)}gameState.push(boardGameState)}return gameState}initBoards(){}checkGameStatus(){}applyGravityToMove(){}shiftGravity(){}checkAll(){}makeMove(b,r,c){console.log("makeMove",b,r,c)}insertMoveAt(){}}class GamePlayer{constructor(type,playerIndex){console.log(`new ${type} player: ${playerIndex}`),this.type=type}getQ(){}pickMove(){this.type}reward(){this.type}}
//# sourceMappingURL=game.min.js.map