"use strict";class GameBoard{constructor(game,isVR){const{span:span}=game;this.playerColours=["blue","red","green","purple","yellow","orange","black","cyan","pink","darkgrey"],this.rotation=-45,this.span=span,this.game=game,this.heightOffset=0,this.BOX_WIDTH=.5,this.SPREAD=Math.floor(this.span/2),this.SPACING=1.5,this.SPHERE_RADIUS=.2,this.SPHERE_V_COUNT=50,this.OPACITY_ON=.5,this.OPACITY_OFF=.25,this.explodedMult=1,this.isLerpingBoxes=!1,this.colours={RED:16711680,BLUE:255,GREEN:65280,PURPLE:8913032,YELLOW:16776960,ORANGE:16737792,BLACK:0,CYAN:65535,PINK:16761035,BRIGHTGREY:11184810,LIGHTGREY:10066329,DARKGREY:6710886,WHITE:16777215};const previewColour=this.colours[this.playerColours[this.game.playerIndex].toUpperCase()],previewSphereGeometry=new THREE.SphereGeometry(this.SPHERE_RADIUS,this.SPHERE_V_COUNT,this.SPHERE_V_COUNT),previewSphereMaterial=new THREE.MeshLambertMaterial({color:previewColour,transparent:!0});if(previewSphereMaterial.opacity=0,previewSphereMaterial.emissive.setHex(previewColour),this.previewSphere=new THREE.Mesh(previewSphereGeometry,previewSphereMaterial),isVR)return;this.scene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3),this.raycaster=new THREE.Raycaster,this.mouse=new THREE.Vector2,this.renderer=new THREE.WebGLRenderer({alpha:!0,antialias:!0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(window.innerWidth-100,window.innerHeight-200),this.renderer.domElement.id="rendererDomElement",this.boardElement=this.renderer.domElement;const light=new THREE.DirectionalLight(this.colours.LIGHTGREY,1);light.position.set(1,1,1).normalize(),this.scene.add(light),this.camera.position.y=2,this.scene.add(this.previewSphere),this.initBoards(),this.renderLoop(),this.rotate(),this.boardElement.addEventListener("mousemove",event=>{const sizeY=event.target.height,sizeX=event.target.width;this.mouse.x=event.offsetX/sizeX*2-1,this.mouse.y=-event.offsetY/sizeY*2+1},!1)}initBoards(){this.highlightedBoxes=[],this.boxes=[...new Array(this.span)].map(()=>[...new Array(this.span)].map(()=>[...new Array(this.span)])),this.spheres=[...new Array(this.span)].map(()=>[...new Array(this.span)].map(()=>[...new Array(this.span)]));for(let b=0;b<this.span;b++)for(let r=0;r<this.span;r++)for(let c=0;c<this.span;c++)this.addBox(b,r,c)}addBox(b,r,c){const geometry=new THREE.BoxGeometry(this.BOX_WIDTH,this.BOX_WIDTH,this.BOX_WIDTH),material=new THREE.MeshLambertMaterial({color:this.colours.DARKGREY});material.opacity=this.OPACITY_OFF,material.transparent=!0;const box=new THREE.Mesh(geometry,material);box.material.emissive.setHex(this.colours.LIGHTGREY),box.position.x=(c-this.SPREAD)*this.BOX_WIDTH*this.SPACING,box.position.y=(b-this.SPREAD)*this.BOX_WIDTH*this.SPACING+this.heightOffset,box.position.z=(r-this.SPREAD)*this.BOX_WIDTH*this.SPACING,box.data={b:b,r:r,c:c},box.origPos={x:box.position.x,y:box.position.y,z:box.position.z},this.scene.add(box),this.boxes[b][r][c]=box}addSphere(b,r,c,colour){const sphereGeometry=new THREE.SphereGeometry(this.SPHERE_RADIUS,this.SPHERE_V_COUNT,this.SPHERE_V_COUNT),sphereMaterial=new THREE.MeshLambertMaterial({color:this.colours[colour.toUpperCase()]}),sphere=new THREE.Mesh(sphereGeometry,sphereMaterial);sphere.material.emissive.setHex(this.colours[colour.toUpperCase()]),sphere.position.x=(c-this.SPREAD)*this.BOX_WIDTH*this.SPACING,sphere.position.y=(b-this.SPREAD)*this.BOX_WIDTH*this.SPACING+this.heightOffset,sphere.position.z=(r-this.SPREAD)*this.BOX_WIDTH*this.SPACING,sphere.origPos={x:sphere.position.x,y:sphere.position.y,z:sphere.position.z},1!=this.explodedMult&&(sphere.position.x+=sphere.origPos.x*this.explodedMult-sphere.position.x,sphere.position.y+=sphere.origPos.y*this.explodedMult-sphere.position.y,sphere.position.z+=sphere.origPos.z*this.explodedMult-sphere.position.z),this.spheres[b][r][c]=sphere,this.scene.add(sphere)}clearHighlightedBoxes(){for(let b=0;b<this.highlightedBoxes.length;b++)this.highlightedBoxes[b].material.opacity=this.OPACITY_OFF,this.highlightedBoxes[b].material.emissive.setHex(this.colours.LIGHTGREY);this.highlightedBoxes=[],this.previewSphere.material.opacity=0}highlightColumn({r:r,c:c}){for(let b=0;b<this.span;b++)this.boxes[b][r][c].material.opacity=this.OPACITY_ON,this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY),this.highlightedBoxes.push(this.boxes[b][r][c])}highlightRowY({b:b,r:r}){for(let c=0;c<this.span;c++)this.boxes[b][r][c].material.opacity=this.OPACITY_ON,this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY),this.highlightedBoxes.push(this.boxes[b][r][c])}highlightRowX({b:b,c:c}){for(let r=0;r<this.span;r++)this.boxes[b][r][c].material.opacity=this.OPACITY_ON,this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY),this.highlightedBoxes.push(this.boxes[b][r][c])}getPreviewPosition(cube){const incr=this.game.gravity.modifier,pos={x:cube.origPos.x,y:cube.origPos.y,z:cube.origPos.z};if(pos.b=cube.data.b,pos.r=cube.data.r,pos.c=cube.data.c,!this.game.gravityEnabled)return pos;switch(this.game.gravity.axis){case 0:if(this.spheres[-1==incr?this.span-1:0][cube.data.r][cube.data.c])return null;for(pos.b=-1==incr?0:this.span-1;this.spheres[pos.b][cube.data.r][cube.data.c];)pos.b-=incr;pos.y=(pos.b-this.SPREAD)*this.BOX_WIDTH*this.SPACING+this.heightOffset;break;case 1:if(this.spheres[cube.data.b][cube.data.r][-1==incr?this.span-1:0])return null;for(pos.c=-1==incr?0:this.span-1;this.spheres[cube.data.b][cube.data.r][pos.c];)pos.c-=incr;pos.x=(pos.c-this.SPREAD)*this.BOX_WIDTH*this.SPACING;break;case 2:if(this.spheres[cube.data.b][-1==incr?this.span-1:0][cube.data.c])return null;for(pos.r=-1==incr?0:this.span-1;this.spheres[cube.data.b][pos.r][cube.data.c];)pos.r-=incr;pos.z=(pos.r-this.SPREAD)*this.BOX_WIDTH*this.SPACING}return 1!=this.explodedMult&&(pos.x*=this.explodedMult,pos.y*=this.explodedMult,pos.z*=this.explodedMult),this.spheres[pos.b][pos.r][pos.c]?null:pos}moveSphere(start,end,axis,location){const sphere=this.spheres[start.b][start.r][start.c];sphere.isLerping=!0,sphere.newPos={},sphere.newPos.axis=axis,sphere.newPos[axis]=(location-this.SPREAD)*this.BOX_WIDTH*this.SPACING,this.spheres[end.b][end.r][end.c]=sphere,this.spheres[start.b][start.r][start.c]=null}lerpBoxes(){if(this.isLerpingBoxes)for(let b=0;b<this.span;b++)for(let r=0;r<this.span;r++)for(let c=0;c<this.span;c++)b!=this.SPREAD&&r!=this.SPREAD&&c!=this.SPREAD&&Math.abs(this.boxes[b][r][c].position.x-this.boxes[b][r][c].origPos.x*this.explodedMult)<.005?(this.isLerpingBoxes=!1,this.boxes[b][r][c].position.x=this.boxes[b][r][c].origPos.x*this.explodedMult,this.boxes[b][r][c].position.y=this.boxes[b][r][c].origPos.y*this.explodedMult,this.boxes[b][r][c].position.z=this.boxes[b][r][c].origPos.z*this.explodedMult,this.spheres[b][r][c]&&(this.spheres[b][r][c].position.x+=this.spheres[b][r][c].origPos.x*this.explodedMult-this.spheres[b][r][c].position.x,this.spheres[b][r][c].position.y+=this.spheres[b][r][c].origPos.y*this.explodedMult-this.spheres[b][r][c].position.y,this.spheres[b][r][c].position.z+=this.spheres[b][r][c].origPos.z*this.explodedMult-this.spheres[b][r][c].position.z)):(this.boxes[b][r][c].position.x+=(this.boxes[b][r][c].origPos.x*this.explodedMult-this.boxes[b][r][c].position.x)/10,this.boxes[b][r][c].position.y+=(this.boxes[b][r][c].origPos.y*this.explodedMult-this.boxes[b][r][c].position.y)/10,this.boxes[b][r][c].position.z+=(this.boxes[b][r][c].origPos.z*this.explodedMult-this.boxes[b][r][c].position.z)/10,this.spheres[b][r][c]&&(this.spheres[b][r][c].position.x+=(this.spheres[b][r][c].origPos.x*this.explodedMult-this.spheres[b][r][c].position.x)/10,this.spheres[b][r][c].position.y+=(this.spheres[b][r][c].origPos.y*this.explodedMult-this.spheres[b][r][c].position.y)/10,this.spheres[b][r][c].position.z+=(this.spheres[b][r][c].origPos.z*this.explodedMult-this.spheres[b][r][c].position.z)/10))}lerpSpheres(){this.someSphereIsLerping=!1;for(let b=0;b<this.span;b++)for(let r=0;r<this.span;r++)for(let c=0;c<this.span;c++)if(this.spheres[b][r][c]&&this.spheres[b][r][c].isLerping){this.someSphereIsLerping=!0;const sphere=this.spheres[b][r][c],{axis:axis}=sphere.newPos;Math.abs(sphere.position[axis]-sphere.newPos[axis]*this.explodedMult)>.01?sphere.position[axis]+=(sphere.newPos[axis]*this.explodedMult-sphere.position[axis])/10:(sphere.isLerping=!1,sphere.position[axis]=sphere.newPos[axis]*this.explodedMult,sphere.origPos[axis]=sphere.newPos[axis])}}renderLoop(){requestAnimationFrame(()=>this.renderLoop()),this.lerpBoxes(),this.lerpSpheres(),this.camera.lookAt(this.scene.position),this.camera.updateMatrixWorld(),this.renderer.render(this.scene,this.camera),this.raycaster.setFromCamera(this.mouse,this.camera);const intersects=this.raycaster.intersectObjects(this.scene.children,!0);if(intersects.length){if(!this.hoveredObject||this.hoveredObject!=intersects[0].object&&this.hoveredObject!=intersects[0].object.parent){if(this.hoveredObject=intersects[0].object.data?intersects[0].object:intersects[0].object.parent,this.clearHighlightedBoxes(),this.hoveredObject.data&&!this.isLerpingBoxes&&!this.someSphereIsLerping){if(this.game.gravityEnabled)switch(this.game.gravity.axis){case 0:this.highlightColumn(this.hoveredObject.data);break;case 1:this.highlightRowY(this.hoveredObject.data);break;case 2:this.highlightRowX(this.hoveredObject.data)}else{const{b:b,r:r,c:c}=this.hoveredObject.data;this.boxes[b][r][c].material.opacity=this.OPACITY_ON,this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY),this.highlightedBoxes.push(this.boxes[b][r][c])}const pos=this.getPreviewPosition(this.hoveredObject);pos&&(this.previewSphere.position.x=pos.x,this.previewSphere.position.y=pos.y,this.previewSphere.position.z=pos.z,this.previewSphere.data={b:pos.b,r:pos.r,c:pos.c},this.previewSphere.material.opacity=.5)}}else if(this.mouseIsDown&&!this.hoveredObject.data.isClicked){this.hoveredObject.data.isClicked=!0,setTimeout(()=>{this.hoveredObject&&(this.hoveredObject.data.isClicked=!1)},500);const{b:b,r:r,c:c}=this.previewSphere.data;" "===this.game.gameState[b][r][c]&&(ws?sendMove(this.game.playerIndex,b,r,c,this.game.gameState):this.game.makeMove(this.game.playerIndex,b,r,c))}}else this.clearHighlightedBoxes(),this.previewSphere.material.opacity=0,this.hoveredObject&&(this.hoveredObject.material?(this.hoveredObject.material.emissive.setHex(this.colours.LIGHTGREY),this.hoveredObject.material.opacity=this.OPACITY_OFF,this.hoveredObject.data.isClicked=!1):this.hoveredObject.parent&&(this.hoveredObject.parent.material.emissive.setHex(this.colours.LIGHTGREY),this.hoveredObject.parent.material.opacity=this.OPACITY_OFF,this.hoveredObject.parent.data.isClicked=!1)),this.hoveredObject=null}toggleExploded(){this.explodedMult=1==this.explodedMult?2:1,this.previewSphere.material.opacity=0,this.isLerpingBoxes=!0}addPoint(board,row,col,player,nextPlayer){this.addSphere(board,row,col,this.playerColours[player].toUpperCase()),this.previewSphere.material.opacity=0,void 0!==nextPlayer&&this.setPreviewColour(nextPlayer)}setPreviewColour(playerIndex){const previewColour=this.colours[this.playerColours[playerIndex].toUpperCase()];this.previewSphere.material.color.setHex(previewColour),this.previewSphere.material.emissive.setHex(previewColour)}highlightArrow(index){const arrowModel=arrowModels.filter(a=>a.data.arrowIndex==index);clickedObject&&clickedObject.children.forEach(c=>c.material.emissive.setHex(this.colours.BRIGHTGREY)),arrowModel[0].children.forEach(c=>c.material.emissive.setHex(this.colours.CYAN)),clickedObject=arrowModel[0]}render(gameState){this.resetBoard();for(let b=0;b<this.span;b++)for(let r=0;r<this.span;r++)for(let c=0;c<this.span;c++)Number.isNaN(parseInt(gameState[b][r][c]))||this.addPoint(b,r,c,gameState[b][r][c])}resetBoard(){for(let b=0;b<this.span;b++)for(let r=0;r<this.span;r++)for(let c=0;c<this.span;c++)this.spheres[b][r][c]&&(this.scene.remove(this.spheres[b][r][c]),this.spheres[b][r][c]=void 0)}rotate(){this.camera.position.x=Math.sin(this.rotation*Math.PI/180)*(1.5*this.BOX_WIDTH)*this.span*2,this.camera.position.z=Math.cos(this.rotation*Math.PI/180)*(1.5*this.BOX_WIDTH)*this.span*2}}"undefined"!=typeof window&&(window.exports=window.exports||{});class GamePlayer{constructor(type,playerIndex,game,name){console.log(`new ${type} player: ${playerIndex}`),this.type=type,this.game=game,this.playerIndex=playerIndex,this.name=name}clearLastState(){for(let b=0;b<this.game.span;b++)for(let r=0;r<this.game.span;r++)for(let c=0;c<this.game.span;c++)this.lastState[b][r][c]=" ";this.lastMove=void 0}pickMove(gameState){"AI"==this.type&&fetch("./getAIMove",{method:"post",body:JSON.stringify({gameState:gameState})}).then(r=>r.json()).then(({move:move})=>{const[b,r,c]=move;this.game.makeMove(this.playerIndex,b,r,c)})}reward(value,gameState){"AI"==this.type&&fetch("./rewardAI",{method:"post",body:JSON.stringify({value:value,gameState:gameState})})}}"undefined"!=typeof window&&(window.exports=window.exports||{}),"undefined"!=typeof window&&(window.GamePlayer=GamePlayer),exports.GamePlayer=GamePlayer;class GameLogic{constructor({gameState:gameState,gameBoard:gameBoard,gravityEnabled:gravityEnabled=!0,span:span=3,players:players=2,isTraining:isTraining,isMultiplayer:isMultiplayer,aiOpponent:aiOpponent,isVR:isVR}={}){this.players=[],this.gravityEnabled=gravityEnabled,this.span=parseInt(span),this.numPlayers=parseInt(players),this.isTraining=isTraining,this.aiOpponent=aiOpponent,this.isMultiplayer=isMultiplayer,this.gameState=gameState||this.resetGame(),this.gravity={axis:0,modifier:-1},this.directions={up:0,down:0,left:1,right:1,forward:2,backward:2},this.modifiers={up:1,down:-1,left:-1,right:1,forward:-1,backward:1},this.playerIndex=Math.floor(Math.random()*players),this.board=new gameBoard(this,isVR),this.aiOpponent?this.players.push(new GamePlayer("AI",0,this,"AI")):this.players.push(new GamePlayer("local human",0,void 0,"Player 1"));for(let p=1;p<players;p++)this.isTraining?this.players.push(new GamePlayer("AI",p,this)):isMultiplayer?this.players.push(new GamePlayer("remote human",p,void 0,`Player ${p+1}`)):this.players.push(new GamePlayer("local human",p,void 0,`Player ${p+1}`));this.players[this.playerIndex].pickMove(this.gameState)}resetGame(){const gameState=[];for(let b=0;b<this.span;b++){const boardGameState=[];for(let r=0;r<this.span;r++){const rowGameState=[];for(let c=0;c<this.span;c++)rowGameState.push(" ");boardGameState.push(rowGameState)}gameState.push(boardGameState)}this.board&&this.board.resetBoard(),this.gameState=gameState;for(let p=0;p<this.players.length;p++)"AI"==this.players[p].type&&this.players[p].clearLastState();return gameState}makeMove(p,b,r,c){if(p==this.playerIndex||this.isTraining){if(" "!==this.gameState[b][r][c])return console.log("Illegal move"),this.players[p].reward(-99,this.gameState),void("AI"==this.players[p].type&&this.resetGame());if([b,r,c]=this.applyGravityToMove(b,r,c),this.gameState[b][r][c]=p,this.board.addPoint(b,r,c,p,(this.playerIndex+1)%this.players.length),this.isWinningMove(b,r,c,p))return this.players[p].reward(1,this.gameState),this.players.forEach((player,pi)=>pi!=p&&player.reward(-1,this.gameState)),void window.dispatchEvent(new CustomEvent("T^3Win",{detail:p}));if(this.isFull())return console.log("Tied game"),this.players.forEach(player=>player.reward(.25,this.gameState)),void window.dispatchEvent(new CustomEvent("T^3Tie",{detail:p}));this.players.forEach((player,pi)=>pi!=p&&player.reward(0,this.gameState)),this.playerIndex=++this.playerIndex%this.players.length,this.players[this.playerIndex].pickMove(this.gameState),ws&&sendState(this.gameState)}else console.log("NOT your turn!")}isWinningMove(boardIndex,tileY,tileX,player){let match=!1;const max=this.gameState[0].length-1,mid=Math.floor(max/2);if(match=(match=this.gameState[boardIndex][tileY].every(col=>col===player)||this.gameState[boardIndex].every(row=>row[tileX]===player)||(tileX+tileY)%2==0&&(this.gameState[boardIndex].every((row,ri)=>row[ri]===player)||this.gameState[boardIndex].every((row,ri)=>row[max-ri]===player)))||this.gameState.every(board=>board[tileY][tileX]===player))return!0;if(boardIndex!==mid||boardIndex===mid&&(tileY===mid||tileX===mid)){if(match=match||this.gameState.every((board,bi)=>board[max-bi][tileX]===player)||this.gameState.every((board,bi)=>board[bi][tileX]===player)||this.gameState.every((board,bi)=>board[tileY][max-bi]===player)||this.gameState.every((board,bi)=>board[tileY][bi]===player))return!0;this.gameState[mid][mid][mid]===player&&(match=match||this.gameState.every((board,bi)=>board[bi][bi]===player)||this.gameState.every((board,bi)=>board[max-bi][bi]===player)||this.gameState.every((board,bi)=>board[max-bi][max-bi]===player)||this.gameState.every((board,bi)=>board[bi][max-bi]===player))}return match}isFull(){for(let b=0;b<this.span;b++)for(let r=0;r<this.span;r++)for(let c=0;c<this.span;c++)if(" "===this.gameState[b][r][c])return!1;return!0}applyGravityToMove(board,row,col){if(!this.gravityEnabled)return[board,row,col];let counts;switch(this.gravity.axis){case 0:counts=-1==this.gravity.modifier?board:this.span-1-board;for(let i=0;i<counts&&" "===this.gameState[board+this.gravity.modifier][row][col];i++)board+=this.gravity.modifier;break;case 1:counts=-1==this.gravity.modifier?col:this.span-1-col;for(let i=0;i<counts&&" "===this.gameState[board][row][col+this.gravity.modifier];i++)col+=this.gravity.modifier;break;case 2:counts=-1==this.gravity.modifier?row:this.span-1-row;for(let i=0;i<counts&&" "===this.gameState[board][row+this.gravity.modifier][col];i++)row+=this.gravity.modifier}return[board,row,col]}shiftGravity(direction){this.gravity.axis=this.directions[direction],this.gravity.modifier=this.modifiers[direction];const max=Math.abs((-1==this.gravity.modifier?this.span-1:0)-(this.span-1));switch(this.gravity.axis){case 0:for(let r=0;r<this.span;r++)for(let c=0;c<this.span;c++){let i2=0;everyBoard:for(let i=0;i<this.span;i++)if(" "===this.gameState[Math.abs(max-i)][r][c]){for(i2=i+1;i2<this.span;)i2<this.span&&i<this.span&&" "!==this.gameState[Math.abs(max-i2)][r][c]&&(this.board.moveSphere({b:Math.abs(max-i2),r:r,c:c},{b:Math.abs(max-i),r:r,c:c},"y",Math.abs(max-i)),this.gameState[Math.abs(max-i)][r][c]=this.gameState[Math.abs(max-i2)][r][c],this.gameState[Math.abs(max-i2)][r][c]=" ",i+=i2),i2++;break everyBoard}}break;case 1:for(let b=0;b<this.span;b++)for(let r=0;r<this.span;r++){let i2=0;everyColumn:for(let i=0;i<this.span;i++)if(" "===this.gameState[b][r][Math.abs(max-i)]){for(i2=i+1;i2<this.span;)i2<this.span&&i<this.span&&" "!==this.gameState[b][r][Math.abs(max-i2)]&&(this.board.moveSphere({b:b,r:r,c:Math.abs(max-i2)},{b:b,r:r,c:Math.abs(max-i)},"x",Math.abs(max-i)),this.gameState[b][r][Math.abs(max-i)]=this.gameState[b][r][Math.abs(max-i2)],this.gameState[b][r][Math.abs(max-i2)]=" ",i+=i2),i2++;break everyColumn}}break;case 2:for(let b=0;b<this.span;b++)for(let r=0;r<this.span;r++){let i2=0;everyColumn:for(let i=0;i<this.span;i++)if(" "===this.gameState[b][Math.abs(max-i)][r]){for(i2=i+1;i2<this.span;)i2<this.span&&i<this.span&&" "!==this.gameState[b][Math.abs(max-i2)][r]&&(this.board.moveSphere({b:b,r:Math.abs(max-i2),c:r},{b:b,r:Math.abs(max-i),c:r},"z",Math.abs(max-i)),this.gameState[b][Math.abs(max-i)][r]=this.gameState[b][Math.abs(max-i2)][r],this.gameState[b][Math.abs(max-i2)][r]=" ",i+=i2),i2++;break everyColumn}}}this.checkAll(),this.board.clearHighlightedBoxes(),this.board.setPreviewColour(this.playerIndex)}checkAll(){let player,match=!1;for(let b=0;b<this.span;b++)for(let r=0;r<this.span;r++)for(let c=0;c<this.span;c++)if(" "!==this.gameState[b][r][c]&&(match=match||this.isWinningMove(b,r,c,this.gameState[b][r][c]))){player=this.gameState[b][r][c];break}return player}}"undefined"!=typeof window&&(window.exports=window.exports||{}),"undefined"!=typeof window&&(window.GameLogic=GameLogic),exports.GameLogic=GameLogic;class VRGameBoard extends GameBoard{constructor(game){super(game,!0),this.arrowNames=["left","right","up","down","forward","backward"],this.arrowModels=[]}loadTHREEjsItems(items){this.scene=items.scene,this.camera=items.camera,this.raycaster=items.raycaster,this.mouse=items.mouse,this.renderer=items.renderer,this.boardElement=items.boardElement,this.heightOffset=.5,this.scene.add(this.previewSphere),this.initBoards(),this.renderLoop(),this.rotate(),this.boardElement.addEventListener("mousemove",event=>{const sizeY=event.target.height,sizeX=event.target.width;this.mouse.x=event.offsetX/sizeX*2-1,this.mouse.y=-event.offsetY/sizeY*2+1},!1)}makeArrows(){const loader=new THREE.ObjectLoader;if(!this.arrowModels.length)for(let a=0;a<6;a++)loader.load("arrows",model=>{model.position.x=2*positions[a].x*Math.PI,model.position.y=2*positions[a].y*Math.PI,model.position.z=2*positions[a].z*Math.PI,model.rotation.x=2*rotations[a].x*Math.PI,model.rotation.y=2*rotations[a].y*Math.PI,model.rotation.z=2*rotations[a].z*Math.PI,model.children.forEach(c=>{3==a?(c.material.emissive.setHex(this.colours.CYAN),this.clickedObject=model):c.material.emissive.setHex(this.colours.BRIGHTGREY)}),this.arrowModels.push(model),model.data={arrowIndex:a},this.scene.add(model)})}highlightArrow(index){const arrowModel=this.arrowModels.filter(a=>a.data.arrowIndex==index);this.clickedObject&&this.clickedObject.children.forEach(c=>c.material.emissive.setHex(this.colours.BRIGHTGREY)),arrowModel[0].children.forEach(c=>c.material.emissive.setHex(this.colours.CYAN)),this.clickedObject=arrowModel[0]}renderLoop(){requestAnimationFrame(()=>this.renderLoop()),this.lerpBoxes(),this.lerpSpheres();const intersects=this.raycaster.intersectObjects(this.scene.children,!0);if(intersects.length){if(this.hoveredObject&&"Scene"==this.hoveredObject.type)document.body.style.cursor="pointer",this.hoveredObject==this.clickedObject||(this.mouseIsDown?(this.highlightArrow(this.hoveredObject.data.arrowIndex),console.log("clicked",this.arrowNames[this.clickedObject.data.arrowIndex]),ws?ws.send(JSON.stringify({direction:this.arrowNames[this.clickedObject.data.arrowIndex],userId:"1234",username:"rob",type:"text",room:roomNameValue,type:"gravity"})):this.game.shiftGravity(this.arrowNames[this.clickedObject.data.arrowIndex])):(this.arrowModels.forEach(arrow=>{arrow!=this.clickedObject&&arrow.children.forEach(c=>c.material.emissive.setHex(this.colours.BRIGHTGREY))}),this.hoveredObject!=this.clickedObject&&this.hoveredObject.children.forEach(c=>c.material.emissive.setHex(this.colours.YELLOW))));else if(!this.hoveredObject||this.hoveredObject!=intersects[0].object&&this.hoveredObject!=intersects[0].object.parent){if(this.hoveredObject=intersects[0].object.data?intersects[0].object:intersects[0].object.parent,this.clearHighlightedBoxes(),this.hoveredObject.data&&"Scene"!=this.hoveredObject.type&&!this.isLerpingBoxes&&!this.someSphereIsLerping){if(this.game.gravityEnabled){if(this.hoveredObject.data)switch(this.game.gravity.axis){case 0:this.highlightColumn(this.hoveredObject.data);break;case 1:this.highlightRowY(this.hoveredObject.data);break;case 2:this.highlightRowX(this.hoveredObject.data)}}else{const{b:b,r:r,c:c}=this.hoveredObject.data;this.boxes[b][r][c].material.opacity=this.OPACITY_ON,this.boxes[b][r][c].material.emissive.setHex(this.colours.DARKGREY),this.highlightedBoxes.push(this.boxes[b][r][c])}const pos=this.getPreviewPosition(this.hoveredObject);pos&&(this.previewSphere.position.x=pos.x,this.previewSphere.position.y=pos.y,this.previewSphere.position.z=pos.z,this.previewSphere.data={b:pos.b,r:pos.r,c:pos.c},this.previewSphere.material.opacity=.5)}}else if(this.mouseIsDown&&!this.hoveredObject.data.isClicked){this.hoveredObject.data.isClicked=!0,setTimeout(()=>{this.hoveredObject&&(this.hoveredObject.data.isClicked=!1)},500);const{b:b,r:r,c:c}=this.previewSphere.data;" "===this.game.gameState[b][r][c]&&(ws?sendMove(this.game.playerIndex,b,r,c,this.game.gameState):this.game.makeMove(this.game.playerIndex,b,r,c))}}else this.hoveredObject&&"Scene"==this.hoveredObject.type?(document.body.style.cursor="default",this.arrowModels.length&&this.arrowModels.forEach(arrow=>{arrow!=this.clickedObject&&arrow.children.forEach(c=>c.material.emissive.setHex(this.colours.BRIGHTGREY))})):(this.clearHighlightedBoxes(),this.previewSphere.material.opacity=0,this.hoveredObject&&(this.hoveredObject.material?(this.hoveredObject.material.emissive.setHex(this.colours.LIGHTGREY),this.hoveredObject.material.opacity=this.OPACITY_OFF,this.hoveredObject.data.isClicked=!1):this.hoveredObject.parent&&this.hoveredObject.parent.material&&(this.hoveredObject.parent.material.emissive.setHex(this.colours.LIGHTGREY),this.hoveredObject.parent.material.opacity=this.OPACITY_OFF,this.hoveredObject.parent.data.isClicked=!1))),this.hoveredObject=null}rotate(){}}let ws,roomNameValue,rotation=45;const rotations=[{x:.25,y:0,z:0},{x:.25,y:.5,z:0},{x:.25,y:.75,z:0},{x:.25,y:.25,z:0},{x:.25,y:.5,z:.25},{x:.25,y:.5,z:.75}],positions=[{x:-.125,y:-.4,z:0},{x:.125,y:-.4,z:0},{x:0,y:-.3,z:0},{x:0,y:-.5,z:0},{x:0,y:-.4,z:-.125},{x:0,y:-.4,z:.125}];function winnerWinnerChickenDinner(e){winPanel.style.display="block",winPanel.style.textAlign="center",winPanel.innerText=game.players[e.detail].name+" Winns!"}function noChickenDinner(e){winPanel.style.display="block",winPanel.style.textAlign="center",winPanel.innerText=game.players[e.detail].name+" Caused a tie!"}function connectWebSockets(roomName){(ws=new WebSocket("ws://vrscrible.localhost:8000/"+roomName)).addEventListener("message",message=>{const data=JSON.parse(message.data);if(console.log(data),"gravity"===data.type)game.shiftGravity(data.direction);else if("move"===data.type){const player=data.playerIndex,{b:b,r:r,c:c}=data;console.log(player,b,r,c),game.makeMove(player,b,r,c)}}),ws.addEventListener("open",()=>{console.log("connect ws"),console.log(roomName),ws.send(JSON.stringify({userId:"1234",username:"rob",type:"setUp",room:roomName})),getGameState(roomName)})}function getURLParameter(name){return decodeURIComponent((new RegExp("[?|&]"+name+"=([^&;]+?)(&|#|;|$)").exec(location.search)||[null,""])[1].replace(/\+/g,"%20"))||null}function sendMove(playerIndex,b,r,c,gameState){ws&&ws.send(JSON.stringify({playerIndex:playerIndex,b:b,r:r,c:c,userId:"1234",username:"rob",room:roomNameValue,type:"move",gameState:gameState}))}function sendState(gameState){ws&&ws.send(JSON.stringify({room:roomNameValue,type:"state",gameState:gameState}))}function saveGameState(roomName,gameState){fetch("./saveGameState",{method:"post",body:JSON.stringify({roomName:roomName,gameState:gameState})})}function getGameState(roomName){fetch("./getGameState?roomName="+roomName,{method:"get",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(res=>res.json()).then(data=>{null!==data.gameState&&(game.board.render(data.gameState),game.gameState=data.gameState)})}window.getParameters=(()=>{const parameters={},parametersString=location.search.substring(1);return parametersString.length&&parametersString.split("&").forEach(p=>{const[k,v]=p.split("=");parameters[k]=v}),parameters}),window.addEventListener("load",()=>{screen.keepAwake=!0;const renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0});renderer.setPixelRatio(window.devicePixelRatio),renderer.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(renderer.domElement),renderer.domElement.addEventListener("click",()=>{(new NoSleep).enable(),window.location.href.includes("localhost")||document.fullscreenEnabled&&renderer.domElement.requestFullScreen()||document.webkitFullscreenEnabled&&renderer.domElement.webkitRequestFullScreen()||document.mozFullScreenEnabled&&renderer.domElement.mozRequestFullScreen()||document.msFullScreenEnabled&&renderer.domElement.msRequestFullScreen()});let vrDisplay,effect=new THREE.VREffect(renderer);effect.separation=-10,effect.setSize(window.innerWidth,window.innerHeight),navigator.getVRDisplays&&navigator.getVRDisplays().then(displays=>displays.length&&(vrDisplay=displays[0])),enterVRButton.addEventListener("click",()=>{enterVRButton.classList.contains("small")?((effect=new THREE.VREffect(renderer)).separation=0,effect.setSize(window.innerWidth,window.innerHeight),enterVRButton.classList.remove("small"),game.board.usingVR=!1):(navigator.userAgent.includes("Mobile VR")?vrDisplay.requestPresent([{source:renderer.domElement}]):((effect=new THREE.StereoEffect(renderer)).separation=0,effect.setSize(window.innerWidth,window.innerHeight)),game.board.usingVR=!0,enterVRButton.classList.add("small"))});const scene=new THREE.Scene,camera=new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,1,1e3);scene.add(camera),camera.rotation.order="YXZ",camera.position.z=4,camera.position.y=2;let controls=new THREE.OrbitControls(camera,renderer.domElement);controls.target.set(4*Math.cos(camera.position.x*Math.PI/180),camera.position.y,4*Math.sin(camera.position.z*Math.PI/180)),controls.enablePan=!1,controls.enableZoom=!1;const setOrientationControls=event=>{event.alpha&&((controls=new THREE.VRControls(camera)).update(),window.removeEventListener("deviceorientation",setOrientationControls))};window.addEventListener("deviceorientation",setOrientationControls);const raycaster=new THREE.Raycaster,mouse=new THREE.Vector2,light=new THREE.DirectionalLight(16777215,.5);light.position.set(0,1,0).normalize(),scene.add(light);(()=>{const{g:g,span:span,p:p}=getParameters();window.game=new GameLogic({gravityEnabled:!g||"1"==g,gameBoard:VRGameBoard,span:parseInt(span)||3,players:parseInt(p)||2,isVR:!0}),game.board.loadTHREEjsItems({scene:scene,camera:camera,raycaster:raycaster,mouse:mouse,renderer:renderer,boardElement:renderer.domElement}),game.board.makeArrows(),""!==(roomNameValue=getURLParameter("roomName"))&&connectWebSockets(roomNameValue)})();const render=()=>{requestAnimationFrame(render),controls.update(),camera.lookAt(scene.position),camera.updateMatrixWorld(),raycaster.setFromCamera(mouse,camera),effect.render(scene,camera)};render();const setRotation=rotation=>{camera.position.x=5*Math.cos(rotation*Math.PI/180),camera.position.z=5*Math.sin(rotation*Math.PI/180)};setRotation(rotation=-45),renderer.domElement.addEventListener("wheel",({deltaY:deltaY})=>{setRotation(rotation=(rotation+5*(deltaY>0?1:-1))%360)}),document.addEventListener("mousedown",()=>{game.board.mouseIsDown=!0}),document.addEventListener("mouseup",()=>{game.board.mouseIsDown=!1}),document.addEventListener("click",()=>{game.board.mouseIsDown=!1}),window.addEventListener("keydown",e=>{"Space"==e.code&&game.board.toggleExploded()});let getVideoFeedAttempts=0;const getVideoFeed=()=>{try{if("mozGetUserMedia"in navigator)navigator.mozGetUserMedia({video:{facingMode:"environment"}},stream=>{video.src=window.URL.createObjectURL(stream)},err=>{console.log(err),alert("There was an error accessing the camera. Please try again and ensure you are using https")});else{if(navigator.mediaDevices&&navigator.mediaDevices.getUserMedia)navigator.mediaDevices.getUserMedia({video:{facingMode:"environment"}}).then(stream=>{video.src=window.URL.createObjectURL(stream)}).catch(err=>{console.log(err),++getVideoFeedAttempts<3?getVideoFeed():alert("There was an error accessing the camera. Please try again and ensure you are using https")});else{const getUserMedia=navigator.getUserMedia||navigator.webkitGetUserMedia||navigator.mozGetUserMedia||navigator.msGetUserMedia;getUserMedia?getUserMedia({video:{facingMode:"environment"}},stream=>{video.src=window.URL.createObjectURL(stream)},err=>{console.log(err),alert("There was an error accessing the camera. Please try again and ensure you are using https.")}):alert("Camera not available")}}}catch(e){alert("Error getting camera feed. Please ensure you are using https.")}};window.video=document.createElement("video"),video.autoplay=!0,video.width=window.innerWidth,video.height=window.innerHeight/2,getVideoFeed();const buffer=document.createElement("canvas");buffer.width=video.width,buffer.height=video.height;const bufferC=buffer.getContext("2d");let lastX=0,lastY=0,newX=0,newY=0;let foundWithinBounds=!1,frameCounter=-1;window.readCircle=(()=>{if(requestAnimationFrame(readCircle),++frameCounter%5==0){bufferC.drawImage(video,0,0,video.width,video.height);const{data:data}=bufferC.getImageData(0,0,video.width,video.height);let avgX=0,avgY=0,counter=0,startR=0,startC=0,endR=video.height,endC=video.width;foundWithinBounds&&(startR=parseInt(Math.max(lastY-100,0)),startC=parseInt(Math.max(lastX-100,0)),endR=parseInt(Math.min(lastY+100,video.width)),endC=parseInt(Math.min(lastX+100,video.height)));for(let r=startR;r<endR;r+=4)for(let c=startC;c<endC;c+=4){const p=r*video.width+c,pixel=[data[4*p]/255,data[4*p+1]/255,data[4*p+2]/255];pixel[0]<=.75&&pixel[1]>=.75&&pixel[2]<=.7&&(counter++,avgX+=c,avgY+=r)}counter>10?(newX=avgX/counter,newY=avgY/counter,foundWithinBounds=!0):foundWithinBounds=!1}((x,y)=>{tempCursor.style.marginTop=parseInt(y/video.height*window.innerHeight)+"px";let leftM=parseInt(x/video.width*window.innerWidth);game.board.usingVR&&(leftM/=2),tempCursor.style.marginLeft=leftM+"px",game.board.mouse.x=x/video.width*2-1,game.board.mouse.y=-1*(y/video.height*2-1)})(lastX+=(newX-lastX)/20,lastY+=(newY-lastY)/20)}),"y"==getParameters().t&&readCircle(),window.addEventListener("resize",()=>{effect.setSize(window.innerWidth,window.innerHeight),camera.aspect=window.innerWidth/window.innerHeight,camera.updateProjectionMatrix()}),window.addEventListener("T^3Win",winnerWinnerChickenDinner),window.addEventListener("T^3Tie",noChickenDinner)});
//# sourceMappingURL=scriptVR.min.js.map