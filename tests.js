"use strict"

const chai = require("chai")
const expect = chai.expect
const {GamePlayer} = require("./trainer/GamePlayer.js")

describe("Cube symmetry", () => {

    let player

    before(() => player = new GamePlayer(null, 0, {span: 3}))

    /*
Hand worked test values
    */

    // up/down
    describe("mirrorB", () => {

        it("Mirrors 3x3x3 correctly", () => {
            const state = [
                [[" "," "," "],[" "," "," "],[" "," ",0]],
                [[" "," "," "],[1," "," "],[" "," "," "]],
                [[" "," "," "],[" "," "," "],[" "," ",1]]
            ]

            const expected = [
                [[" "," "," "],[" "," "," "],[" "," ",1]],
                [[" "," "," "],[1," "," "],[" "," "," "]],
                [[" "," "," "],[" "," "," "],[" "," ",0]]
            ]

            player.game.span = 3
            expect(player.mirrorB(state)).to.deep.equal(expected)
        })

        it("Mirrors 5x5x5 correctly", () => {
            const state = [
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            const expected = [
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]]
            ]
            player.game.span = 5
            expect(player.mirrorB(state)).to.deep.equal(expected)
        })
    })

    // forward/backward
    describe("mirrorY", () => {

        it("Mirrors 3x3x3 correctly", () => {
            const state = [
                [[" "," "," "],[" "," "," "],[" "," ",0]],
                [[" "," "," "],[1," "," "],[" "," "," "]],
                [[" "," "," "],[" "," "," "],[" "," ",1]]
            ]
            const expected = [
                [[" "," ",0],[" "," "," "],[" "," "," "]],
                [[" "," "," "],[1," "," "],[" "," "," "]],
                [[" "," ",1],[" "," "," "],[" "," "," "]]
            ]

            player.game.span = 3
            expect(player.mirrorY(state)).to.deep.equal(expected)
        })

        it("Mirrors 5x5x5 correctly", () => {
            const state = [
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            const expected = [
                [[" "," "," ",1," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" ",0," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[0," "," "," ",0],[" ",1," "," "," "]],
                [[1," "," "," "," "],[" "," "," ",1," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            player.game.span = 5
            expect(player.mirrorY(state)).to.deep.equal(expected)
        })

    })

    // left/right
    describe("mirrorX", () => {

        it("Mirrors 3x3x3 correctly", () => {
            const state = [
                [[" "," "," "],[" "," "," "],[" "," ",0]],
                [[" "," "," "],[1," "," "],[" "," "," "]],
                [[" "," "," "],[" "," "," "],[" "," ",1]]
            ]
            const expected = [
                [[" "," "," "],[" "," "," "],[0," "," "]],
                [[" "," "," "],[" "," ",1],[" "," "," "]],
                [[" "," "," "],[" "," "," "],[1," "," "]]
            ]
            player.game.span = 3
            expect(player.mirrorX(state)).to.deep.equal(expected)
        })

        it("Mirrors 5x5x5 correctly", () => {
            const state = [
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            const expected = [
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",1," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",0," "]],
                [[" "," "," ",1," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",1," "," "," "],[" "," "," "," ",1]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            player.game.span = 5
            expect(player.mirrorX(state)).to.deep.equal(expected)
        })

    })

    // diagonal board down
    describe("mirrorBDown", () => {

        it("Mirrors 3x3x3 correctly", () => {
            const state = [
                [[" "," "," "],[" "," "," "],[" "," ",0]],
                [[" "," "," "],[1," "," "],[" "," "," "]],
                [[" "," "," "],[" "," "," "],[" "," ",1]]
            ]
            const expected = [
                [[" "," "," "],[" "," "," "],[1," ",0]],
                [[" "," "," "],[" "," "," "],[" "," "," "]],
                [[" "," "," "],[" ",1," "],[" "," "," "]]
            ]
            player.game.span = 3
            expect(player.mirrorBDown(state)).to.deep.equal(expected)
        })

        it("Mirrors 5x5x5 correctly", () => {
            const state = [
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            const expected = [
                [[" "," "," "," "," "],[" "," ",0," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",1," "," "," "],[" "," "," "," ",1]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," ",1," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",0," "]],
                [[" "," "," "," "," "],[" "," ",0," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",1," "," "," "]]
            ]
            player.game.span = 5
            expect(player.mirrorBDown(state)).to.deep.equal(expected)
        })
    })

    // diagonal board up
    describe("mirrorBUp", () => {
        it("Mirrors 3x3x3 correctly", () => {
            const state = [
                [[" "," "," "],[" "," "," "],[" "," ",0]],
                [[" "," "," "],[1," "," "],[" "," "," "]],
                [[" "," "," "],[" "," "," "],[" "," ",1]]
            ]
            const expected = [
                [[" "," "," "],[" ",1," "],[" "," "," "]],
                [[" "," "," "],[" "," "," "],[" "," "," "]],
                [[" "," "," "],[" "," "," "],[0," ",1]]
            ]
            player.game.span = 3
            expect(player.mirrorBUp(state)).to.deep.equal(expected)
        })

        it("Mirrors 5x5x5 correctly", () => {
            const state = [
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            const expected = [
                [[" "," "," "," "," "],[" "," ",0," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                [[" "," ",1," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                [[" "," "," "," "," "],[" "," ",0," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            player.game.span = 5
            expect(player.mirrorBUp(state)).to.deep.equal(expected)
        })
    })

    // diagonal rows down (forward)
    describe("mirrorRDown", () => {
        it("Mirrors 3x3x3 correctly", () => {
            const state = [
                [[" "," "," "],[" "," "," "],[" "," ",0]],
                [[" "," "," "],[1," "," "],[" "," "," "]],
                [[" "," "," "],[" "," "," "],[" "," ",1]]
            ]
            const expected = [
                [[" "," "," "],[" "," "," "],[" "," "," "]],
                [[" "," "," "],[1," "," "],[" "," "," "]],
                [[" "," ",0],[" "," "," "],[" "," ",1]]
            ]
            player.game.span = 3
            expect(player.mirrorRDown(state)).to.deep.equal(expected)
        })
        it("Mirrors 5x5x5 correctly", () => {
            const state = [
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            const expected = [
                [[" "," "," "," "," "],[" "," "," "," "," "],[" ",1," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[" "," "," "," "," "]],
                [[" "," "," ",1," "],[" ",0," "," "," "],[" "," "," "," "," "],[1," "," "," "," "],[" "," "," "," "," "]]
            ]
            player.game.span = 5
            expect(player.mirrorRDown(state)).to.deep.equal(expected)
        })
    })

    // diagonal rows up (forward)
    describe("mirrorRUp", () => {
        it("Mirrors 3x3x3 correctly", () => {
            const state = [
                [[" "," "," "],[" "," "," "],[" "," ",0]],
                [[" "," "," "],[1," "," "],[0," "," "]],
                [[" "," "," "],[" "," "," "],[" "," ",1]]
            ]
            const expected = [
                [[" "," ",1],[0," "," "],[" "," ",0]],
                [[" "," "," "],[1," "," "],[" "," "," "]],
                [[" "," "," "],[" "," "," "],[" "," "," "]]
            ]
            player.game.span = 3
            expect(player.mirrorRUp(state)).to.deep.equal(expected)
        })
        it("Mirrors 5x5x5 correctly", () => {
            const state = [
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            const expected = [
                [[" "," "," "," "," "],[1," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "],[" "," "," ",1," "]],
                [[" "," "," "," "," "],[" "," "," ",1," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" ",1," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            player.game.span = 5
            expect(player.mirrorRUp(state)).to.deep.equal(expected)
        })
    })

    // diagonal columns (right)
    describe("mirrorRight", () => {
        it("Mirrors 3x3x3 correctly", () => {
            const state = [
                [[" "," "," "],[" "," "," "],[" "," ",0]],
                [[" "," "," "],[1," "," "],[0," "," "]],
                [[" "," "," "],[" "," "," "],[" "," ",1]]
            ]
            const expected = [
                [[0," "," "],[" "," "," "],[" "," "," "]],
                [[" "," "," "],[" "," "," "],[0,1," "]],
                [[1," "," "],[" "," "," "],[" "," "," "]]
            ]
            player.game.span = 3
            expect(player.mirrorRight(state)).to.deep.equal(expected)
        })
        it("Mirrors 5x5x5 correctly", () => {
            const state = [
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            const expected = [
                [[" "," "," "," "," "],[1," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[0," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," ",0," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," ",1],[" "," "," ",0," "]],
                [[" "," "," "," "," "],[" ",1," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[1," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            player.game.span = 5
            expect(player.mirrorRight(state)).to.deep.equal(expected)

        })
    })

    // diagonal columns (left)
    describe("mirrorLeft", () => {
        it("Mirrors 3x3x3 correctly", () => {
            const state = [
                [[" "," "," "],[" "," "," "],[" "," ",0]],
                [[" "," "," "],[1," "," "],[0," "," "]],
                [[" "," "," "],[" "," "," "],[" "," ",1]]
            ]
            const expected = [
                [[" "," "," "],[" "," "," "],[" "," ",0]],
                [[" ",1,0],[" "," "," "],[" "," "," "]],
                [[" "," "," "],[" "," "," "],[" "," ",1]]
            ]
            player.game.span = 3
            expect(player.mirrorLeft(state)).to.deep.equal(expected)
        })
        it("Mirrors 5x5x5 correctly", () => {
            const state = [
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            const expected = [
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," ",1],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                [[" ",0," "," "," "],[1," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                [[" "," "," "," ",1],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[" "," "," "," "," "]],
                [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
            ]
            player.game.span = 5
            expect(player.mirrorLeft(state)).to.deep.equal(expected)
        })
    })

    describe("rotateB", () => {
        describe("90 deg", () => {
            it("Rotates 3x3x3 correctly", () => {
                const state = [
                    [[" "," "," "],[" "," "," "],[" "," ",0]],
                    [[" "," "," "],[1," "," "],[0," "," "]],
                    [[" "," "," "],[" "," "," "],[" "," ",1]]
                ]
                const expected = [
                    [[" "," "," "],[" "," "," "],[0," "," "]],
                    [[0,1," "],[" "," "," "],[" "," "," "]],
                    [[" "," "," "],[" "," "," "],[1," "," "]]
                ]
                player.game.span = 3
                expect(player.rotateB(state, 90)).to.deep.equal(expected)
            })
            it("Rotates 5x5x5 correctly", () => {
                const state = [
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                    [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                const expected = [
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[1," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[0," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," ",0," "],[" "," "," "," ",1],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",0," "]],
                    [[1," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",1," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                player.game.span = 5
                expect(player.rotateB(state, 90)).to.deep.equal(expected)
            })
        })
        describe("180 deg", () => {
            it("Rotates 3x3x3 correctly", () => {
                const state = [
                    [[" "," "," "],[" "," "," "],[" "," ",0]],
                    [[" "," "," "],[1," "," "],[0," "," "]],
                    [[" "," "," "],[" "," "," "],[" "," ",1]]
                ]
                const expected = [
                    [[0," "," "],[" "," "," "],[" "," "," "]],
                    [[" "," ",0],[" "," ",1],[" "," "," "]],
                    [[1," "," "],[" "," "," "],[" "," "," "]]
                ]
                player.game.span = 3
                expect(player.rotateB(state, 180)).to.deep.equal(expected)
            })
            it("Rotates 5x5x5 correctly", () => {
                const state = [
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                    [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                const expected = [
                    [[" ",1," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," ",0," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[0," "," "," ",0],[" "," "," ",1," "]],
                    [[" "," "," "," ",1],[" ",1," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                player.game.span = 5
                expect(player.rotateB(state, 180)).to.deep.equal(expected)
            })
        })
        describe("270 deg", () => {
            it("Rotates 3x3x3 correctly", () => {
                const state = [
                    [[" "," "," "],[" "," "," "],[" "," ",0]],
                    [[" "," "," "],[1," "," "],[0," "," "]],
                    [[" "," "," "],[" "," "," "],[" "," ",1]]
                ]
                const expected = [
                    [[" "," ",0],[" "," "," "],[" "," "," "]],
                    [[" "," "," "],[" "," "," "],[" ",1,0]],
                    [[" "," ",1],[" "," "," "],[" "," "," "]]
                ]
                player.game.span = 3
                expect(player.rotateB(state, 270)).to.deep.equal(expected)
            })
            it("Rotates 5x5x5 correctly", () => {
                const state = [
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                    [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                const expected = [
                    [[" "," "," "," "," "],[" "," "," "," ",1],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," ",0],[" "," "," "," "," "]],
                    [[" ",0," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[1," "," "," "," "],[" ",0," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," ",1," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," ",1]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                player.game.span = 5
                expect(player.rotateB(state, 270)).to.deep.equal(expected)
            })
        })
    })

    describe("rotateR", () => {
        describe("90 deg", () => {
            it("Rotates 3x3x3 correctly", () => {
                const state = [
                    [[" "," "," "],[" "," "," "],[" "," ",0]],
                    [[" "," "," "],[1," "," "],[0," "," "]],
                    [[" "," "," "],[" "," "," "],[" "," ",1]]
                ]
                const expected = [
                    [[" "," "," "],[" "," "," "],[" "," "," "]],
                    [[" "," "," "],[1," "," "],[" "," "," "]],
                    [[" "," ",1],[0," "," "],[" "," ",0]]
                ]
                player.game.span = 3
                expect(player.rotateR(state, 90)).to.deep.equal(expected)
            })
            it("Rotates 5x5x5 correctly", () => {
                const state = [
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                    [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                const expected = [
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" ",1," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," ",1," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[1," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "],[" "," "," ",1," "]]
                ]
                player.game.span = 5
                expect(player.rotateR(state, 90)).to.deep.equal(expected)
            })
        })
        describe("180 deg", () => {
            it("Rotates 3x3x3 correctly", () => {
                const state = [
                    [[" "," "," "],[" "," "," "],[" "," ",0]],
                    [[" "," "," "],[1," "," "],[0," "," "]],
                    [[" "," "," "],[" "," "," "],[" "," ",1]]
                ]
                const expected = [
                    [[" "," ",1],[" "," "," "],[" "," "," "]],
                    [[0," "," "],[1," "," "],[" "," "," "]],
                    [[" "," ",0],[" "," "," "],[" "," "," "]]
                ]
                player.game.span = 3
                expect(player.rotateR(state, 180)).to.deep.equal(expected)
            })
            it("Rotates 5x5x5 correctly", () => {
                const state = [
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                    [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                const expected = [
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[1," "," "," "," "],[" "," "," ",1," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[0," "," "," ",0],[" ",1," "," "," "]],
                    [[" ",0," "," ", " "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," ",1," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                player.game.span = 5
                expect(player.rotateR(state, 180)).to.deep.equal(expected)
            })
        })
        describe("270 deg", () => {
            it("Rotates 3x3x3 correctly", () => {
                const state = [
                    [[" "," "," "],[" "," "," "],[" "," ",0]],
                    [[" "," "," "],[1," "," "],[0," "," "]],
                    [[" "," "," "],[" "," "," "],[" "," ",1]]
                ]
                const expected = [
                    [[" "," ",0],[0," "," "],[" "," ",1]],
                    [[" "," "," "],[1," "," "],[" "," "," "]],
                    [[" "," "," "],[" "," "," "],[" "," "," "]]
                ]
                player.game.span = 3
                expect(player.rotateR(state, 270)).to.deep.equal(expected)

            })
            it("Rotates 5x5x5 correctly", () => {
                const state = [
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                    [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                const expected = [
                    [[" "," "," ",1," "],[" ",0," "," "," "],[" "," "," "," "," "],[1," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" ",1," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                player.game.span = 5
                expect(player.rotateR(state, 270)).to.deep.equal(expected)
            })
        })
    })

    describe("rotateC", () => {
        describe("90 deg", () => {
            it("Rotates 3x3x3 correctly", () => {
                const state = [
                    [[" "," "," "],[" "," "," "],[" "," ",0]],
                    [[" "," "," "],[1," "," "],[0," "," "]],
                    [[" "," "," "],[" "," "," "],[" "," ",1]]
                ]
                const expected = [
                    [[" "," "," "],[" ",1," "],[" ",0," "]],
                    [[" "," "," "],[" "," "," "],[" "," "," "]],
                    [[" "," "," "],[" "," "," "],[1," ",0]]
                ]
                player.game.span = 3
                expect(player.rotateC(state, 90)).to.deep.equal(expected)
            })
            it("Rotates 5x5x5 correctly", () => {
                const state = [
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                    [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                const expected = [
                    [[" "," "," "," "," "],[" "," ",0," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",1," "," "," "]],
                    [[" "," ",1," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",0," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",1," "," "," "],[" "," "," "," ",1]],
                    [[" "," "," "," "," "],[" "," ",0," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                player.game.span = 5
                expect(player.rotateC(state, 90)).to.deep.equal(expected)
            })
        })
        describe("180 deg", () => {
            it("Rotates 3x3x3 correctly", () => {
                const state = [
                    [[" "," "," "],[" "," "," "],[" "," ",0]],
                    [[" "," "," "],[1," "," "],[0," "," "]],
                    [[" "," "," "],[" "," "," "],[" "," ",1]]
                ]
                const expected = [
                    [[" "," "," "],[" "," "," "],[1," "," "]],
                    [[" "," "," "],[" "," ",1],[" "," ",0]],
                    [[" "," "," "],[" "," "," "],[0," "," "]]
                ]
                player.game.span = 3
                expect(player.rotateC(state, 180)).to.deep.equal(expected)
            })
            it("Rotates 5x5x5 correctly", () => {
                const state = [
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                    [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                const expected = [
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",1," "," "," "],[" "," "," "," ",1]],
                    [[" "," "," ",1," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",0," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",1," "," "," "]]
                ]
                player.game.span = 5
                expect(player.rotateC(state, 180)).to.deep.equal(expected)
            })
        })
        describe("270 deg", () => {
            it("Rotates 3x3x3 correctly", () => {
                const state = [
                    [[" "," "," "],[" "," "," "],[" "," ",0]],
                    [[" "," "," "],[1," "," "],[0," "," "]],
                    [[" "," "," "],[" "," "," "],[" "," ",1]]
                ]
                const expected = [
                    [[" "," "," "],[" "," "," "],[0," ",1]],
                    [[" "," "," "],[" "," "," "],[" "," "," "]],
                    [[" "," "," "],[" ",1," "],[" ",0," "]]
                ]
                player.game.span = 3
                expect(player.rotateC(state, 270)).to.deep.equal(expected)
            })
            it("Rotates 5x5x5 correctly", () => {
                const state = [
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                    [[" ",1," "," "," "],[0," "," "," ",0],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]
                ]
                const expected = [
                    [[" "," "," "," "," "],[" "," ",0," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "],[1," "," "," "," "]],
                    [[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
                    [[" "," ",1," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" ",0," "," "," "]],
                    [[" "," "," "," "," "],[" "," ",0," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," ",1," "]]
                ]
                player.game.span = 5
                expect(player.rotateC(state, 270)).to.deep.equal(expected)
            })
        })
    })


})

/*
[[" "," "," "],[" "," "," "],[" "," "," "]],
[[" "," "," "],[" "," "," "],[" "," "," "]],
[[" "," "," "],[" "," "," "],[" "," "," "]]

[[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
[[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
[[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
[[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]],
[[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "],[" "," "," "," "," "]]

*/